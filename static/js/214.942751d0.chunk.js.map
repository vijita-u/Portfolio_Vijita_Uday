{"version":3,"file":"static/js/214.942751d0.chunk.js","mappings":"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","sources":["../node_modules/framer-motion/dist/es/motion/features/Feature.mjs","../node_modules/framer-motion/dist/es/events/utils/is-primary-pointer.mjs","../node_modules/framer-motion/dist/es/events/event-info.mjs","../node_modules/framer-motion/dist/es/events/add-dom-event.mjs","../node_modules/framer-motion/dist/es/events/add-pointer-event.mjs","../node_modules/framer-motion/dist/es/utils/distance.mjs","../node_modules/framer-motion/dist/es/gestures/pan/PanSession.mjs","../node_modules/framer-motion/dist/es/gestures/drag/utils/lock.mjs","../node_modules/framer-motion/dist/es/projection/geometry/delta-calc.mjs","../node_modules/framer-motion/dist/es/gestures/drag/utils/constraints.mjs","../node_modules/framer-motion/dist/es/projection/geometry/models.mjs","../node_modules/framer-motion/dist/es/projection/utils/each-axis.mjs","../node_modules/framer-motion/dist/es/projection/geometry/conversion.mjs","../node_modules/framer-motion/dist/es/projection/utils/has-transform.mjs","../node_modules/framer-motion/dist/es/projection/geometry/delta-apply.mjs","../node_modules/framer-motion/dist/es/projection/utils/measure.mjs","../node_modules/framer-motion/dist/es/gestures/drag/VisualElementDragControls.mjs","../node_modules/framer-motion/dist/es/gestures/drag/index.mjs","../node_modules/framer-motion/dist/es/gestures/pan/index.mjs","../node_modules/framer-motion/dist/es/projection/node/state.mjs","../node_modules/framer-motion/dist/es/projection/styles/scale-border-radius.mjs","../node_modules/framer-motion/dist/es/projection/styles/scale-box-shadow.mjs","../node_modules/framer-motion/dist/es/motion/features/layout/MeasureLayout.mjs","../node_modules/framer-motion/dist/es/components/AnimatePresence/use-presence.mjs","../node_modules/framer-motion/dist/es/projection/animation/mix-values.mjs","../node_modules/framer-motion/dist/es/projection/geometry/copy.mjs","../node_modules/framer-motion/dist/es/projection/geometry/delta-remove.mjs","../node_modules/framer-motion/dist/es/projection/geometry/utils.mjs","../node_modules/framer-motion/dist/es/projection/shared/stack.mjs","../node_modules/framer-motion/dist/es/projection/styles/transform.mjs","../node_modules/framer-motion/dist/es/render/utils/compare-by-depth.mjs","../node_modules/framer-motion/dist/es/render/utils/flat-tree.mjs","../node_modules/framer-motion/dist/es/projection/node/create-projection-node.mjs","../node_modules/framer-motion/dist/es/debug/record.mjs","../node_modules/framer-motion/dist/es/render/dom/utils/is-svg-element.mjs","../node_modules/framer-motion/dist/es/utils/delay.mjs","../node_modules/framer-motion/dist/es/animation/interfaces/single-value.mjs","../node_modules/framer-motion/dist/es/projection/node/DocumentProjectionNode.mjs","../node_modules/framer-motion/dist/es/projection/node/HTMLProjectionNode.mjs","../node_modules/framer-motion/dist/es/motion/features/drag.mjs","../node_modules/framer-motion/dist/es/motion/features/layout.mjs","../node_modules/framer-motion/dist/es/utils/shallow-compare.mjs","../node_modules/framer-motion/dist/es/render/utils/animation-state.mjs","../node_modules/framer-motion/dist/es/motion/features/animation/index.mjs","../node_modules/framer-motion/dist/es/motion/features/animation/exit.mjs","../node_modules/framer-motion/dist/es/motion/features/animations.mjs","../node_modules/framer-motion/dist/es/gestures/hover.mjs","../node_modules/framer-motion/dist/es/gestures/focus.mjs","../node_modules/framer-motion/dist/es/gestures/utils/is-node-or-child.mjs","../node_modules/framer-motion/dist/es/gestures/press.mjs","../node_modules/framer-motion/dist/es/motion/features/viewport/observers.mjs","../node_modules/framer-motion/dist/es/motion/features/viewport/index.mjs","../node_modules/framer-motion/dist/es/motion/features/gestures.mjs","../node_modules/framer-motion/dist/es/render/dom/utils/css-variables-conversion.mjs","../node_modules/@babel/runtime/helpers/esm/objectDestructuringEmpty.js","../node_modules/framer-motion/dist/es/render/dom/utils/unit-conversion.mjs","../node_modules/framer-motion/dist/es/render/dom/utils/parse-dom-variant.mjs","../node_modules/framer-motion/dist/es/utils/reduced-motion/state.mjs","../node_modules/framer-motion/dist/es/render/store.mjs","../node_modules/framer-motion/dist/es/render/VisualElement.mjs","../node_modules/framer-motion/dist/es/utils/reduced-motion/index.mjs","../node_modules/framer-motion/dist/es/render/utils/motion-values.mjs","../node_modules/framer-motion/dist/es/render/dom/DOMVisualElement.mjs","../node_modules/framer-motion/dist/es/render/html/HTMLVisualElement.mjs","../node_modules/@babel/runtime/helpers/esm/get.js","../node_modules/@babel/runtime/helpers/esm/superPropBase.js","../node_modules/framer-motion/dist/es/render/svg/SVGVisualElement.mjs","../node_modules/framer-motion/dist/es/render/dom/features-animation.mjs","../node_modules/framer-motion/dist/es/render/dom/create-visual-element.mjs","../node_modules/framer-motion/dist/es/render/dom/features-max.mjs"],"sourcesContent":["class Feature {\n    constructor(node) {\n        this.isMounted = false;\n        this.node = node;\n    }\n    update() { }\n}\n\nexport { Feature };\n","const isPrimaryPointer = (event) => {\n    if (event.pointerType === \"mouse\") {\n        return typeof event.button !== \"number\" || event.button <= 0;\n    }\n    else {\n        /**\n         * isPrimary is true for all mice buttons, whereas every touch point\n         * is regarded as its own input. So subsequent concurrent touch points\n         * will be false.\n         *\n         * Specifically match against false here as incomplete versions of\n         * PointerEvents in very old browser might have it set as undefined.\n         */\n        return event.isPrimary !== false;\n    }\n};\n\nexport { isPrimaryPointer };\n","import { isPrimaryPointer } from './utils/is-primary-pointer.mjs';\n\nfunction extractEventInfo(event, pointType = \"page\") {\n    return {\n        point: {\n            x: event[pointType + \"X\"],\n            y: event[pointType + \"Y\"],\n        },\n    };\n}\nconst addPointerInfo = (handler) => {\n    return (event) => isPrimaryPointer(event) && handler(event, extractEventInfo(event));\n};\n\nexport { addPointerInfo, extractEventInfo };\n","function addDomEvent(target, eventName, handler, options = { passive: true }) {\n    target.addEventListener(eventName, handler, options);\n    return () => target.removeEventListener(eventName, handler);\n}\n\nexport { addDomEvent };\n","import { addDomEvent } from './add-dom-event.mjs';\nimport { addPointerInfo } from './event-info.mjs';\n\nfunction addPointerEvent(target, eventName, handler, options) {\n    return addDomEvent(target, eventName, addPointerInfo(handler), options);\n}\n\nexport { addPointerEvent };\n","const distance = (a, b) => Math.abs(a - b);\nfunction distance2D(a, b) {\n    // Multi-dimensional\n    const xDelta = distance(a.x, b.x);\n    const yDelta = distance(a.y, b.y);\n    return Math.sqrt(xDelta ** 2 + yDelta ** 2);\n}\n\nexport { distance, distance2D };\n","import { extractEventInfo } from '../../events/event-info.mjs';\nimport { secondsToMilliseconds, millisecondsToSeconds } from '../../utils/time-conversion.mjs';\nimport { addPointerEvent } from '../../events/add-pointer-event.mjs';\nimport { pipe } from '../../utils/pipe.mjs';\nimport { distance2D } from '../../utils/distance.mjs';\nimport { isPrimaryPointer } from '../../events/utils/is-primary-pointer.mjs';\nimport { frame, cancelFrame, frameData } from '../../frameloop/frame.mjs';\n\n/**\n * @internal\n */\nclass PanSession {\n    constructor(event, handlers, { transformPagePoint } = {}) {\n        /**\n         * @internal\n         */\n        this.startEvent = null;\n        /**\n         * @internal\n         */\n        this.lastMoveEvent = null;\n        /**\n         * @internal\n         */\n        this.lastMoveEventInfo = null;\n        /**\n         * @internal\n         */\n        this.handlers = {};\n        this.updatePoint = () => {\n            if (!(this.lastMoveEvent && this.lastMoveEventInfo))\n                return;\n            const info = getPanInfo(this.lastMoveEventInfo, this.history);\n            const isPanStarted = this.startEvent !== null;\n            // Only start panning if the offset is larger than 3 pixels. If we make it\n            // any larger than this we'll want to reset the pointer history\n            // on the first update to avoid visual snapping to the cursoe.\n            const isDistancePastThreshold = distance2D(info.offset, { x: 0, y: 0 }) >= 3;\n            if (!isPanStarted && !isDistancePastThreshold)\n                return;\n            const { point } = info;\n            const { timestamp } = frameData;\n            this.history.push({ ...point, timestamp });\n            const { onStart, onMove } = this.handlers;\n            if (!isPanStarted) {\n                onStart && onStart(this.lastMoveEvent, info);\n                this.startEvent = this.lastMoveEvent;\n            }\n            onMove && onMove(this.lastMoveEvent, info);\n        };\n        this.handlePointerMove = (event, info) => {\n            this.lastMoveEvent = event;\n            this.lastMoveEventInfo = transformPoint(info, this.transformPagePoint);\n            // Throttle mouse move event to once per frame\n            frame.update(this.updatePoint, true);\n        };\n        this.handlePointerUp = (event, info) => {\n            this.end();\n            if (!(this.lastMoveEvent && this.lastMoveEventInfo))\n                return;\n            const { onEnd, onSessionEnd } = this.handlers;\n            const panInfo = getPanInfo(event.type === \"pointercancel\"\n                ? this.lastMoveEventInfo\n                : transformPoint(info, this.transformPagePoint), this.history);\n            if (this.startEvent && onEnd) {\n                onEnd(event, panInfo);\n            }\n            onSessionEnd && onSessionEnd(event, panInfo);\n        };\n        // If we have more than one touch, don't start detecting this gesture\n        if (!isPrimaryPointer(event))\n            return;\n        this.handlers = handlers;\n        this.transformPagePoint = transformPagePoint;\n        const info = extractEventInfo(event);\n        const initialInfo = transformPoint(info, this.transformPagePoint);\n        const { point } = initialInfo;\n        const { timestamp } = frameData;\n        this.history = [{ ...point, timestamp }];\n        const { onSessionStart } = handlers;\n        onSessionStart &&\n            onSessionStart(event, getPanInfo(initialInfo, this.history));\n        this.removeListeners = pipe(addPointerEvent(window, \"pointermove\", this.handlePointerMove), addPointerEvent(window, \"pointerup\", this.handlePointerUp), addPointerEvent(window, \"pointercancel\", this.handlePointerUp));\n    }\n    updateHandlers(handlers) {\n        this.handlers = handlers;\n    }\n    end() {\n        this.removeListeners && this.removeListeners();\n        cancelFrame(this.updatePoint);\n    }\n}\nfunction transformPoint(info, transformPagePoint) {\n    return transformPagePoint ? { point: transformPagePoint(info.point) } : info;\n}\nfunction subtractPoint(a, b) {\n    return { x: a.x - b.x, y: a.y - b.y };\n}\nfunction getPanInfo({ point }, history) {\n    return {\n        point,\n        delta: subtractPoint(point, lastDevicePoint(history)),\n        offset: subtractPoint(point, startDevicePoint(history)),\n        velocity: getVelocity(history, 0.1),\n    };\n}\nfunction startDevicePoint(history) {\n    return history[0];\n}\nfunction lastDevicePoint(history) {\n    return history[history.length - 1];\n}\nfunction getVelocity(history, timeDelta) {\n    if (history.length < 2) {\n        return { x: 0, y: 0 };\n    }\n    let i = history.length - 1;\n    let timestampedPoint = null;\n    const lastPoint = lastDevicePoint(history);\n    while (i >= 0) {\n        timestampedPoint = history[i];\n        if (lastPoint.timestamp - timestampedPoint.timestamp >\n            secondsToMilliseconds(timeDelta)) {\n            break;\n        }\n        i--;\n    }\n    if (!timestampedPoint) {\n        return { x: 0, y: 0 };\n    }\n    const time = millisecondsToSeconds(lastPoint.timestamp - timestampedPoint.timestamp);\n    if (time === 0) {\n        return { x: 0, y: 0 };\n    }\n    const currentVelocity = {\n        x: (lastPoint.x - timestampedPoint.x) / time,\n        y: (lastPoint.y - timestampedPoint.y) / time,\n    };\n    if (currentVelocity.x === Infinity) {\n        currentVelocity.x = 0;\n    }\n    if (currentVelocity.y === Infinity) {\n        currentVelocity.y = 0;\n    }\n    return currentVelocity;\n}\n\nexport { PanSession };\n","function createLock(name) {\n    let lock = null;\n    return () => {\n        const openLock = () => {\n            lock = null;\n        };\n        if (lock === null) {\n            lock = name;\n            return openLock;\n        }\n        return false;\n    };\n}\nconst globalHorizontalLock = createLock(\"dragHorizontal\");\nconst globalVerticalLock = createLock(\"dragVertical\");\nfunction getGlobalLock(drag) {\n    let lock = false;\n    if (drag === \"y\") {\n        lock = globalVerticalLock();\n    }\n    else if (drag === \"x\") {\n        lock = globalHorizontalLock();\n    }\n    else {\n        const openHorizontal = globalHorizontalLock();\n        const openVertical = globalVerticalLock();\n        if (openHorizontal && openVertical) {\n            lock = () => {\n                openHorizontal();\n                openVertical();\n            };\n        }\n        else {\n            // Release the locks because we don't use them\n            if (openHorizontal)\n                openHorizontal();\n            if (openVertical)\n                openVertical();\n        }\n    }\n    return lock;\n}\nfunction isDragActive() {\n    // Check the gesture lock - if we get it, it means no drag gesture is active\n    // and we can safely fire the tap gesture.\n    const openGestureLock = getGlobalLock(true);\n    if (!openGestureLock)\n        return true;\n    openGestureLock();\n    return false;\n}\n\nexport { createLock, getGlobalLock, isDragActive };\n","import { mix } from '../../utils/mix.mjs';\n\nfunction calcLength(axis) {\n    return axis.max - axis.min;\n}\nfunction isNear(value, target = 0, maxDistance = 0.01) {\n    return Math.abs(value - target) <= maxDistance;\n}\nfunction calcAxisDelta(delta, source, target, origin = 0.5) {\n    delta.origin = origin;\n    delta.originPoint = mix(source.min, source.max, delta.origin);\n    delta.scale = calcLength(target) / calcLength(source);\n    if (isNear(delta.scale, 1, 0.0001) || isNaN(delta.scale))\n        delta.scale = 1;\n    delta.translate =\n        mix(target.min, target.max, delta.origin) - delta.originPoint;\n    if (isNear(delta.translate) || isNaN(delta.translate))\n        delta.translate = 0;\n}\nfunction calcBoxDelta(delta, source, target, origin) {\n    calcAxisDelta(delta.x, source.x, target.x, origin ? origin.originX : undefined);\n    calcAxisDelta(delta.y, source.y, target.y, origin ? origin.originY : undefined);\n}\nfunction calcRelativeAxis(target, relative, parent) {\n    target.min = parent.min + relative.min;\n    target.max = target.min + calcLength(relative);\n}\nfunction calcRelativeBox(target, relative, parent) {\n    calcRelativeAxis(target.x, relative.x, parent.x);\n    calcRelativeAxis(target.y, relative.y, parent.y);\n}\nfunction calcRelativeAxisPosition(target, layout, parent) {\n    target.min = layout.min - parent.min;\n    target.max = target.min + calcLength(layout);\n}\nfunction calcRelativePosition(target, layout, parent) {\n    calcRelativeAxisPosition(target.x, layout.x, parent.x);\n    calcRelativeAxisPosition(target.y, layout.y, parent.y);\n}\n\nexport { calcAxisDelta, calcBoxDelta, calcLength, calcRelativeAxis, calcRelativeAxisPosition, calcRelativeBox, calcRelativePosition, isNear };\n","import { progress } from '../../../utils/progress.mjs';\nimport { calcLength } from '../../../projection/geometry/delta-calc.mjs';\nimport { clamp } from '../../../utils/clamp.mjs';\nimport { mix } from '../../../utils/mix.mjs';\n\n/**\n * Apply constraints to a point. These constraints are both physical along an\n * axis, and an elastic factor that determines how much to constrain the point\n * by if it does lie outside the defined parameters.\n */\nfunction applyConstraints(point, { min, max }, elastic) {\n    if (min !== undefined && point < min) {\n        // If we have a min point defined, and this is outside of that, constrain\n        point = elastic ? mix(min, point, elastic.min) : Math.max(point, min);\n    }\n    else if (max !== undefined && point > max) {\n        // If we have a max point defined, and this is outside of that, constrain\n        point = elastic ? mix(max, point, elastic.max) : Math.min(point, max);\n    }\n    return point;\n}\n/**\n * Calculate constraints in terms of the viewport when defined relatively to the\n * measured axis. This is measured from the nearest edge, so a max constraint of 200\n * on an axis with a max value of 300 would return a constraint of 500 - axis length\n */\nfunction calcRelativeAxisConstraints(axis, min, max) {\n    return {\n        min: min !== undefined ? axis.min + min : undefined,\n        max: max !== undefined\n            ? axis.max + max - (axis.max - axis.min)\n            : undefined,\n    };\n}\n/**\n * Calculate constraints in terms of the viewport when\n * defined relatively to the measured bounding box.\n */\nfunction calcRelativeConstraints(layoutBox, { top, left, bottom, right }) {\n    return {\n        x: calcRelativeAxisConstraints(layoutBox.x, left, right),\n        y: calcRelativeAxisConstraints(layoutBox.y, top, bottom),\n    };\n}\n/**\n * Calculate viewport constraints when defined as another viewport-relative axis\n */\nfunction calcViewportAxisConstraints(layoutAxis, constraintsAxis) {\n    let min = constraintsAxis.min - layoutAxis.min;\n    let max = constraintsAxis.max - layoutAxis.max;\n    // If the constraints axis is actually smaller than the layout axis then we can\n    // flip the constraints\n    if (constraintsAxis.max - constraintsAxis.min <\n        layoutAxis.max - layoutAxis.min) {\n        [min, max] = [max, min];\n    }\n    return { min, max };\n}\n/**\n * Calculate viewport constraints when defined as another viewport-relative box\n */\nfunction calcViewportConstraints(layoutBox, constraintsBox) {\n    return {\n        x: calcViewportAxisConstraints(layoutBox.x, constraintsBox.x),\n        y: calcViewportAxisConstraints(layoutBox.y, constraintsBox.y),\n    };\n}\n/**\n * Calculate a transform origin relative to the source axis, between 0-1, that results\n * in an asthetically pleasing scale/transform needed to project from source to target.\n */\nfunction calcOrigin(source, target) {\n    let origin = 0.5;\n    const sourceLength = calcLength(source);\n    const targetLength = calcLength(target);\n    if (targetLength > sourceLength) {\n        origin = progress(target.min, target.max - sourceLength, source.min);\n    }\n    else if (sourceLength > targetLength) {\n        origin = progress(source.min, source.max - targetLength, target.min);\n    }\n    return clamp(0, 1, origin);\n}\n/**\n * Rebase the calculated viewport constraints relative to the layout.min point.\n */\nfunction rebaseAxisConstraints(layout, constraints) {\n    const relativeConstraints = {};\n    if (constraints.min !== undefined) {\n        relativeConstraints.min = constraints.min - layout.min;\n    }\n    if (constraints.max !== undefined) {\n        relativeConstraints.max = constraints.max - layout.min;\n    }\n    return relativeConstraints;\n}\nconst defaultElastic = 0.35;\n/**\n * Accepts a dragElastic prop and returns resolved elastic values for each axis.\n */\nfunction resolveDragElastic(dragElastic = defaultElastic) {\n    if (dragElastic === false) {\n        dragElastic = 0;\n    }\n    else if (dragElastic === true) {\n        dragElastic = defaultElastic;\n    }\n    return {\n        x: resolveAxisElastic(dragElastic, \"left\", \"right\"),\n        y: resolveAxisElastic(dragElastic, \"top\", \"bottom\"),\n    };\n}\nfunction resolveAxisElastic(dragElastic, minLabel, maxLabel) {\n    return {\n        min: resolvePointElastic(dragElastic, minLabel),\n        max: resolvePointElastic(dragElastic, maxLabel),\n    };\n}\nfunction resolvePointElastic(dragElastic, label) {\n    return typeof dragElastic === \"number\"\n        ? dragElastic\n        : dragElastic[label] || 0;\n}\n\nexport { applyConstraints, calcOrigin, calcRelativeAxisConstraints, calcRelativeConstraints, calcViewportAxisConstraints, calcViewportConstraints, defaultElastic, rebaseAxisConstraints, resolveAxisElastic, resolveDragElastic, resolvePointElastic };\n","const createAxisDelta = () => ({\n    translate: 0,\n    scale: 1,\n    origin: 0,\n    originPoint: 0,\n});\nconst createDelta = () => ({\n    x: createAxisDelta(),\n    y: createAxisDelta(),\n});\nconst createAxis = () => ({ min: 0, max: 0 });\nconst createBox = () => ({\n    x: createAxis(),\n    y: createAxis(),\n});\n\nexport { createAxis, createAxisDelta, createBox, createDelta };\n","function eachAxis(callback) {\n    return [callback(\"x\"), callback(\"y\")];\n}\n\nexport { eachAxis };\n","/**\n * Bounding boxes tend to be defined as top, left, right, bottom. For various operations\n * it's easier to consider each axis individually. This function returns a bounding box\n * as a map of single-axis min/max values.\n */\nfunction convertBoundingBoxToBox({ top, left, right, bottom, }) {\n    return {\n        x: { min: left, max: right },\n        y: { min: top, max: bottom },\n    };\n}\nfunction convertBoxToBoundingBox({ x, y }) {\n    return { top: y.min, right: x.max, bottom: y.max, left: x.min };\n}\n/**\n * Applies a TransformPoint function to a bounding box. TransformPoint is usually a function\n * provided by Framer to allow measured points to be corrected for device scaling. This is used\n * when measuring DOM elements and DOM event points.\n */\nfunction transformBoxPoints(point, transformPoint) {\n    if (!transformPoint)\n        return point;\n    const topLeft = transformPoint({ x: point.left, y: point.top });\n    const bottomRight = transformPoint({ x: point.right, y: point.bottom });\n    return {\n        top: topLeft.y,\n        left: topLeft.x,\n        bottom: bottomRight.y,\n        right: bottomRight.x,\n    };\n}\n\nexport { convertBoundingBoxToBox, convertBoxToBoundingBox, transformBoxPoints };\n","function isIdentityScale(scale) {\n    return scale === undefined || scale === 1;\n}\nfunction hasScale({ scale, scaleX, scaleY }) {\n    return (!isIdentityScale(scale) ||\n        !isIdentityScale(scaleX) ||\n        !isIdentityScale(scaleY));\n}\nfunction hasTransform(values) {\n    return (hasScale(values) ||\n        has2DTranslate(values) ||\n        values.z ||\n        values.rotate ||\n        values.rotateX ||\n        values.rotateY);\n}\nfunction has2DTranslate(values) {\n    return is2DTranslate(values.x) || is2DTranslate(values.y);\n}\nfunction is2DTranslate(value) {\n    return value && value !== \"0%\";\n}\n\nexport { has2DTranslate, hasScale, hasTransform };\n","import { mix } from '../../utils/mix.mjs';\nimport { hasTransform } from '../utils/has-transform.mjs';\n\n/**\n * Scales a point based on a factor and an originPoint\n */\nfunction scalePoint(point, scale, originPoint) {\n    const distanceFromOrigin = point - originPoint;\n    const scaled = scale * distanceFromOrigin;\n    return originPoint + scaled;\n}\n/**\n * Applies a translate/scale delta to a point\n */\nfunction applyPointDelta(point, translate, scale, originPoint, boxScale) {\n    if (boxScale !== undefined) {\n        point = scalePoint(point, boxScale, originPoint);\n    }\n    return scalePoint(point, scale, originPoint) + translate;\n}\n/**\n * Applies a translate/scale delta to an axis\n */\nfunction applyAxisDelta(axis, translate = 0, scale = 1, originPoint, boxScale) {\n    axis.min = applyPointDelta(axis.min, translate, scale, originPoint, boxScale);\n    axis.max = applyPointDelta(axis.max, translate, scale, originPoint, boxScale);\n}\n/**\n * Applies a translate/scale delta to a box\n */\nfunction applyBoxDelta(box, { x, y }) {\n    applyAxisDelta(box.x, x.translate, x.scale, x.originPoint);\n    applyAxisDelta(box.y, y.translate, y.scale, y.originPoint);\n}\n/**\n * Apply a tree of deltas to a box. We do this to calculate the effect of all the transforms\n * in a tree upon our box before then calculating how to project it into our desired viewport-relative box\n *\n * This is the final nested loop within updateLayoutDelta for future refactoring\n */\nfunction applyTreeDeltas(box, treeScale, treePath, isSharedTransition = false) {\n    const treeLength = treePath.length;\n    if (!treeLength)\n        return;\n    // Reset the treeScale\n    treeScale.x = treeScale.y = 1;\n    let node;\n    let delta;\n    for (let i = 0; i < treeLength; i++) {\n        node = treePath[i];\n        delta = node.projectionDelta;\n        /**\n         * TODO: Prefer to remove this, but currently we have motion components with\n         * display: contents in Framer.\n         */\n        const instance = node.instance;\n        if (instance &&\n            instance.style &&\n            instance.style.display === \"contents\") {\n            continue;\n        }\n        if (isSharedTransition &&\n            node.options.layoutScroll &&\n            node.scroll &&\n            node !== node.root) {\n            transformBox(box, {\n                x: -node.scroll.offset.x,\n                y: -node.scroll.offset.y,\n            });\n        }\n        if (delta) {\n            // Incoporate each ancestor's scale into a culmulative treeScale for this component\n            treeScale.x *= delta.x.scale;\n            treeScale.y *= delta.y.scale;\n            // Apply each ancestor's calculated delta into this component's recorded layout box\n            applyBoxDelta(box, delta);\n        }\n        if (isSharedTransition && hasTransform(node.latestValues)) {\n            transformBox(box, node.latestValues);\n        }\n    }\n    /**\n     * Snap tree scale back to 1 if it's within a non-perceivable threshold.\n     * This will help reduce useless scales getting rendered.\n     */\n    treeScale.x = snapToDefault(treeScale.x);\n    treeScale.y = snapToDefault(treeScale.y);\n}\nfunction snapToDefault(scale) {\n    if (Number.isInteger(scale))\n        return scale;\n    return scale > 1.0000000000001 || scale < 0.999999999999 ? scale : 1;\n}\nfunction translateAxis(axis, distance) {\n    axis.min = axis.min + distance;\n    axis.max = axis.max + distance;\n}\n/**\n * Apply a transform to an axis from the latest resolved motion values.\n * This function basically acts as a bridge between a flat motion value map\n * and applyAxisDelta\n */\nfunction transformAxis(axis, transforms, [key, scaleKey, originKey]) {\n    const axisOrigin = transforms[originKey] !== undefined ? transforms[originKey] : 0.5;\n    const originPoint = mix(axis.min, axis.max, axisOrigin);\n    // Apply the axis delta to the final axis\n    applyAxisDelta(axis, transforms[key], transforms[scaleKey], originPoint, transforms.scale);\n}\n/**\n * The names of the motion values we want to apply as translation, scale and origin.\n */\nconst xKeys = [\"x\", \"scaleX\", \"originX\"];\nconst yKeys = [\"y\", \"scaleY\", \"originY\"];\n/**\n * Apply a transform to a box from the latest resolved motion values.\n */\nfunction transformBox(box, transform) {\n    transformAxis(box.x, transform, xKeys);\n    transformAxis(box.y, transform, yKeys);\n}\n\nexport { applyAxisDelta, applyBoxDelta, applyPointDelta, applyTreeDeltas, scalePoint, transformAxis, transformBox, translateAxis };\n","import { convertBoundingBoxToBox, transformBoxPoints } from '../geometry/conversion.mjs';\nimport { translateAxis } from '../geometry/delta-apply.mjs';\n\nfunction measureViewportBox(instance, transformPoint) {\n    return convertBoundingBoxToBox(transformBoxPoints(instance.getBoundingClientRect(), transformPoint));\n}\nfunction measurePageBox(element, rootProjectionNode, transformPagePoint) {\n    const viewportBox = measureViewportBox(element, transformPagePoint);\n    const { scroll } = rootProjectionNode;\n    if (scroll) {\n        translateAxis(viewportBox.x, scroll.offset.x);\n        translateAxis(viewportBox.y, scroll.offset.y);\n    }\n    return viewportBox;\n}\n\nexport { measurePageBox, measureViewportBox };\n","import { invariant } from '../../utils/errors.mjs';\nimport { PanSession } from '../pan/PanSession.mjs';\nimport { getGlobalLock } from './utils/lock.mjs';\nimport { isRefObject } from '../../utils/is-ref-object.mjs';\nimport { addPointerEvent } from '../../events/add-pointer-event.mjs';\nimport { applyConstraints, calcRelativeConstraints, resolveDragElastic, calcViewportConstraints, defaultElastic, rebaseAxisConstraints, calcOrigin } from './utils/constraints.mjs';\nimport { createBox } from '../../projection/geometry/models.mjs';\nimport { eachAxis } from '../../projection/utils/each-axis.mjs';\nimport { measurePageBox } from '../../projection/utils/measure.mjs';\nimport { extractEventInfo } from '../../events/event-info.mjs';\nimport { convertBoxToBoundingBox, convertBoundingBoxToBox } from '../../projection/geometry/conversion.mjs';\nimport { addDomEvent } from '../../events/add-dom-event.mjs';\nimport { calcLength } from '../../projection/geometry/delta-calc.mjs';\nimport { mix } from '../../utils/mix.mjs';\nimport { percent } from '../../value/types/numbers/units.mjs';\nimport { animateMotionValue } from '../../animation/interfaces/motion-value.mjs';\nimport { frame } from '../../frameloop/frame.mjs';\n\nconst elementDragControls = new WeakMap();\n/**\n *\n */\n// let latestPointerEvent: PointerEvent\nclass VisualElementDragControls {\n    constructor(visualElement) {\n        // This is a reference to the global drag gesture lock, ensuring only one component\n        // can \"capture\" the drag of one or both axes.\n        // TODO: Look into moving this into pansession?\n        this.openGlobalLock = null;\n        this.isDragging = false;\n        this.currentDirection = null;\n        this.originPoint = { x: 0, y: 0 };\n        /**\n         * The permitted boundaries of travel, in pixels.\n         */\n        this.constraints = false;\n        this.hasMutatedConstraints = false;\n        /**\n         * The per-axis resolved elastic values.\n         */\n        this.elastic = createBox();\n        this.visualElement = visualElement;\n    }\n    start(originEvent, { snapToCursor = false } = {}) {\n        /**\n         * Don't start dragging if this component is exiting\n         */\n        const { presenceContext } = this.visualElement;\n        if (presenceContext && presenceContext.isPresent === false)\n            return;\n        const onSessionStart = (event) => {\n            // Stop any animations on both axis values immediately. This allows the user to throw and catch\n            // the component.\n            this.stopAnimation();\n            if (snapToCursor) {\n                this.snapToCursor(extractEventInfo(event, \"page\").point);\n            }\n        };\n        const onStart = (event, info) => {\n            // Attempt to grab the global drag gesture lock - maybe make this part of PanSession\n            const { drag, dragPropagation, onDragStart } = this.getProps();\n            if (drag && !dragPropagation) {\n                if (this.openGlobalLock)\n                    this.openGlobalLock();\n                this.openGlobalLock = getGlobalLock(drag);\n                // If we don 't have the lock, don't start dragging\n                if (!this.openGlobalLock)\n                    return;\n            }\n            this.isDragging = true;\n            this.currentDirection = null;\n            this.resolveConstraints();\n            if (this.visualElement.projection) {\n                this.visualElement.projection.isAnimationBlocked = true;\n                this.visualElement.projection.target = undefined;\n            }\n            /**\n             * Record gesture origin\n             */\n            eachAxis((axis) => {\n                let current = this.getAxisMotionValue(axis).get() || 0;\n                /**\n                 * If the MotionValue is a percentage value convert to px\n                 */\n                if (percent.test(current)) {\n                    const { projection } = this.visualElement;\n                    if (projection && projection.layout) {\n                        const measuredAxis = projection.layout.layoutBox[axis];\n                        if (measuredAxis) {\n                            const length = calcLength(measuredAxis);\n                            current = length * (parseFloat(current) / 100);\n                        }\n                    }\n                }\n                this.originPoint[axis] = current;\n            });\n            // Fire onDragStart event\n            if (onDragStart) {\n                frame.update(() => onDragStart(event, info), false, true);\n            }\n            const { animationState } = this.visualElement;\n            animationState && animationState.setActive(\"whileDrag\", true);\n        };\n        const onMove = (event, info) => {\n            // latestPointerEvent = event\n            const { dragPropagation, dragDirectionLock, onDirectionLock, onDrag, } = this.getProps();\n            // If we didn't successfully receive the gesture lock, early return.\n            if (!dragPropagation && !this.openGlobalLock)\n                return;\n            const { offset } = info;\n            // Attempt to detect drag direction if directionLock is true\n            if (dragDirectionLock && this.currentDirection === null) {\n                this.currentDirection = getCurrentDirection(offset);\n                // If we've successfully set a direction, notify listener\n                if (this.currentDirection !== null) {\n                    onDirectionLock && onDirectionLock(this.currentDirection);\n                }\n                return;\n            }\n            // Update each point with the latest position\n            this.updateAxis(\"x\", info.point, offset);\n            this.updateAxis(\"y\", info.point, offset);\n            /**\n             * Ideally we would leave the renderer to fire naturally at the end of\n             * this frame but if the element is about to change layout as the result\n             * of a re-render we want to ensure the browser can read the latest\n             * bounding box to ensure the pointer and element don't fall out of sync.\n             */\n            this.visualElement.render();\n            /**\n             * This must fire after the render call as it might trigger a state\n             * change which itself might trigger a layout update.\n             */\n            onDrag && onDrag(event, info);\n        };\n        const onSessionEnd = (event, info) => this.stop(event, info);\n        this.panSession = new PanSession(originEvent, {\n            onSessionStart,\n            onStart,\n            onMove,\n            onSessionEnd,\n        }, { transformPagePoint: this.visualElement.getTransformPagePoint() });\n    }\n    stop(event, info) {\n        const isDragging = this.isDragging;\n        this.cancel();\n        if (!isDragging)\n            return;\n        const { velocity } = info;\n        this.startAnimation(velocity);\n        const { onDragEnd } = this.getProps();\n        if (onDragEnd) {\n            frame.update(() => onDragEnd(event, info));\n        }\n    }\n    cancel() {\n        this.isDragging = false;\n        const { projection, animationState } = this.visualElement;\n        if (projection) {\n            projection.isAnimationBlocked = false;\n        }\n        this.panSession && this.panSession.end();\n        this.panSession = undefined;\n        const { dragPropagation } = this.getProps();\n        if (!dragPropagation && this.openGlobalLock) {\n            this.openGlobalLock();\n            this.openGlobalLock = null;\n        }\n        animationState && animationState.setActive(\"whileDrag\", false);\n    }\n    updateAxis(axis, _point, offset) {\n        const { drag } = this.getProps();\n        // If we're not dragging this axis, do an early return.\n        if (!offset || !shouldDrag(axis, drag, this.currentDirection))\n            return;\n        const axisValue = this.getAxisMotionValue(axis);\n        let next = this.originPoint[axis] + offset[axis];\n        // Apply constraints\n        if (this.constraints && this.constraints[axis]) {\n            next = applyConstraints(next, this.constraints[axis], this.elastic[axis]);\n        }\n        axisValue.set(next);\n    }\n    resolveConstraints() {\n        const { dragConstraints, dragElastic } = this.getProps();\n        const { layout } = this.visualElement.projection || {};\n        const prevConstraints = this.constraints;\n        if (dragConstraints && isRefObject(dragConstraints)) {\n            if (!this.constraints) {\n                this.constraints = this.resolveRefConstraints();\n            }\n        }\n        else {\n            if (dragConstraints && layout) {\n                this.constraints = calcRelativeConstraints(layout.layoutBox, dragConstraints);\n            }\n            else {\n                this.constraints = false;\n            }\n        }\n        this.elastic = resolveDragElastic(dragElastic);\n        /**\n         * If we're outputting to external MotionValues, we want to rebase the measured constraints\n         * from viewport-relative to component-relative.\n         */\n        if (prevConstraints !== this.constraints &&\n            layout &&\n            this.constraints &&\n            !this.hasMutatedConstraints) {\n            eachAxis((axis) => {\n                if (this.getAxisMotionValue(axis)) {\n                    this.constraints[axis] = rebaseAxisConstraints(layout.layoutBox[axis], this.constraints[axis]);\n                }\n            });\n        }\n    }\n    resolveRefConstraints() {\n        const { dragConstraints: constraints, onMeasureDragConstraints } = this.getProps();\n        if (!constraints || !isRefObject(constraints))\n            return false;\n        const constraintsElement = constraints.current;\n        invariant(constraintsElement !== null, \"If `dragConstraints` is set as a React ref, that ref must be passed to another component's `ref` prop.\");\n        const { projection } = this.visualElement;\n        // TODO\n        if (!projection || !projection.layout)\n            return false;\n        const constraintsBox = measurePageBox(constraintsElement, projection.root, this.visualElement.getTransformPagePoint());\n        let measuredConstraints = calcViewportConstraints(projection.layout.layoutBox, constraintsBox);\n        /**\n         * If there's an onMeasureDragConstraints listener we call it and\n         * if different constraints are returned, set constraints to that\n         */\n        if (onMeasureDragConstraints) {\n            const userConstraints = onMeasureDragConstraints(convertBoxToBoundingBox(measuredConstraints));\n            this.hasMutatedConstraints = !!userConstraints;\n            if (userConstraints) {\n                measuredConstraints = convertBoundingBoxToBox(userConstraints);\n            }\n        }\n        return measuredConstraints;\n    }\n    startAnimation(velocity) {\n        const { drag, dragMomentum, dragElastic, dragTransition, dragSnapToOrigin, onDragTransitionEnd, } = this.getProps();\n        const constraints = this.constraints || {};\n        const momentumAnimations = eachAxis((axis) => {\n            if (!shouldDrag(axis, drag, this.currentDirection)) {\n                return;\n            }\n            let transition = (constraints && constraints[axis]) || {};\n            if (dragSnapToOrigin)\n                transition = { min: 0, max: 0 };\n            /**\n             * Overdamp the boundary spring if `dragElastic` is disabled. There's still a frame\n             * of spring animations so we should look into adding a disable spring option to `inertia`.\n             * We could do something here where we affect the `bounceStiffness` and `bounceDamping`\n             * using the value of `dragElastic`.\n             */\n            const bounceStiffness = dragElastic ? 200 : 1000000;\n            const bounceDamping = dragElastic ? 40 : 10000000;\n            const inertia = {\n                type: \"inertia\",\n                velocity: dragMomentum ? velocity[axis] : 0,\n                bounceStiffness,\n                bounceDamping,\n                timeConstant: 750,\n                restDelta: 1,\n                restSpeed: 10,\n                ...dragTransition,\n                ...transition,\n            };\n            // If we're not animating on an externally-provided `MotionValue` we can use the\n            // component's animation controls which will handle interactions with whileHover (etc),\n            // otherwise we just have to animate the `MotionValue` itself.\n            return this.startAxisValueAnimation(axis, inertia);\n        });\n        // Run all animations and then resolve the new drag constraints.\n        return Promise.all(momentumAnimations).then(onDragTransitionEnd);\n    }\n    startAxisValueAnimation(axis, transition) {\n        const axisValue = this.getAxisMotionValue(axis);\n        return axisValue.start(animateMotionValue(axis, axisValue, 0, transition));\n    }\n    stopAnimation() {\n        eachAxis((axis) => this.getAxisMotionValue(axis).stop());\n    }\n    /**\n     * Drag works differently depending on which props are provided.\n     *\n     * - If _dragX and _dragY are provided, we output the gesture delta directly to those motion values.\n     * - Otherwise, we apply the delta to the x/y motion values.\n     */\n    getAxisMotionValue(axis) {\n        const dragKey = \"_drag\" + axis.toUpperCase();\n        const props = this.visualElement.getProps();\n        const externalMotionValue = props[dragKey];\n        return externalMotionValue\n            ? externalMotionValue\n            : this.visualElement.getValue(axis, (props.initial ? props.initial[axis] : undefined) || 0);\n    }\n    snapToCursor(point) {\n        eachAxis((axis) => {\n            const { drag } = this.getProps();\n            // If we're not dragging this axis, do an early return.\n            if (!shouldDrag(axis, drag, this.currentDirection))\n                return;\n            const { projection } = this.visualElement;\n            const axisValue = this.getAxisMotionValue(axis);\n            if (projection && projection.layout) {\n                const { min, max } = projection.layout.layoutBox[axis];\n                axisValue.set(point[axis] - mix(min, max, 0.5));\n            }\n        });\n    }\n    /**\n     * When the viewport resizes we want to check if the measured constraints\n     * have changed and, if so, reposition the element within those new constraints\n     * relative to where it was before the resize.\n     */\n    scalePositionWithinConstraints() {\n        if (!this.visualElement.current)\n            return;\n        const { drag, dragConstraints } = this.getProps();\n        const { projection } = this.visualElement;\n        if (!isRefObject(dragConstraints) || !projection || !this.constraints)\n            return;\n        /**\n         * Stop current animations as there can be visual glitching if we try to do\n         * this mid-animation\n         */\n        this.stopAnimation();\n        /**\n         * Record the relative position of the dragged element relative to the\n         * constraints box and save as a progress value.\n         */\n        const boxProgress = { x: 0, y: 0 };\n        eachAxis((axis) => {\n            const axisValue = this.getAxisMotionValue(axis);\n            if (axisValue) {\n                const latest = axisValue.get();\n                boxProgress[axis] = calcOrigin({ min: latest, max: latest }, this.constraints[axis]);\n            }\n        });\n        /**\n         * Update the layout of this element and resolve the latest drag constraints\n         */\n        const { transformTemplate } = this.visualElement.getProps();\n        this.visualElement.current.style.transform = transformTemplate\n            ? transformTemplate({}, \"\")\n            : \"none\";\n        projection.root && projection.root.updateScroll();\n        projection.updateLayout();\n        this.resolveConstraints();\n        /**\n         * For each axis, calculate the current progress of the layout axis\n         * within the new constraints.\n         */\n        eachAxis((axis) => {\n            if (!shouldDrag(axis, drag, null))\n                return;\n            /**\n             * Calculate a new transform based on the previous box progress\n             */\n            const axisValue = this.getAxisMotionValue(axis);\n            const { min, max } = this.constraints[axis];\n            axisValue.set(mix(min, max, boxProgress[axis]));\n        });\n    }\n    addListeners() {\n        if (!this.visualElement.current)\n            return;\n        elementDragControls.set(this.visualElement, this);\n        const element = this.visualElement.current;\n        /**\n         * Attach a pointerdown event listener on this DOM element to initiate drag tracking.\n         */\n        const stopPointerListener = addPointerEvent(element, \"pointerdown\", (event) => {\n            const { drag, dragListener = true } = this.getProps();\n            drag && dragListener && this.start(event);\n        });\n        const measureDragConstraints = () => {\n            const { dragConstraints } = this.getProps();\n            if (isRefObject(dragConstraints)) {\n                this.constraints = this.resolveRefConstraints();\n            }\n        };\n        const { projection } = this.visualElement;\n        const stopMeasureLayoutListener = projection.addEventListener(\"measure\", measureDragConstraints);\n        if (projection && !projection.layout) {\n            projection.root && projection.root.updateScroll();\n            projection.updateLayout();\n        }\n        measureDragConstraints();\n        /**\n         * Attach a window resize listener to scale the draggable target within its defined\n         * constraints as the window resizes.\n         */\n        const stopResizeListener = addDomEvent(window, \"resize\", () => this.scalePositionWithinConstraints());\n        /**\n         * If the element's layout changes, calculate the delta and apply that to\n         * the drag gesture's origin point.\n         */\n        const stopLayoutUpdateListener = projection.addEventListener(\"didUpdate\", (({ delta, hasLayoutChanged }) => {\n            if (this.isDragging && hasLayoutChanged) {\n                eachAxis((axis) => {\n                    const motionValue = this.getAxisMotionValue(axis);\n                    if (!motionValue)\n                        return;\n                    this.originPoint[axis] += delta[axis].translate;\n                    motionValue.set(motionValue.get() + delta[axis].translate);\n                });\n                this.visualElement.render();\n            }\n        }));\n        return () => {\n            stopResizeListener();\n            stopPointerListener();\n            stopMeasureLayoutListener();\n            stopLayoutUpdateListener && stopLayoutUpdateListener();\n        };\n    }\n    getProps() {\n        const props = this.visualElement.getProps();\n        const { drag = false, dragDirectionLock = false, dragPropagation = false, dragConstraints = false, dragElastic = defaultElastic, dragMomentum = true, } = props;\n        return {\n            ...props,\n            drag,\n            dragDirectionLock,\n            dragPropagation,\n            dragConstraints,\n            dragElastic,\n            dragMomentum,\n        };\n    }\n}\nfunction shouldDrag(direction, drag, currentDirection) {\n    return ((drag === true || drag === direction) &&\n        (currentDirection === null || currentDirection === direction));\n}\n/**\n * Based on an x/y offset determine the current drag direction. If both axis' offsets are lower\n * than the provided threshold, return `null`.\n *\n * @param offset - The x/y offset from origin.\n * @param lockThreshold - (Optional) - the minimum absolute offset before we can determine a drag direction.\n */\nfunction getCurrentDirection(offset, lockThreshold = 10) {\n    let direction = null;\n    if (Math.abs(offset.y) > lockThreshold) {\n        direction = \"y\";\n    }\n    else if (Math.abs(offset.x) > lockThreshold) {\n        direction = \"x\";\n    }\n    return direction;\n}\n\nexport { VisualElementDragControls, elementDragControls };\n","import { Feature } from '../../motion/features/Feature.mjs';\nimport { noop } from '../../utils/noop.mjs';\nimport { VisualElementDragControls } from './VisualElementDragControls.mjs';\n\nclass DragGesture extends Feature {\n    constructor(node) {\n        super(node);\n        this.removeGroupControls = noop;\n        this.removeListeners = noop;\n        this.controls = new VisualElementDragControls(node);\n    }\n    mount() {\n        // If we've been provided a DragControls for manual control over the drag gesture,\n        // subscribe this component to it on mount.\n        const { dragControls } = this.node.getProps();\n        if (dragControls) {\n            this.removeGroupControls = dragControls.subscribe(this.controls);\n        }\n        this.removeListeners = this.controls.addListeners() || noop;\n    }\n    unmount() {\n        this.removeGroupControls();\n        this.removeListeners();\n    }\n}\n\nexport { DragGesture };\n","import { PanSession } from './PanSession.mjs';\nimport { addPointerEvent } from '../../events/add-pointer-event.mjs';\nimport { Feature } from '../../motion/features/Feature.mjs';\nimport { noop } from '../../utils/noop.mjs';\nimport { frame } from '../../frameloop/frame.mjs';\n\nconst asyncHandler = (handler) => (event, info) => {\n    if (handler) {\n        frame.update(() => handler(event, info));\n    }\n};\nclass PanGesture extends Feature {\n    constructor() {\n        super(...arguments);\n        this.removePointerDownListener = noop;\n    }\n    onPointerDown(pointerDownEvent) {\n        this.session = new PanSession(pointerDownEvent, this.createPanHandlers(), { transformPagePoint: this.node.getTransformPagePoint() });\n    }\n    createPanHandlers() {\n        const { onPanSessionStart, onPanStart, onPan, onPanEnd } = this.node.getProps();\n        return {\n            onSessionStart: asyncHandler(onPanSessionStart),\n            onStart: asyncHandler(onPanStart),\n            onMove: onPan,\n            onEnd: (event, info) => {\n                delete this.session;\n                if (onPanEnd) {\n                    frame.update(() => onPanEnd(event, info));\n                }\n            },\n        };\n    }\n    mount() {\n        this.removePointerDownListener = addPointerEvent(this.node.current, \"pointerdown\", (event) => this.onPointerDown(event));\n    }\n    update() {\n        this.session && this.session.updateHandlers(this.createPanHandlers());\n    }\n    unmount() {\n        this.removePointerDownListener();\n        this.session && this.session.end();\n    }\n}\n\nexport { PanGesture };\n","/**\n * This should only ever be modified on the client otherwise it'll\n * persist through server requests. If we need instanced states we\n * could lazy-init via root.\n */\nconst globalProjectionState = {\n    /**\n     * Global flag as to whether the tree has animated since the last time\n     * we resized the window\n     */\n    hasAnimatedSinceResize: true,\n    /**\n     * We set this to true once, on the first update. Any nodes added to the tree beyond that\n     * update will be given a `data-projection-id` attribute.\n     */\n    hasEverUpdated: false,\n};\n\nexport { globalProjectionState };\n","import { px } from '../../value/types/numbers/units.mjs';\n\nfunction pixelsToPercent(pixels, axis) {\n    if (axis.max === axis.min)\n        return 0;\n    return (pixels / (axis.max - axis.min)) * 100;\n}\n/**\n * We always correct borderRadius as a percentage rather than pixels to reduce paints.\n * For example, if you are projecting a box that is 100px wide with a 10px borderRadius\n * into a box that is 200px wide with a 20px borderRadius, that is actually a 10%\n * borderRadius in both states. If we animate between the two in pixels that will trigger\n * a paint each time. If we animate between the two in percentage we'll avoid a paint.\n */\nconst correctBorderRadius = {\n    correct: (latest, node) => {\n        if (!node.target)\n            return latest;\n        /**\n         * If latest is a string, if it's a percentage we can return immediately as it's\n         * going to be stretched appropriately. Otherwise, if it's a pixel, convert it to a number.\n         */\n        if (typeof latest === \"string\") {\n            if (px.test(latest)) {\n                latest = parseFloat(latest);\n            }\n            else {\n                return latest;\n            }\n        }\n        /**\n         * If latest is a number, it's a pixel value. We use the current viewportBox to calculate that\n         * pixel value as a percentage of each axis\n         */\n        const x = pixelsToPercent(latest, node.target.x);\n        const y = pixelsToPercent(latest, node.target.y);\n        return `${x}% ${y}%`;\n    },\n};\n\nexport { correctBorderRadius, pixelsToPercent };\n","import { mix } from '../../utils/mix.mjs';\nimport { complex } from '../../value/types/complex/index.mjs';\n\nconst correctBoxShadow = {\n    correct: (latest, { treeScale, projectionDelta }) => {\n        const original = latest;\n        const shadow = complex.parse(latest);\n        // TODO: Doesn't support multiple shadows\n        if (shadow.length > 5)\n            return original;\n        const template = complex.createTransformer(latest);\n        const offset = typeof shadow[0] !== \"number\" ? 1 : 0;\n        // Calculate the overall context scale\n        const xScale = projectionDelta.x.scale * treeScale.x;\n        const yScale = projectionDelta.y.scale * treeScale.y;\n        shadow[0 + offset] /= xScale;\n        shadow[1 + offset] /= yScale;\n        /**\n         * Ideally we'd correct x and y scales individually, but because blur and\n         * spread apply to both we have to take a scale average and apply that instead.\n         * We could potentially improve the outcome of this by incorporating the ratio between\n         * the two scales.\n         */\n        const averageScale = mix(xScale, yScale, 0.5);\n        // Blur\n        if (typeof shadow[2 + offset] === \"number\")\n            shadow[2 + offset] /= averageScale;\n        // Spread\n        if (typeof shadow[3 + offset] === \"number\")\n            shadow[3 + offset] /= averageScale;\n        return template(shadow);\n    },\n};\n\nexport { correctBoxShadow };\n","import React__default, { useContext } from 'react';\nimport { usePresence } from '../../../components/AnimatePresence/use-presence.mjs';\nimport { LayoutGroupContext } from '../../../context/LayoutGroupContext.mjs';\nimport { SwitchLayoutGroupContext } from '../../../context/SwitchLayoutGroupContext.mjs';\nimport { globalProjectionState } from '../../../projection/node/state.mjs';\nimport { correctBorderRadius } from '../../../projection/styles/scale-border-radius.mjs';\nimport { correctBoxShadow } from '../../../projection/styles/scale-box-shadow.mjs';\nimport { addScaleCorrector } from '../../../projection/styles/scale-correction.mjs';\nimport { frame } from '../../../frameloop/frame.mjs';\n\nclass MeasureLayoutWithContext extends React__default.Component {\n    /**\n     * This only mounts projection nodes for components that\n     * need measuring, we might want to do it for all components\n     * in order to incorporate transforms\n     */\n    componentDidMount() {\n        const { visualElement, layoutGroup, switchLayoutGroup, layoutId } = this.props;\n        const { projection } = visualElement;\n        addScaleCorrector(defaultScaleCorrectors);\n        if (projection) {\n            if (layoutGroup.group)\n                layoutGroup.group.add(projection);\n            if (switchLayoutGroup && switchLayoutGroup.register && layoutId) {\n                switchLayoutGroup.register(projection);\n            }\n            projection.root.didUpdate();\n            projection.addEventListener(\"animationComplete\", () => {\n                this.safeToRemove();\n            });\n            projection.setOptions({\n                ...projection.options,\n                onExitComplete: () => this.safeToRemove(),\n            });\n        }\n        globalProjectionState.hasEverUpdated = true;\n    }\n    getSnapshotBeforeUpdate(prevProps) {\n        const { layoutDependency, visualElement, drag, isPresent } = this.props;\n        const projection = visualElement.projection;\n        if (!projection)\n            return null;\n        /**\n         * TODO: We use this data in relegate to determine whether to\n         * promote a previous element. There's no guarantee its presence data\n         * will have updated by this point - if a bug like this arises it will\n         * have to be that we markForRelegation and then find a new lead some other way,\n         * perhaps in didUpdate\n         */\n        projection.isPresent = isPresent;\n        if (drag ||\n            prevProps.layoutDependency !== layoutDependency ||\n            layoutDependency === undefined) {\n            projection.willUpdate();\n        }\n        else {\n            this.safeToRemove();\n        }\n        if (prevProps.isPresent !== isPresent) {\n            if (isPresent) {\n                projection.promote();\n            }\n            else if (!projection.relegate()) {\n                /**\n                 * If there's another stack member taking over from this one,\n                 * it's in charge of the exit animation and therefore should\n                 * be in charge of the safe to remove. Otherwise we call it here.\n                 */\n                frame.postRender(() => {\n                    const stack = projection.getStack();\n                    if (!stack || !stack.members.length) {\n                        this.safeToRemove();\n                    }\n                });\n            }\n        }\n        return null;\n    }\n    componentDidUpdate() {\n        const { projection } = this.props.visualElement;\n        if (projection) {\n            projection.root.didUpdate();\n            queueMicrotask(() => {\n                if (!projection.currentAnimation && projection.isLead()) {\n                    this.safeToRemove();\n                }\n            });\n        }\n    }\n    componentWillUnmount() {\n        const { visualElement, layoutGroup, switchLayoutGroup: promoteContext, } = this.props;\n        const { projection } = visualElement;\n        if (projection) {\n            projection.scheduleCheckAfterUnmount();\n            if (layoutGroup && layoutGroup.group)\n                layoutGroup.group.remove(projection);\n            if (promoteContext && promoteContext.deregister)\n                promoteContext.deregister(projection);\n        }\n    }\n    safeToRemove() {\n        const { safeToRemove } = this.props;\n        safeToRemove && safeToRemove();\n    }\n    render() {\n        return null;\n    }\n}\nfunction MeasureLayout(props) {\n    const [isPresent, safeToRemove] = usePresence();\n    const layoutGroup = useContext(LayoutGroupContext);\n    return (React__default.createElement(MeasureLayoutWithContext, { ...props, layoutGroup: layoutGroup, switchLayoutGroup: useContext(SwitchLayoutGroupContext), isPresent: isPresent, safeToRemove: safeToRemove }));\n}\nconst defaultScaleCorrectors = {\n    borderRadius: {\n        ...correctBorderRadius,\n        applyTo: [\n            \"borderTopLeftRadius\",\n            \"borderTopRightRadius\",\n            \"borderBottomLeftRadius\",\n            \"borderBottomRightRadius\",\n        ],\n    },\n    borderTopLeftRadius: correctBorderRadius,\n    borderTopRightRadius: correctBorderRadius,\n    borderBottomLeftRadius: correctBorderRadius,\n    borderBottomRightRadius: correctBorderRadius,\n    boxShadow: correctBoxShadow,\n};\n\nexport { MeasureLayout };\n","import { useContext, useId, useEffect } from 'react';\nimport { PresenceContext } from '../../context/PresenceContext.mjs';\n\n/**\n * When a component is the child of `AnimatePresence`, it can use `usePresence`\n * to access information about whether it's still present in the React tree.\n *\n * ```jsx\n * import { usePresence } from \"framer-motion\"\n *\n * export const Component = () => {\n *   const [isPresent, safeToRemove] = usePresence()\n *\n *   useEffect(() => {\n *     !isPresent && setTimeout(safeToRemove, 1000)\n *   }, [isPresent])\n *\n *   return <div />\n * }\n * ```\n *\n * If `isPresent` is `false`, it means that a component has been removed the tree, but\n * `AnimatePresence` won't really remove it until `safeToRemove` has been called.\n *\n * @public\n */\nfunction usePresence() {\n    const context = useContext(PresenceContext);\n    if (context === null)\n        return [true, null];\n    const { isPresent, onExitComplete, register } = context;\n    // It's safe to call the following hooks conditionally (after an early return) because the context will always\n    // either be null or non-null for the lifespan of the component.\n    const id = useId();\n    useEffect(() => register(id), []);\n    const safeToRemove = () => onExitComplete && onExitComplete(id);\n    return !isPresent && onExitComplete ? [false, safeToRemove] : [true];\n}\n/**\n * Similar to `usePresence`, except `useIsPresent` simply returns whether or not the component is present.\n * There is no `safeToRemove` function.\n *\n * ```jsx\n * import { useIsPresent } from \"framer-motion\"\n *\n * export const Component = () => {\n *   const isPresent = useIsPresent()\n *\n *   useEffect(() => {\n *     !isPresent && console.log(\"I've been removed!\")\n *   }, [isPresent])\n *\n *   return <div />\n * }\n * ```\n *\n * @public\n */\nfunction useIsPresent() {\n    return isPresent(useContext(PresenceContext));\n}\nfunction isPresent(context) {\n    return context === null ? true : context.isPresent;\n}\n\nexport { isPresent, useIsPresent, usePresence };\n","import { circOut } from '../../easing/circ.mjs';\nimport { progress } from '../../utils/progress.mjs';\nimport { mix } from '../../utils/mix.mjs';\nimport { noop } from '../../utils/noop.mjs';\nimport { percent, px } from '../../value/types/numbers/units.mjs';\n\nconst borders = [\"TopLeft\", \"TopRight\", \"BottomLeft\", \"BottomRight\"];\nconst numBorders = borders.length;\nconst asNumber = (value) => typeof value === \"string\" ? parseFloat(value) : value;\nconst isPx = (value) => typeof value === \"number\" || px.test(value);\nfunction mixValues(target, follow, lead, progress, shouldCrossfadeOpacity, isOnlyMember) {\n    if (shouldCrossfadeOpacity) {\n        target.opacity = mix(0, \n        // TODO Reinstate this if only child\n        lead.opacity !== undefined ? lead.opacity : 1, easeCrossfadeIn(progress));\n        target.opacityExit = mix(follow.opacity !== undefined ? follow.opacity : 1, 0, easeCrossfadeOut(progress));\n    }\n    else if (isOnlyMember) {\n        target.opacity = mix(follow.opacity !== undefined ? follow.opacity : 1, lead.opacity !== undefined ? lead.opacity : 1, progress);\n    }\n    /**\n     * Mix border radius\n     */\n    for (let i = 0; i < numBorders; i++) {\n        const borderLabel = `border${borders[i]}Radius`;\n        let followRadius = getRadius(follow, borderLabel);\n        let leadRadius = getRadius(lead, borderLabel);\n        if (followRadius === undefined && leadRadius === undefined)\n            continue;\n        followRadius || (followRadius = 0);\n        leadRadius || (leadRadius = 0);\n        const canMix = followRadius === 0 ||\n            leadRadius === 0 ||\n            isPx(followRadius) === isPx(leadRadius);\n        if (canMix) {\n            target[borderLabel] = Math.max(mix(asNumber(followRadius), asNumber(leadRadius), progress), 0);\n            if (percent.test(leadRadius) || percent.test(followRadius)) {\n                target[borderLabel] += \"%\";\n            }\n        }\n        else {\n            target[borderLabel] = leadRadius;\n        }\n    }\n    /**\n     * Mix rotation\n     */\n    if (follow.rotate || lead.rotate) {\n        target.rotate = mix(follow.rotate || 0, lead.rotate || 0, progress);\n    }\n}\nfunction getRadius(values, radiusName) {\n    return values[radiusName] !== undefined\n        ? values[radiusName]\n        : values.borderRadius;\n}\n// /**\n//  * We only want to mix the background color if there's a follow element\n//  * that we're not crossfading opacity between. For instance with switch\n//  * AnimateSharedLayout animations, this helps the illusion of a continuous\n//  * element being animated but also cuts down on the number of paints triggered\n//  * for elements where opacity is doing that work for us.\n//  */\n// if (\n//     !hasFollowElement &&\n//     latestLeadValues.backgroundColor &&\n//     latestFollowValues.backgroundColor\n// ) {\n//     /**\n//      * This isn't ideal performance-wise as mixColor is creating a new function every frame.\n//      * We could probably create a mixer that runs at the start of the animation but\n//      * the idea behind the crossfader is that it runs dynamically between two potentially\n//      * changing targets (ie opacity or borderRadius may be animating independently via variants)\n//      */\n//     leadState.backgroundColor = followState.backgroundColor = mixColor(\n//         latestFollowValues.backgroundColor as string,\n//         latestLeadValues.backgroundColor as string\n//     )(p)\n// }\nconst easeCrossfadeIn = compress(0, 0.5, circOut);\nconst easeCrossfadeOut = compress(0.5, 0.95, noop);\nfunction compress(min, max, easing) {\n    return (p) => {\n        // Could replace ifs with clamp\n        if (p < min)\n            return 0;\n        if (p > max)\n            return 1;\n        return easing(progress(min, max, p));\n    };\n}\n\nexport { mixValues };\n","/**\n * Reset an axis to the provided origin box.\n *\n * This is a mutative operation.\n */\nfunction copyAxisInto(axis, originAxis) {\n    axis.min = originAxis.min;\n    axis.max = originAxis.max;\n}\n/**\n * Reset a box to the provided origin box.\n *\n * This is a mutative operation.\n */\nfunction copyBoxInto(box, originBox) {\n    copyAxisInto(box.x, originBox.x);\n    copyAxisInto(box.y, originBox.y);\n}\n\nexport { copyAxisInto, copyBoxInto };\n","import { mix } from '../../utils/mix.mjs';\nimport { percent } from '../../value/types/numbers/units.mjs';\nimport { scalePoint } from './delta-apply.mjs';\n\n/**\n * Remove a delta from a point. This is essentially the steps of applyPointDelta in reverse\n */\nfunction removePointDelta(point, translate, scale, originPoint, boxScale) {\n    point -= translate;\n    point = scalePoint(point, 1 / scale, originPoint);\n    if (boxScale !== undefined) {\n        point = scalePoint(point, 1 / boxScale, originPoint);\n    }\n    return point;\n}\n/**\n * Remove a delta from an axis. This is essentially the steps of applyAxisDelta in reverse\n */\nfunction removeAxisDelta(axis, translate = 0, scale = 1, origin = 0.5, boxScale, originAxis = axis, sourceAxis = axis) {\n    if (percent.test(translate)) {\n        translate = parseFloat(translate);\n        const relativeProgress = mix(sourceAxis.min, sourceAxis.max, translate / 100);\n        translate = relativeProgress - sourceAxis.min;\n    }\n    if (typeof translate !== \"number\")\n        return;\n    let originPoint = mix(originAxis.min, originAxis.max, origin);\n    if (axis === originAxis)\n        originPoint -= translate;\n    axis.min = removePointDelta(axis.min, translate, scale, originPoint, boxScale);\n    axis.max = removePointDelta(axis.max, translate, scale, originPoint, boxScale);\n}\n/**\n * Remove a transforms from an axis. This is essentially the steps of applyAxisTransforms in reverse\n * and acts as a bridge between motion values and removeAxisDelta\n */\nfunction removeAxisTransforms(axis, transforms, [key, scaleKey, originKey], origin, sourceAxis) {\n    removeAxisDelta(axis, transforms[key], transforms[scaleKey], transforms[originKey], transforms.scale, origin, sourceAxis);\n}\n/**\n * The names of the motion values we want to apply as translation, scale and origin.\n */\nconst xKeys = [\"x\", \"scaleX\", \"originX\"];\nconst yKeys = [\"y\", \"scaleY\", \"originY\"];\n/**\n * Remove a transforms from an box. This is essentially the steps of applyAxisBox in reverse\n * and acts as a bridge between motion values and removeAxisDelta\n */\nfunction removeBoxTransforms(box, transforms, originBox, sourceBox) {\n    removeAxisTransforms(box.x, transforms, xKeys, originBox ? originBox.x : undefined, sourceBox ? sourceBox.x : undefined);\n    removeAxisTransforms(box.y, transforms, yKeys, originBox ? originBox.y : undefined, sourceBox ? sourceBox.y : undefined);\n}\n\nexport { removeAxisDelta, removeAxisTransforms, removeBoxTransforms, removePointDelta };\n","import { calcLength } from './delta-calc.mjs';\n\nfunction isAxisDeltaZero(delta) {\n    return delta.translate === 0 && delta.scale === 1;\n}\nfunction isDeltaZero(delta) {\n    return isAxisDeltaZero(delta.x) && isAxisDeltaZero(delta.y);\n}\nfunction boxEquals(a, b) {\n    return (a.x.min === b.x.min &&\n        a.x.max === b.x.max &&\n        a.y.min === b.y.min &&\n        a.y.max === b.y.max);\n}\nfunction boxEqualsRounded(a, b) {\n    return (Math.round(a.x.min) === Math.round(b.x.min) &&\n        Math.round(a.x.max) === Math.round(b.x.max) &&\n        Math.round(a.y.min) === Math.round(b.y.min) &&\n        Math.round(a.y.max) === Math.round(b.y.max));\n}\nfunction aspectRatio(box) {\n    return calcLength(box.x) / calcLength(box.y);\n}\n\nexport { aspectRatio, boxEquals, boxEqualsRounded, isDeltaZero };\n","import { addUniqueItem, removeItem } from '../../utils/array.mjs';\n\nclass NodeStack {\n    constructor() {\n        this.members = [];\n    }\n    add(node) {\n        addUniqueItem(this.members, node);\n        node.scheduleRender();\n    }\n    remove(node) {\n        removeItem(this.members, node);\n        if (node === this.prevLead) {\n            this.prevLead = undefined;\n        }\n        if (node === this.lead) {\n            const prevLead = this.members[this.members.length - 1];\n            if (prevLead) {\n                this.promote(prevLead);\n            }\n        }\n    }\n    relegate(node) {\n        const indexOfNode = this.members.findIndex((member) => node === member);\n        if (indexOfNode === 0)\n            return false;\n        /**\n         * Find the next projection node that is present\n         */\n        let prevLead;\n        for (let i = indexOfNode; i >= 0; i--) {\n            const member = this.members[i];\n            if (member.isPresent !== false) {\n                prevLead = member;\n                break;\n            }\n        }\n        if (prevLead) {\n            this.promote(prevLead);\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n    promote(node, preserveFollowOpacity) {\n        const prevLead = this.lead;\n        if (node === prevLead)\n            return;\n        this.prevLead = prevLead;\n        this.lead = node;\n        node.show();\n        if (prevLead) {\n            prevLead.instance && prevLead.scheduleRender();\n            node.scheduleRender();\n            node.resumeFrom = prevLead;\n            if (preserveFollowOpacity) {\n                node.resumeFrom.preserveOpacity = true;\n            }\n            if (prevLead.snapshot) {\n                node.snapshot = prevLead.snapshot;\n                node.snapshot.latestValues =\n                    prevLead.animationValues || prevLead.latestValues;\n            }\n            if (node.root && node.root.isUpdating) {\n                node.isLayoutDirty = true;\n            }\n            const { crossfade } = node.options;\n            if (crossfade === false) {\n                prevLead.hide();\n            }\n            /**\n             * TODO:\n             *   - Test border radius when previous node was deleted\n             *   - boxShadow mixing\n             *   - Shared between element A in scrolled container and element B (scroll stays the same or changes)\n             *   - Shared between element A in transformed container and element B (transform stays the same or changes)\n             *   - Shared between element A in scrolled page and element B (scroll stays the same or changes)\n             * ---\n             *   - Crossfade opacity of root nodes\n             *   - layoutId changes after animation\n             *   - layoutId changes mid animation\n             */\n        }\n    }\n    exitAnimationComplete() {\n        this.members.forEach((node) => {\n            const { options, resumingFrom } = node;\n            options.onExitComplete && options.onExitComplete();\n            if (resumingFrom) {\n                resumingFrom.options.onExitComplete &&\n                    resumingFrom.options.onExitComplete();\n            }\n        });\n    }\n    scheduleRender() {\n        this.members.forEach((node) => {\n            node.instance && node.scheduleRender(false);\n        });\n    }\n    /**\n     * Clear any leads that have been removed this render to prevent them from being\n     * used in future animations and to prevent memory leaks\n     */\n    removeLeadSnapshot() {\n        if (this.lead && this.lead.snapshot) {\n            this.lead.snapshot = undefined;\n        }\n    }\n}\n\nexport { NodeStack };\n","function buildProjectionTransform(delta, treeScale, latestTransform) {\n    let transform = \"\";\n    /**\n     * The translations we use to calculate are always relative to the viewport coordinate space.\n     * But when we apply scales, we also scale the coordinate space of an element and its children.\n     * For instance if we have a treeScale (the culmination of all parent scales) of 0.5 and we need\n     * to move an element 100 pixels, we actually need to move it 200 in within that scaled space.\n     */\n    const xTranslate = delta.x.translate / treeScale.x;\n    const yTranslate = delta.y.translate / treeScale.y;\n    if (xTranslate || yTranslate) {\n        transform = `translate3d(${xTranslate}px, ${yTranslate}px, 0) `;\n    }\n    /**\n     * Apply scale correction for the tree transform.\n     * This will apply scale to the screen-orientated axes.\n     */\n    if (treeScale.x !== 1 || treeScale.y !== 1) {\n        transform += `scale(${1 / treeScale.x}, ${1 / treeScale.y}) `;\n    }\n    if (latestTransform) {\n        const { rotate, rotateX, rotateY } = latestTransform;\n        if (rotate)\n            transform += `rotate(${rotate}deg) `;\n        if (rotateX)\n            transform += `rotateX(${rotateX}deg) `;\n        if (rotateY)\n            transform += `rotateY(${rotateY}deg) `;\n    }\n    /**\n     * Apply scale to match the size of the element to the size we want it.\n     * This will apply scale to the element-orientated axes.\n     */\n    const elementScaleX = delta.x.scale * treeScale.x;\n    const elementScaleY = delta.y.scale * treeScale.y;\n    if (elementScaleX !== 1 || elementScaleY !== 1) {\n        transform += `scale(${elementScaleX}, ${elementScaleY})`;\n    }\n    return transform || \"none\";\n}\n\nexport { buildProjectionTransform };\n","const compareByDepth = (a, b) => a.depth - b.depth;\n\nexport { compareByDepth };\n","import { addUniqueItem, removeItem } from '../../utils/array.mjs';\nimport { compareByDepth } from './compare-by-depth.mjs';\n\nclass FlatTree {\n    constructor() {\n        this.children = [];\n        this.isDirty = false;\n    }\n    add(child) {\n        addUniqueItem(this.children, child);\n        this.isDirty = true;\n    }\n    remove(child) {\n        removeItem(this.children, child);\n        this.isDirty = true;\n    }\n    forEach(callback) {\n        this.isDirty && this.children.sort(compareByDepth);\n        this.isDirty = false;\n        this.children.forEach(callback);\n    }\n}\n\nexport { FlatTree };\n","import { SubscriptionManager } from '../../utils/subscription-manager.mjs';\nimport { mixValues } from '../animation/mix-values.mjs';\nimport { copyBoxInto } from '../geometry/copy.mjs';\nimport { translateAxis, transformBox, applyBoxDelta, applyTreeDeltas } from '../geometry/delta-apply.mjs';\nimport { calcRelativePosition, calcRelativeBox, calcBoxDelta, calcLength, isNear } from '../geometry/delta-calc.mjs';\nimport { removeBoxTransforms } from '../geometry/delta-remove.mjs';\nimport { createBox, createDelta } from '../geometry/models.mjs';\nimport { getValueTransition } from '../../animation/utils/transitions.mjs';\nimport { boxEqualsRounded, isDeltaZero, aspectRatio, boxEquals } from '../geometry/utils.mjs';\nimport { NodeStack } from '../shared/stack.mjs';\nimport { scaleCorrectors } from '../styles/scale-correction.mjs';\nimport { buildProjectionTransform } from '../styles/transform.mjs';\nimport { eachAxis } from '../utils/each-axis.mjs';\nimport { hasTransform, hasScale, has2DTranslate } from '../utils/has-transform.mjs';\nimport { FlatTree } from '../../render/utils/flat-tree.mjs';\nimport { resolveMotionValue } from '../../value/utils/resolve-motion-value.mjs';\nimport { globalProjectionState } from './state.mjs';\nimport { delay } from '../../utils/delay.mjs';\nimport { mix } from '../../utils/mix.mjs';\nimport { record } from '../../debug/record.mjs';\nimport { isSVGElement } from '../../render/dom/utils/is-svg-element.mjs';\nimport { animateSingleValue } from '../../animation/interfaces/single-value.mjs';\nimport { clamp } from '../../utils/clamp.mjs';\nimport { cancelFrame, frameData, steps, frame } from '../../frameloop/frame.mjs';\nimport { noop } from '../../utils/noop.mjs';\n\nconst transformAxes = [\"\", \"X\", \"Y\", \"Z\"];\n/**\n * We use 1000 as the animation target as 0-1000 maps better to pixels than 0-1\n * which has a noticeable difference in spring animations\n */\nconst animationTarget = 1000;\nlet id = 0;\n/**\n * Use a mutable data object for debug data so as to not create a new\n * object every frame.\n */\nconst projectionFrameData = {\n    type: \"projectionFrame\",\n    totalNodes: 0,\n    resolvedTargetDeltas: 0,\n    recalculatedProjection: 0,\n};\nfunction createProjectionNode({ attachResizeListener, defaultParent, measureScroll, checkIsScrollRoot, resetTransform, }) {\n    return class ProjectionNode {\n        constructor(latestValues = {}, parent = defaultParent === null || defaultParent === void 0 ? void 0 : defaultParent()) {\n            /**\n             * A unique ID generated for every projection node.\n             */\n            this.id = id++;\n            /**\n             * An id that represents a unique session instigated by startUpdate.\n             */\n            this.animationId = 0;\n            /**\n             * A Set containing all this component's children. This is used to iterate\n             * through the children.\n             *\n             * TODO: This could be faster to iterate as a flat array stored on the root node.\n             */\n            this.children = new Set();\n            /**\n             * Options for the node. We use this to configure what kind of layout animations\n             * we should perform (if any).\n             */\n            this.options = {};\n            /**\n             * We use this to detect when its safe to shut down part of a projection tree.\n             * We have to keep projecting children for scale correction and relative projection\n             * until all their parents stop performing layout animations.\n             */\n            this.isTreeAnimating = false;\n            this.isAnimationBlocked = false;\n            /**\n             * Flag to true if we think this layout has been changed. We can't always know this,\n             * currently we set it to true every time a component renders, or if it has a layoutDependency\n             * if that has changed between renders. Additionally, components can be grouped by LayoutGroup\n             * and if one node is dirtied, they all are.\n             */\n            this.isLayoutDirty = false;\n            /**\n             * Flag to true if we think the projection calculations for this node needs\n             * recalculating as a result of an updated transform or layout animation.\n             */\n            this.isProjectionDirty = false;\n            /**\n             * Flag to true if the layout *or* transform has changed. This then gets propagated\n             * throughout the projection tree, forcing any element below to recalculate on the next frame.\n             */\n            this.isSharedProjectionDirty = false;\n            /**\n             * Flag transform dirty. This gets propagated throughout the whole tree but is only\n             * respected by shared nodes.\n             */\n            this.isTransformDirty = false;\n            /**\n             * Block layout updates for instant layout transitions throughout the tree.\n             */\n            this.updateManuallyBlocked = false;\n            this.updateBlockedByResize = false;\n            /**\n             * Set to true between the start of the first `willUpdate` call and the end of the `didUpdate`\n             * call.\n             */\n            this.isUpdating = false;\n            /**\n             * If this is an SVG element we currently disable projection transforms\n             */\n            this.isSVG = false;\n            /**\n             * Flag to true (during promotion) if a node doing an instant layout transition needs to reset\n             * its projection styles.\n             */\n            this.needsReset = false;\n            /**\n             * Flags whether this node should have its transform reset prior to measuring.\n             */\n            this.shouldResetTransform = false;\n            /**\n             * An object representing the calculated contextual/accumulated/tree scale.\n             * This will be used to scale calculcated projection transforms, as these are\n             * calculated in screen-space but need to be scaled for elements to layoutly\n             * make it to their calculated destinations.\n             *\n             * TODO: Lazy-init\n             */\n            this.treeScale = { x: 1, y: 1 };\n            /**\n             *\n             */\n            this.eventHandlers = new Map();\n            this.hasTreeAnimated = false;\n            // Note: Currently only running on root node\n            this.updateScheduled = false;\n            this.checkUpdateFailed = () => {\n                if (this.isUpdating) {\n                    this.isUpdating = false;\n                    this.clearAllSnapshots();\n                }\n            };\n            /**\n             * This is a multi-step process as shared nodes might be of different depths. Nodes\n             * are sorted by depth order, so we need to resolve the entire tree before moving to\n             * the next step.\n             */\n            this.updateProjection = () => {\n                /**\n                 * Reset debug counts. Manually resetting rather than creating a new\n                 * object each frame.\n                 */\n                projectionFrameData.totalNodes =\n                    projectionFrameData.resolvedTargetDeltas =\n                        projectionFrameData.recalculatedProjection =\n                            0;\n                this.nodes.forEach(propagateDirtyNodes);\n                this.nodes.forEach(resolveTargetDelta);\n                this.nodes.forEach(calcProjection);\n                this.nodes.forEach(cleanDirtyNodes);\n                record(projectionFrameData);\n            };\n            this.hasProjected = false;\n            this.isVisible = true;\n            this.animationProgress = 0;\n            /**\n             * Shared layout\n             */\n            // TODO Only running on root node\n            this.sharedNodes = new Map();\n            this.latestValues = latestValues;\n            this.root = parent ? parent.root || parent : this;\n            this.path = parent ? [...parent.path, parent] : [];\n            this.parent = parent;\n            this.depth = parent ? parent.depth + 1 : 0;\n            for (let i = 0; i < this.path.length; i++) {\n                this.path[i].shouldResetTransform = true;\n            }\n            if (this.root === this)\n                this.nodes = new FlatTree();\n        }\n        addEventListener(name, handler) {\n            if (!this.eventHandlers.has(name)) {\n                this.eventHandlers.set(name, new SubscriptionManager());\n            }\n            return this.eventHandlers.get(name).add(handler);\n        }\n        notifyListeners(name, ...args) {\n            const subscriptionManager = this.eventHandlers.get(name);\n            subscriptionManager && subscriptionManager.notify(...args);\n        }\n        hasListeners(name) {\n            return this.eventHandlers.has(name);\n        }\n        /**\n         * Lifecycles\n         */\n        mount(instance, isLayoutDirty = this.root.hasTreeAnimated) {\n            if (this.instance)\n                return;\n            this.isSVG = isSVGElement(instance);\n            this.instance = instance;\n            const { layoutId, layout, visualElement } = this.options;\n            if (visualElement && !visualElement.current) {\n                visualElement.mount(instance);\n            }\n            this.root.nodes.add(this);\n            this.parent && this.parent.children.add(this);\n            if (isLayoutDirty && (layout || layoutId)) {\n                this.isLayoutDirty = true;\n            }\n            if (attachResizeListener) {\n                let cancelDelay;\n                const resizeUnblockUpdate = () => (this.root.updateBlockedByResize = false);\n                attachResizeListener(instance, () => {\n                    this.root.updateBlockedByResize = true;\n                    cancelDelay && cancelDelay();\n                    cancelDelay = delay(resizeUnblockUpdate, 250);\n                    if (globalProjectionState.hasAnimatedSinceResize) {\n                        globalProjectionState.hasAnimatedSinceResize = false;\n                        this.nodes.forEach(finishAnimation);\n                    }\n                });\n            }\n            if (layoutId) {\n                this.root.registerSharedNode(layoutId, this);\n            }\n            // Only register the handler if it requires layout animation\n            if (this.options.animate !== false &&\n                visualElement &&\n                (layoutId || layout)) {\n                this.addEventListener(\"didUpdate\", ({ delta, hasLayoutChanged, hasRelativeTargetChanged, layout: newLayout, }) => {\n                    if (this.isTreeAnimationBlocked()) {\n                        this.target = undefined;\n                        this.relativeTarget = undefined;\n                        return;\n                    }\n                    // TODO: Check here if an animation exists\n                    const layoutTransition = this.options.transition ||\n                        visualElement.getDefaultTransition() ||\n                        defaultLayoutTransition;\n                    const { onLayoutAnimationStart, onLayoutAnimationComplete, } = visualElement.getProps();\n                    /**\n                     * The target layout of the element might stay the same,\n                     * but its position relative to its parent has changed.\n                     */\n                    const targetChanged = !this.targetLayout ||\n                        !boxEqualsRounded(this.targetLayout, newLayout) ||\n                        hasRelativeTargetChanged;\n                    /**\n                     * If the layout hasn't seemed to have changed, it might be that the\n                     * element is visually in the same place in the document but its position\n                     * relative to its parent has indeed changed. So here we check for that.\n                     */\n                    const hasOnlyRelativeTargetChanged = !hasLayoutChanged && hasRelativeTargetChanged;\n                    if (this.options.layoutRoot ||\n                        (this.resumeFrom && this.resumeFrom.instance) ||\n                        hasOnlyRelativeTargetChanged ||\n                        (hasLayoutChanged &&\n                            (targetChanged || !this.currentAnimation))) {\n                        if (this.resumeFrom) {\n                            this.resumingFrom = this.resumeFrom;\n                            this.resumingFrom.resumingFrom = undefined;\n                        }\n                        this.setAnimationOrigin(delta, hasOnlyRelativeTargetChanged);\n                        const animationOptions = {\n                            ...getValueTransition(layoutTransition, \"layout\"),\n                            onPlay: onLayoutAnimationStart,\n                            onComplete: onLayoutAnimationComplete,\n                        };\n                        if (visualElement.shouldReduceMotion ||\n                            this.options.layoutRoot) {\n                            animationOptions.delay = 0;\n                            animationOptions.type = false;\n                        }\n                        this.startAnimation(animationOptions);\n                    }\n                    else {\n                        /**\n                         * If the layout hasn't changed and we have an animation that hasn't started yet,\n                         * finish it immediately. Otherwise it will be animating from a location\n                         * that was probably never commited to screen and look like a jumpy box.\n                         */\n                        if (!hasLayoutChanged) {\n                            finishAnimation(this);\n                        }\n                        if (this.isLead() && this.options.onExitComplete) {\n                            this.options.onExitComplete();\n                        }\n                    }\n                    this.targetLayout = newLayout;\n                });\n            }\n        }\n        unmount() {\n            this.options.layoutId && this.willUpdate();\n            this.root.nodes.remove(this);\n            const stack = this.getStack();\n            stack && stack.remove(this);\n            this.parent && this.parent.children.delete(this);\n            this.instance = undefined;\n            cancelFrame(this.updateProjection);\n        }\n        // only on the root\n        blockUpdate() {\n            this.updateManuallyBlocked = true;\n        }\n        unblockUpdate() {\n            this.updateManuallyBlocked = false;\n        }\n        isUpdateBlocked() {\n            return this.updateManuallyBlocked || this.updateBlockedByResize;\n        }\n        isTreeAnimationBlocked() {\n            return (this.isAnimationBlocked ||\n                (this.parent && this.parent.isTreeAnimationBlocked()) ||\n                false);\n        }\n        // Note: currently only running on root node\n        startUpdate() {\n            if (this.isUpdateBlocked())\n                return;\n            this.isUpdating = true;\n            this.nodes && this.nodes.forEach(resetRotation);\n            this.animationId++;\n        }\n        getTransformTemplate() {\n            const { visualElement } = this.options;\n            return visualElement && visualElement.getProps().transformTemplate;\n        }\n        willUpdate(shouldNotifyListeners = true) {\n            this.root.hasTreeAnimated = true;\n            if (this.root.isUpdateBlocked()) {\n                this.options.onExitComplete && this.options.onExitComplete();\n                return;\n            }\n            !this.root.isUpdating && this.root.startUpdate();\n            if (this.isLayoutDirty)\n                return;\n            this.isLayoutDirty = true;\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                node.shouldResetTransform = true;\n                node.updateScroll(\"snapshot\");\n                if (node.options.layoutRoot) {\n                    node.willUpdate(false);\n                }\n            }\n            const { layoutId, layout } = this.options;\n            if (layoutId === undefined && !layout)\n                return;\n            const transformTemplate = this.getTransformTemplate();\n            this.prevTransformTemplateValue = transformTemplate\n                ? transformTemplate(this.latestValues, \"\")\n                : undefined;\n            this.updateSnapshot();\n            shouldNotifyListeners && this.notifyListeners(\"willUpdate\");\n        }\n        update() {\n            this.updateScheduled = false;\n            const updateWasBlocked = this.isUpdateBlocked();\n            // When doing an instant transition, we skip the layout update,\n            // but should still clean up the measurements so that the next\n            // snapshot could be taken correctly.\n            if (updateWasBlocked) {\n                this.unblockUpdate();\n                this.clearAllSnapshots();\n                this.nodes.forEach(clearMeasurements);\n                return;\n            }\n            if (!this.isUpdating) {\n                this.nodes.forEach(clearIsLayoutDirty);\n            }\n            this.isUpdating = false;\n            /**\n             * Write\n             */\n            this.nodes.forEach(resetTransformStyle);\n            /**\n             * Read ==================\n             */\n            // Update layout measurements of updated children\n            this.nodes.forEach(updateLayout);\n            /**\n             * Write\n             */\n            // Notify listeners that the layout is updated\n            this.nodes.forEach(notifyLayoutUpdate);\n            this.clearAllSnapshots();\n            /**\n             * Manually flush any pending updates. Ideally\n             * we could leave this to the following requestAnimationFrame but this seems\n             * to leave a flash of incorrectly styled content.\n             */\n            const now = performance.now();\n            frameData.delta = clamp(0, 1000 / 60, now - frameData.timestamp);\n            frameData.timestamp = now;\n            frameData.isProcessing = true;\n            steps.update.process(frameData);\n            steps.preRender.process(frameData);\n            steps.render.process(frameData);\n            frameData.isProcessing = false;\n        }\n        didUpdate() {\n            if (!this.updateScheduled) {\n                this.updateScheduled = true;\n                queueMicrotask(() => this.update());\n            }\n        }\n        clearAllSnapshots() {\n            this.nodes.forEach(clearSnapshot);\n            this.sharedNodes.forEach(removeLeadSnapshots);\n        }\n        scheduleUpdateProjection() {\n            frame.preRender(this.updateProjection, false, true);\n        }\n        scheduleCheckAfterUnmount() {\n            /**\n             * If the unmounting node is in a layoutGroup and did trigger a willUpdate,\n             * we manually call didUpdate to give a chance to the siblings to animate.\n             * Otherwise, cleanup all snapshots to prevents future nodes from reusing them.\n             */\n            frame.postRender(() => {\n                if (this.isLayoutDirty) {\n                    this.root.didUpdate();\n                }\n                else {\n                    this.root.checkUpdateFailed();\n                }\n            });\n        }\n        /**\n         * Update measurements\n         */\n        updateSnapshot() {\n            if (this.snapshot || !this.instance)\n                return;\n            this.snapshot = this.measure();\n        }\n        updateLayout() {\n            if (!this.instance)\n                return;\n            // TODO: Incorporate into a forwarded scroll offset\n            this.updateScroll();\n            if (!(this.options.alwaysMeasureLayout && this.isLead()) &&\n                !this.isLayoutDirty) {\n                return;\n            }\n            /**\n             * When a node is mounted, it simply resumes from the prevLead's\n             * snapshot instead of taking a new one, but the ancestors scroll\n             * might have updated while the prevLead is unmounted. We need to\n             * update the scroll again to make sure the layout we measure is\n             * up to date.\n             */\n            if (this.resumeFrom && !this.resumeFrom.instance) {\n                for (let i = 0; i < this.path.length; i++) {\n                    const node = this.path[i];\n                    node.updateScroll();\n                }\n            }\n            const prevLayout = this.layout;\n            this.layout = this.measure(false);\n            this.layoutCorrected = createBox();\n            this.isLayoutDirty = false;\n            this.projectionDelta = undefined;\n            this.notifyListeners(\"measure\", this.layout.layoutBox);\n            const { visualElement } = this.options;\n            visualElement &&\n                visualElement.notify(\"LayoutMeasure\", this.layout.layoutBox, prevLayout ? prevLayout.layoutBox : undefined);\n        }\n        updateScroll(phase = \"measure\") {\n            let needsMeasurement = Boolean(this.options.layoutScroll && this.instance);\n            if (this.scroll &&\n                this.scroll.animationId === this.root.animationId &&\n                this.scroll.phase === phase) {\n                needsMeasurement = false;\n            }\n            if (needsMeasurement) {\n                this.scroll = {\n                    animationId: this.root.animationId,\n                    phase,\n                    isRoot: checkIsScrollRoot(this.instance),\n                    offset: measureScroll(this.instance),\n                };\n            }\n        }\n        resetTransform() {\n            if (!resetTransform)\n                return;\n            const isResetRequested = this.isLayoutDirty || this.shouldResetTransform;\n            const hasProjection = this.projectionDelta && !isDeltaZero(this.projectionDelta);\n            const transformTemplate = this.getTransformTemplate();\n            const transformTemplateValue = transformTemplate\n                ? transformTemplate(this.latestValues, \"\")\n                : undefined;\n            const transformTemplateHasChanged = transformTemplateValue !== this.prevTransformTemplateValue;\n            if (isResetRequested &&\n                (hasProjection ||\n                    hasTransform(this.latestValues) ||\n                    transformTemplateHasChanged)) {\n                resetTransform(this.instance, transformTemplateValue);\n                this.shouldResetTransform = false;\n                this.scheduleRender();\n            }\n        }\n        measure(removeTransform = true) {\n            const pageBox = this.measurePageBox();\n            let layoutBox = this.removeElementScroll(pageBox);\n            /**\n             * Measurements taken during the pre-render stage\n             * still have transforms applied so we remove them\n             * via calculation.\n             */\n            if (removeTransform) {\n                layoutBox = this.removeTransform(layoutBox);\n            }\n            roundBox(layoutBox);\n            return {\n                animationId: this.root.animationId,\n                measuredBox: pageBox,\n                layoutBox,\n                latestValues: {},\n                source: this.id,\n            };\n        }\n        measurePageBox() {\n            const { visualElement } = this.options;\n            if (!visualElement)\n                return createBox();\n            const box = visualElement.measureViewportBox();\n            // Remove viewport scroll to give page-relative coordinates\n            const { scroll } = this.root;\n            if (scroll) {\n                translateAxis(box.x, scroll.offset.x);\n                translateAxis(box.y, scroll.offset.y);\n            }\n            return box;\n        }\n        removeElementScroll(box) {\n            const boxWithoutScroll = createBox();\n            copyBoxInto(boxWithoutScroll, box);\n            /**\n             * Performance TODO: Keep a cumulative scroll offset down the tree\n             * rather than loop back up the path.\n             */\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                const { scroll, options } = node;\n                if (node !== this.root && scroll && options.layoutScroll) {\n                    /**\n                     * If this is a new scroll root, we want to remove all previous scrolls\n                     * from the viewport box.\n                     */\n                    if (scroll.isRoot) {\n                        copyBoxInto(boxWithoutScroll, box);\n                        const { scroll: rootScroll } = this.root;\n                        /**\n                         * Undo the application of page scroll that was originally added\n                         * to the measured bounding box.\n                         */\n                        if (rootScroll) {\n                            translateAxis(boxWithoutScroll.x, -rootScroll.offset.x);\n                            translateAxis(boxWithoutScroll.y, -rootScroll.offset.y);\n                        }\n                    }\n                    translateAxis(boxWithoutScroll.x, scroll.offset.x);\n                    translateAxis(boxWithoutScroll.y, scroll.offset.y);\n                }\n            }\n            return boxWithoutScroll;\n        }\n        applyTransform(box, transformOnly = false) {\n            const withTransforms = createBox();\n            copyBoxInto(withTransforms, box);\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                if (!transformOnly &&\n                    node.options.layoutScroll &&\n                    node.scroll &&\n                    node !== node.root) {\n                    transformBox(withTransforms, {\n                        x: -node.scroll.offset.x,\n                        y: -node.scroll.offset.y,\n                    });\n                }\n                if (!hasTransform(node.latestValues))\n                    continue;\n                transformBox(withTransforms, node.latestValues);\n            }\n            if (hasTransform(this.latestValues)) {\n                transformBox(withTransforms, this.latestValues);\n            }\n            return withTransforms;\n        }\n        removeTransform(box) {\n            const boxWithoutTransform = createBox();\n            copyBoxInto(boxWithoutTransform, box);\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                if (!node.instance)\n                    continue;\n                if (!hasTransform(node.latestValues))\n                    continue;\n                hasScale(node.latestValues) && node.updateSnapshot();\n                const sourceBox = createBox();\n                const nodeBox = node.measurePageBox();\n                copyBoxInto(sourceBox, nodeBox);\n                removeBoxTransforms(boxWithoutTransform, node.latestValues, node.snapshot ? node.snapshot.layoutBox : undefined, sourceBox);\n            }\n            if (hasTransform(this.latestValues)) {\n                removeBoxTransforms(boxWithoutTransform, this.latestValues);\n            }\n            return boxWithoutTransform;\n        }\n        setTargetDelta(delta) {\n            this.targetDelta = delta;\n            this.root.scheduleUpdateProjection();\n            this.isProjectionDirty = true;\n        }\n        setOptions(options) {\n            this.options = {\n                ...this.options,\n                ...options,\n                crossfade: options.crossfade !== undefined ? options.crossfade : true,\n            };\n        }\n        clearMeasurements() {\n            this.scroll = undefined;\n            this.layout = undefined;\n            this.snapshot = undefined;\n            this.prevTransformTemplateValue = undefined;\n            this.targetDelta = undefined;\n            this.target = undefined;\n            this.isLayoutDirty = false;\n        }\n        forceRelativeParentToResolveTarget() {\n            if (!this.relativeParent)\n                return;\n            /**\n             * If the parent target isn't up-to-date, force it to update.\n             * This is an unfortunate de-optimisation as it means any updating relative\n             * projection will cause all the relative parents to recalculate back\n             * up the tree.\n             */\n            if (this.relativeParent.resolvedRelativeTargetAt !==\n                frameData.timestamp) {\n                this.relativeParent.resolveTargetDelta(true);\n            }\n        }\n        resolveTargetDelta(forceRecalculation = false) {\n            var _a;\n            /**\n             * Once the dirty status of nodes has been spread through the tree, we also\n             * need to check if we have a shared node of a different depth that has itself\n             * been dirtied.\n             */\n            const lead = this.getLead();\n            this.isProjectionDirty || (this.isProjectionDirty = lead.isProjectionDirty);\n            this.isTransformDirty || (this.isTransformDirty = lead.isTransformDirty);\n            this.isSharedProjectionDirty || (this.isSharedProjectionDirty = lead.isSharedProjectionDirty);\n            const isShared = Boolean(this.resumingFrom) || this !== lead;\n            /**\n             * We don't use transform for this step of processing so we don't\n             * need to check whether any nodes have changed transform.\n             */\n            const canSkip = !(forceRecalculation ||\n                (isShared && this.isSharedProjectionDirty) ||\n                this.isProjectionDirty ||\n                ((_a = this.parent) === null || _a === void 0 ? void 0 : _a.isProjectionDirty) ||\n                this.attemptToResolveRelativeTarget);\n            if (canSkip)\n                return;\n            const { layout, layoutId } = this.options;\n            /**\n             * If we have no layout, we can't perform projection, so early return\n             */\n            if (!this.layout || !(layout || layoutId))\n                return;\n            this.resolvedRelativeTargetAt = frameData.timestamp;\n            /**\n             * If we don't have a targetDelta but do have a layout, we can attempt to resolve\n             * a relativeParent. This will allow a component to perform scale correction\n             * even if no animation has started.\n             */\n            // TODO If this is unsuccessful this currently happens every frame\n            if (!this.targetDelta && !this.relativeTarget) {\n                // TODO: This is a semi-repetition of further down this function, make DRY\n                const relativeParent = this.getClosestProjectingParent();\n                if (relativeParent &&\n                    relativeParent.layout &&\n                    this.animationProgress !== 1) {\n                    this.relativeParent = relativeParent;\n                    this.forceRelativeParentToResolveTarget();\n                    this.relativeTarget = createBox();\n                    this.relativeTargetOrigin = createBox();\n                    calcRelativePosition(this.relativeTargetOrigin, this.layout.layoutBox, relativeParent.layout.layoutBox);\n                    copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);\n                }\n                else {\n                    this.relativeParent = this.relativeTarget = undefined;\n                }\n            }\n            /**\n             * If we have no relative target or no target delta our target isn't valid\n             * for this frame.\n             */\n            if (!this.relativeTarget && !this.targetDelta)\n                return;\n            /**\n             * Lazy-init target data structure\n             */\n            if (!this.target) {\n                this.target = createBox();\n                this.targetWithTransforms = createBox();\n            }\n            /**\n             * If we've got a relative box for this component, resolve it into a target relative to the parent.\n             */\n            if (this.relativeTarget &&\n                this.relativeTargetOrigin &&\n                this.relativeParent &&\n                this.relativeParent.target) {\n                this.forceRelativeParentToResolveTarget();\n                calcRelativeBox(this.target, this.relativeTarget, this.relativeParent.target);\n                /**\n                 * If we've only got a targetDelta, resolve it into a target\n                 */\n            }\n            else if (this.targetDelta) {\n                if (Boolean(this.resumingFrom)) {\n                    // TODO: This is creating a new object every frame\n                    this.target = this.applyTransform(this.layout.layoutBox);\n                }\n                else {\n                    copyBoxInto(this.target, this.layout.layoutBox);\n                }\n                applyBoxDelta(this.target, this.targetDelta);\n            }\n            else {\n                /**\n                 * If no target, use own layout as target\n                 */\n                copyBoxInto(this.target, this.layout.layoutBox);\n            }\n            /**\n             * If we've been told to attempt to resolve a relative target, do so.\n             */\n            if (this.attemptToResolveRelativeTarget) {\n                this.attemptToResolveRelativeTarget = false;\n                const relativeParent = this.getClosestProjectingParent();\n                if (relativeParent &&\n                    Boolean(relativeParent.resumingFrom) ===\n                        Boolean(this.resumingFrom) &&\n                    !relativeParent.options.layoutScroll &&\n                    relativeParent.target &&\n                    this.animationProgress !== 1) {\n                    this.relativeParent = relativeParent;\n                    this.forceRelativeParentToResolveTarget();\n                    this.relativeTarget = createBox();\n                    this.relativeTargetOrigin = createBox();\n                    calcRelativePosition(this.relativeTargetOrigin, this.target, relativeParent.target);\n                    copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);\n                }\n                else {\n                    this.relativeParent = this.relativeTarget = undefined;\n                }\n            }\n            /**\n             * Increase debug counter for resolved target deltas\n             */\n            projectionFrameData.resolvedTargetDeltas++;\n        }\n        getClosestProjectingParent() {\n            if (!this.parent ||\n                hasScale(this.parent.latestValues) ||\n                has2DTranslate(this.parent.latestValues)) {\n                return undefined;\n            }\n            if (this.parent.isProjecting()) {\n                return this.parent;\n            }\n            else {\n                return this.parent.getClosestProjectingParent();\n            }\n        }\n        isProjecting() {\n            return Boolean((this.relativeTarget ||\n                this.targetDelta ||\n                this.options.layoutRoot) &&\n                this.layout);\n        }\n        calcProjection() {\n            var _a;\n            const lead = this.getLead();\n            const isShared = Boolean(this.resumingFrom) || this !== lead;\n            let canSkip = true;\n            /**\n             * If this is a normal layout animation and neither this node nor its nearest projecting\n             * is dirty then we can't skip.\n             */\n            if (this.isProjectionDirty || ((_a = this.parent) === null || _a === void 0 ? void 0 : _a.isProjectionDirty)) {\n                canSkip = false;\n            }\n            /**\n             * If this is a shared layout animation and this node's shared projection is dirty then\n             * we can't skip.\n             */\n            if (isShared &&\n                (this.isSharedProjectionDirty || this.isTransformDirty)) {\n                canSkip = false;\n            }\n            /**\n             * If we have resolved the target this frame we must recalculate the\n             * projection to ensure it visually represents the internal calculations.\n             */\n            if (this.resolvedRelativeTargetAt === frameData.timestamp) {\n                canSkip = false;\n            }\n            if (canSkip)\n                return;\n            const { layout, layoutId } = this.options;\n            /**\n             * If this section of the tree isn't animating we can\n             * delete our target sources for the following frame.\n             */\n            this.isTreeAnimating = Boolean((this.parent && this.parent.isTreeAnimating) ||\n                this.currentAnimation ||\n                this.pendingAnimation);\n            if (!this.isTreeAnimating) {\n                this.targetDelta = this.relativeTarget = undefined;\n            }\n            if (!this.layout || !(layout || layoutId))\n                return;\n            /**\n             * Reset the corrected box with the latest values from box, as we're then going\n             * to perform mutative operations on it.\n             */\n            copyBoxInto(this.layoutCorrected, this.layout.layoutBox);\n            /**\n             * Record previous tree scales before updating.\n             */\n            const prevTreeScaleX = this.treeScale.x;\n            const prevTreeScaleY = this.treeScale.y;\n            /**\n             * Apply all the parent deltas to this box to produce the corrected box. This\n             * is the layout box, as it will appear on screen as a result of the transforms of its parents.\n             */\n            applyTreeDeltas(this.layoutCorrected, this.treeScale, this.path, isShared);\n            /**\n             * If this layer needs to perform scale correction but doesn't have a target,\n             * use the layout as the target.\n             */\n            if (lead.layout &&\n                !lead.target &&\n                (this.treeScale.x !== 1 || this.treeScale.y !== 1)) {\n                lead.target = lead.layout.layoutBox;\n            }\n            const { target } = lead;\n            if (!target) {\n                /**\n                 * If we don't have a target to project into, but we were previously\n                 * projecting, we want to remove the stored transform and schedule\n                 * a render to ensure the elements reflect the removed transform.\n                 */\n                if (this.projectionTransform) {\n                    this.projectionDelta = createDelta();\n                    this.projectionTransform = \"none\";\n                    this.scheduleRender();\n                }\n                return;\n            }\n            if (!this.projectionDelta) {\n                this.projectionDelta = createDelta();\n                this.projectionDeltaWithTransform = createDelta();\n            }\n            const prevProjectionTransform = this.projectionTransform;\n            /**\n             * Update the delta between the corrected box and the target box before user-set transforms were applied.\n             * This will allow us to calculate the corrected borderRadius and boxShadow to compensate\n             * for our layout reprojection, but still allow them to be scaled correctly by the user.\n             * It might be that to simplify this we may want to accept that user-set scale is also corrected\n             * and we wouldn't have to keep and calc both deltas, OR we could support a user setting\n             * to allow people to choose whether these styles are corrected based on just the\n             * layout reprojection or the final bounding box.\n             */\n            calcBoxDelta(this.projectionDelta, this.layoutCorrected, target, this.latestValues);\n            this.projectionTransform = buildProjectionTransform(this.projectionDelta, this.treeScale);\n            if (this.projectionTransform !== prevProjectionTransform ||\n                this.treeScale.x !== prevTreeScaleX ||\n                this.treeScale.y !== prevTreeScaleY) {\n                this.hasProjected = true;\n                this.scheduleRender();\n                this.notifyListeners(\"projectionUpdate\", target);\n            }\n            /**\n             * Increase debug counter for recalculated projections\n             */\n            projectionFrameData.recalculatedProjection++;\n        }\n        hide() {\n            this.isVisible = false;\n            // TODO: Schedule render\n        }\n        show() {\n            this.isVisible = true;\n            // TODO: Schedule render\n        }\n        scheduleRender(notifyAll = true) {\n            this.options.scheduleRender && this.options.scheduleRender();\n            if (notifyAll) {\n                const stack = this.getStack();\n                stack && stack.scheduleRender();\n            }\n            if (this.resumingFrom && !this.resumingFrom.instance) {\n                this.resumingFrom = undefined;\n            }\n        }\n        setAnimationOrigin(delta, hasOnlyRelativeTargetChanged = false) {\n            const snapshot = this.snapshot;\n            const snapshotLatestValues = snapshot\n                ? snapshot.latestValues\n                : {};\n            const mixedValues = { ...this.latestValues };\n            const targetDelta = createDelta();\n            if (!this.relativeParent ||\n                !this.relativeParent.options.layoutRoot) {\n                this.relativeTarget = this.relativeTargetOrigin = undefined;\n            }\n            this.attemptToResolveRelativeTarget = !hasOnlyRelativeTargetChanged;\n            const relativeLayout = createBox();\n            const snapshotSource = snapshot ? snapshot.source : undefined;\n            const layoutSource = this.layout ? this.layout.source : undefined;\n            const isSharedLayoutAnimation = snapshotSource !== layoutSource;\n            const stack = this.getStack();\n            const isOnlyMember = !stack || stack.members.length <= 1;\n            const shouldCrossfadeOpacity = Boolean(isSharedLayoutAnimation &&\n                !isOnlyMember &&\n                this.options.crossfade === true &&\n                !this.path.some(hasOpacityCrossfade));\n            this.animationProgress = 0;\n            let prevRelativeTarget;\n            this.mixTargetDelta = (latest) => {\n                const progress = latest / 1000;\n                mixAxisDelta(targetDelta.x, delta.x, progress);\n                mixAxisDelta(targetDelta.y, delta.y, progress);\n                this.setTargetDelta(targetDelta);\n                if (this.relativeTarget &&\n                    this.relativeTargetOrigin &&\n                    this.layout &&\n                    this.relativeParent &&\n                    this.relativeParent.layout) {\n                    calcRelativePosition(relativeLayout, this.layout.layoutBox, this.relativeParent.layout.layoutBox);\n                    mixBox(this.relativeTarget, this.relativeTargetOrigin, relativeLayout, progress);\n                    /**\n                     * If this is an unchanged relative target we can consider the\n                     * projection not dirty.\n                     */\n                    if (prevRelativeTarget &&\n                        boxEquals(this.relativeTarget, prevRelativeTarget)) {\n                        this.isProjectionDirty = false;\n                    }\n                    if (!prevRelativeTarget)\n                        prevRelativeTarget = createBox();\n                    copyBoxInto(prevRelativeTarget, this.relativeTarget);\n                }\n                if (isSharedLayoutAnimation) {\n                    this.animationValues = mixedValues;\n                    mixValues(mixedValues, snapshotLatestValues, this.latestValues, progress, shouldCrossfadeOpacity, isOnlyMember);\n                }\n                this.root.scheduleUpdateProjection();\n                this.scheduleRender();\n                this.animationProgress = progress;\n            };\n            this.mixTargetDelta(this.options.layoutRoot ? 1000 : 0);\n        }\n        startAnimation(options) {\n            this.notifyListeners(\"animationStart\");\n            this.currentAnimation && this.currentAnimation.stop();\n            if (this.resumingFrom && this.resumingFrom.currentAnimation) {\n                this.resumingFrom.currentAnimation.stop();\n            }\n            if (this.pendingAnimation) {\n                cancelFrame(this.pendingAnimation);\n                this.pendingAnimation = undefined;\n            }\n            /**\n             * Start the animation in the next frame to have a frame with progress 0,\n             * where the target is the same as when the animation started, so we can\n             * calculate the relative positions correctly for instant transitions.\n             */\n            this.pendingAnimation = frame.update(() => {\n                globalProjectionState.hasAnimatedSinceResize = true;\n                this.currentAnimation = animateSingleValue(0, animationTarget, {\n                    ...options,\n                    onUpdate: (latest) => {\n                        this.mixTargetDelta(latest);\n                        options.onUpdate && options.onUpdate(latest);\n                    },\n                    onComplete: () => {\n                        options.onComplete && options.onComplete();\n                        this.completeAnimation();\n                    },\n                });\n                if (this.resumingFrom) {\n                    this.resumingFrom.currentAnimation = this.currentAnimation;\n                }\n                this.pendingAnimation = undefined;\n            });\n        }\n        completeAnimation() {\n            if (this.resumingFrom) {\n                this.resumingFrom.currentAnimation = undefined;\n                this.resumingFrom.preserveOpacity = undefined;\n            }\n            const stack = this.getStack();\n            stack && stack.exitAnimationComplete();\n            this.resumingFrom =\n                this.currentAnimation =\n                    this.animationValues =\n                        undefined;\n            this.notifyListeners(\"animationComplete\");\n        }\n        finishAnimation() {\n            if (this.currentAnimation) {\n                this.mixTargetDelta && this.mixTargetDelta(animationTarget);\n                this.currentAnimation.stop();\n            }\n            this.completeAnimation();\n        }\n        applyTransformsToTarget() {\n            const lead = this.getLead();\n            let { targetWithTransforms, target, layout, latestValues } = lead;\n            if (!targetWithTransforms || !target || !layout)\n                return;\n            /**\n             * If we're only animating position, and this element isn't the lead element,\n             * then instead of projecting into the lead box we instead want to calculate\n             * a new target that aligns the two boxes but maintains the layout shape.\n             */\n            if (this !== lead &&\n                this.layout &&\n                layout &&\n                shouldAnimatePositionOnly(this.options.animationType, this.layout.layoutBox, layout.layoutBox)) {\n                target = this.target || createBox();\n                const xLength = calcLength(this.layout.layoutBox.x);\n                target.x.min = lead.target.x.min;\n                target.x.max = target.x.min + xLength;\n                const yLength = calcLength(this.layout.layoutBox.y);\n                target.y.min = lead.target.y.min;\n                target.y.max = target.y.min + yLength;\n            }\n            copyBoxInto(targetWithTransforms, target);\n            /**\n             * Apply the latest user-set transforms to the targetBox to produce the targetBoxFinal.\n             * This is the final box that we will then project into by calculating a transform delta and\n             * applying it to the corrected box.\n             */\n            transformBox(targetWithTransforms, latestValues);\n            /**\n             * Update the delta between the corrected box and the final target box, after\n             * user-set transforms are applied to it. This will be used by the renderer to\n             * create a transform style that will reproject the element from its layout layout\n             * into the desired bounding box.\n             */\n            calcBoxDelta(this.projectionDeltaWithTransform, this.layoutCorrected, targetWithTransforms, latestValues);\n        }\n        registerSharedNode(layoutId, node) {\n            if (!this.sharedNodes.has(layoutId)) {\n                this.sharedNodes.set(layoutId, new NodeStack());\n            }\n            const stack = this.sharedNodes.get(layoutId);\n            stack.add(node);\n            const config = node.options.initialPromotionConfig;\n            node.promote({\n                transition: config ? config.transition : undefined,\n                preserveFollowOpacity: config && config.shouldPreserveFollowOpacity\n                    ? config.shouldPreserveFollowOpacity(node)\n                    : undefined,\n            });\n        }\n        isLead() {\n            const stack = this.getStack();\n            return stack ? stack.lead === this : true;\n        }\n        getLead() {\n            var _a;\n            const { layoutId } = this.options;\n            return layoutId ? ((_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.lead) || this : this;\n        }\n        getPrevLead() {\n            var _a;\n            const { layoutId } = this.options;\n            return layoutId ? (_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.prevLead : undefined;\n        }\n        getStack() {\n            const { layoutId } = this.options;\n            if (layoutId)\n                return this.root.sharedNodes.get(layoutId);\n        }\n        promote({ needsReset, transition, preserveFollowOpacity, } = {}) {\n            const stack = this.getStack();\n            if (stack)\n                stack.promote(this, preserveFollowOpacity);\n            if (needsReset) {\n                this.projectionDelta = undefined;\n                this.needsReset = true;\n            }\n            if (transition)\n                this.setOptions({ transition });\n        }\n        relegate() {\n            const stack = this.getStack();\n            if (stack) {\n                return stack.relegate(this);\n            }\n            else {\n                return false;\n            }\n        }\n        resetRotation() {\n            const { visualElement } = this.options;\n            if (!visualElement)\n                return;\n            // If there's no detected rotation values, we can early return without a forced render.\n            let hasRotate = false;\n            /**\n             * An unrolled check for rotation values. Most elements don't have any rotation and\n             * skipping the nested loop and new object creation is 50% faster.\n             */\n            const { latestValues } = visualElement;\n            if (latestValues.rotate ||\n                latestValues.rotateX ||\n                latestValues.rotateY ||\n                latestValues.rotateZ) {\n                hasRotate = true;\n            }\n            // If there's no rotation values, we don't need to do any more.\n            if (!hasRotate)\n                return;\n            const resetValues = {};\n            // Check the rotate value of all axes and reset to 0\n            for (let i = 0; i < transformAxes.length; i++) {\n                const key = \"rotate\" + transformAxes[i];\n                // Record the rotation and then temporarily set it to 0\n                if (latestValues[key]) {\n                    resetValues[key] = latestValues[key];\n                    visualElement.setStaticValue(key, 0);\n                }\n            }\n            // Force a render of this element to apply the transform with all rotations\n            // set to 0.\n            visualElement.render();\n            // Put back all the values we reset\n            for (const key in resetValues) {\n                visualElement.setStaticValue(key, resetValues[key]);\n            }\n            // Schedule a render for the next frame. This ensures we won't visually\n            // see the element with the reset rotate value applied.\n            visualElement.scheduleRender();\n        }\n        getProjectionStyles(styleProp = {}) {\n            var _a, _b;\n            // TODO: Return lifecycle-persistent object\n            const styles = {};\n            if (!this.instance || this.isSVG)\n                return styles;\n            if (!this.isVisible) {\n                return { visibility: \"hidden\" };\n            }\n            else {\n                styles.visibility = \"\";\n            }\n            const transformTemplate = this.getTransformTemplate();\n            if (this.needsReset) {\n                this.needsReset = false;\n                styles.opacity = \"\";\n                styles.pointerEvents =\n                    resolveMotionValue(styleProp.pointerEvents) || \"\";\n                styles.transform = transformTemplate\n                    ? transformTemplate(this.latestValues, \"\")\n                    : \"none\";\n                return styles;\n            }\n            const lead = this.getLead();\n            if (!this.projectionDelta || !this.layout || !lead.target) {\n                const emptyStyles = {};\n                if (this.options.layoutId) {\n                    emptyStyles.opacity =\n                        this.latestValues.opacity !== undefined\n                            ? this.latestValues.opacity\n                            : 1;\n                    emptyStyles.pointerEvents =\n                        resolveMotionValue(styleProp.pointerEvents) || \"\";\n                }\n                if (this.hasProjected && !hasTransform(this.latestValues)) {\n                    emptyStyles.transform = transformTemplate\n                        ? transformTemplate({}, \"\")\n                        : \"none\";\n                    this.hasProjected = false;\n                }\n                return emptyStyles;\n            }\n            const valuesToRender = lead.animationValues || lead.latestValues;\n            this.applyTransformsToTarget();\n            styles.transform = buildProjectionTransform(this.projectionDeltaWithTransform, this.treeScale, valuesToRender);\n            if (transformTemplate) {\n                styles.transform = transformTemplate(valuesToRender, styles.transform);\n            }\n            const { x, y } = this.projectionDelta;\n            styles.transformOrigin = `${x.origin * 100}% ${y.origin * 100}% 0`;\n            if (lead.animationValues) {\n                /**\n                 * If the lead component is animating, assign this either the entering/leaving\n                 * opacity\n                 */\n                styles.opacity =\n                    lead === this\n                        ? (_b = (_a = valuesToRender.opacity) !== null && _a !== void 0 ? _a : this.latestValues.opacity) !== null && _b !== void 0 ? _b : 1\n                        : this.preserveOpacity\n                            ? this.latestValues.opacity\n                            : valuesToRender.opacityExit;\n            }\n            else {\n                /**\n                 * Or we're not animating at all, set the lead component to its layout\n                 * opacity and other components to hidden.\n                 */\n                styles.opacity =\n                    lead === this\n                        ? valuesToRender.opacity !== undefined\n                            ? valuesToRender.opacity\n                            : \"\"\n                        : valuesToRender.opacityExit !== undefined\n                            ? valuesToRender.opacityExit\n                            : 0;\n            }\n            /**\n             * Apply scale correction\n             */\n            for (const key in scaleCorrectors) {\n                if (valuesToRender[key] === undefined)\n                    continue;\n                const { correct, applyTo } = scaleCorrectors[key];\n                /**\n                 * Only apply scale correction to the value if we have an\n                 * active projection transform. Otherwise these values become\n                 * vulnerable to distortion if the element changes size without\n                 * a corresponding layout animation.\n                 */\n                const corrected = styles.transform === \"none\"\n                    ? valuesToRender[key]\n                    : correct(valuesToRender[key], lead);\n                if (applyTo) {\n                    const num = applyTo.length;\n                    for (let i = 0; i < num; i++) {\n                        styles[applyTo[i]] = corrected;\n                    }\n                }\n                else {\n                    styles[key] = corrected;\n                }\n            }\n            /**\n             * Disable pointer events on follow components. This is to ensure\n             * that if a follow component covers a lead component it doesn't block\n             * pointer events on the lead.\n             */\n            if (this.options.layoutId) {\n                styles.pointerEvents =\n                    lead === this\n                        ? resolveMotionValue(styleProp.pointerEvents) || \"\"\n                        : \"none\";\n            }\n            return styles;\n        }\n        clearSnapshot() {\n            this.resumeFrom = this.snapshot = undefined;\n        }\n        // Only run on root\n        resetTree() {\n            this.root.nodes.forEach((node) => { var _a; return (_a = node.currentAnimation) === null || _a === void 0 ? void 0 : _a.stop(); });\n            this.root.nodes.forEach(clearMeasurements);\n            this.root.sharedNodes.clear();\n        }\n    };\n}\nfunction updateLayout(node) {\n    node.updateLayout();\n}\nfunction notifyLayoutUpdate(node) {\n    var _a;\n    const snapshot = ((_a = node.resumeFrom) === null || _a === void 0 ? void 0 : _a.snapshot) || node.snapshot;\n    if (node.isLead() &&\n        node.layout &&\n        snapshot &&\n        node.hasListeners(\"didUpdate\")) {\n        const { layoutBox: layout, measuredBox: measuredLayout } = node.layout;\n        const { animationType } = node.options;\n        const isShared = snapshot.source !== node.layout.source;\n        // TODO Maybe we want to also resize the layout snapshot so we don't trigger\n        // animations for instance if layout=\"size\" and an element has only changed position\n        if (animationType === \"size\") {\n            eachAxis((axis) => {\n                const axisSnapshot = isShared\n                    ? snapshot.measuredBox[axis]\n                    : snapshot.layoutBox[axis];\n                const length = calcLength(axisSnapshot);\n                axisSnapshot.min = layout[axis].min;\n                axisSnapshot.max = axisSnapshot.min + length;\n            });\n        }\n        else if (shouldAnimatePositionOnly(animationType, snapshot.layoutBox, layout)) {\n            eachAxis((axis) => {\n                const axisSnapshot = isShared\n                    ? snapshot.measuredBox[axis]\n                    : snapshot.layoutBox[axis];\n                const length = calcLength(layout[axis]);\n                axisSnapshot.max = axisSnapshot.min + length;\n                /**\n                 * Ensure relative target gets resized and rerendererd\n                 */\n                if (node.relativeTarget && !node.currentAnimation) {\n                    node.isProjectionDirty = true;\n                    node.relativeTarget[axis].max =\n                        node.relativeTarget[axis].min + length;\n                }\n            });\n        }\n        const layoutDelta = createDelta();\n        calcBoxDelta(layoutDelta, layout, snapshot.layoutBox);\n        const visualDelta = createDelta();\n        if (isShared) {\n            calcBoxDelta(visualDelta, node.applyTransform(measuredLayout, true), snapshot.measuredBox);\n        }\n        else {\n            calcBoxDelta(visualDelta, layout, snapshot.layoutBox);\n        }\n        const hasLayoutChanged = !isDeltaZero(layoutDelta);\n        let hasRelativeTargetChanged = false;\n        if (!node.resumeFrom) {\n            const relativeParent = node.getClosestProjectingParent();\n            /**\n             * If the relativeParent is itself resuming from a different element then\n             * the relative snapshot is not relavent\n             */\n            if (relativeParent && !relativeParent.resumeFrom) {\n                const { snapshot: parentSnapshot, layout: parentLayout } = relativeParent;\n                if (parentSnapshot && parentLayout) {\n                    const relativeSnapshot = createBox();\n                    calcRelativePosition(relativeSnapshot, snapshot.layoutBox, parentSnapshot.layoutBox);\n                    const relativeLayout = createBox();\n                    calcRelativePosition(relativeLayout, layout, parentLayout.layoutBox);\n                    if (!boxEqualsRounded(relativeSnapshot, relativeLayout)) {\n                        hasRelativeTargetChanged = true;\n                    }\n                    if (relativeParent.options.layoutRoot) {\n                        node.relativeTarget = relativeLayout;\n                        node.relativeTargetOrigin = relativeSnapshot;\n                        node.relativeParent = relativeParent;\n                    }\n                }\n            }\n        }\n        node.notifyListeners(\"didUpdate\", {\n            layout,\n            snapshot,\n            delta: visualDelta,\n            layoutDelta,\n            hasLayoutChanged,\n            hasRelativeTargetChanged,\n        });\n    }\n    else if (node.isLead()) {\n        const { onExitComplete } = node.options;\n        onExitComplete && onExitComplete();\n    }\n    /**\n     * Clearing transition\n     * TODO: Investigate why this transition is being passed in as {type: false } from Framer\n     * and why we need it at all\n     */\n    node.options.transition = undefined;\n}\nfunction propagateDirtyNodes(node) {\n    /**\n     * Increase debug counter for nodes encountered this frame\n     */\n    projectionFrameData.totalNodes++;\n    if (!node.parent)\n        return;\n    /**\n     * If this node isn't projecting, propagate isProjectionDirty. It will have\n     * no performance impact but it will allow the next child that *is* projecting\n     * but *isn't* dirty to just check its parent to see if *any* ancestor needs\n     * correcting.\n     */\n    if (!node.isProjecting()) {\n        node.isProjectionDirty = node.parent.isProjectionDirty;\n    }\n    /**\n     * Propagate isSharedProjectionDirty and isTransformDirty\n     * throughout the whole tree. A future revision can take another look at\n     * this but for safety we still recalcualte shared nodes.\n     */\n    node.isSharedProjectionDirty || (node.isSharedProjectionDirty = Boolean(node.isProjectionDirty ||\n        node.parent.isProjectionDirty ||\n        node.parent.isSharedProjectionDirty));\n    node.isTransformDirty || (node.isTransformDirty = node.parent.isTransformDirty);\n}\nfunction cleanDirtyNodes(node) {\n    node.isProjectionDirty =\n        node.isSharedProjectionDirty =\n            node.isTransformDirty =\n                false;\n}\nfunction clearSnapshot(node) {\n    node.clearSnapshot();\n}\nfunction clearMeasurements(node) {\n    node.clearMeasurements();\n}\nfunction clearIsLayoutDirty(node) {\n    node.isLayoutDirty = false;\n}\nfunction resetTransformStyle(node) {\n    const { visualElement } = node.options;\n    if (visualElement && visualElement.getProps().onBeforeLayoutMeasure) {\n        visualElement.notify(\"BeforeLayoutMeasure\");\n    }\n    node.resetTransform();\n}\nfunction finishAnimation(node) {\n    node.finishAnimation();\n    node.targetDelta = node.relativeTarget = node.target = undefined;\n    node.isProjectionDirty = true;\n}\nfunction resolveTargetDelta(node) {\n    node.resolveTargetDelta();\n}\nfunction calcProjection(node) {\n    node.calcProjection();\n}\nfunction resetRotation(node) {\n    node.resetRotation();\n}\nfunction removeLeadSnapshots(stack) {\n    stack.removeLeadSnapshot();\n}\nfunction mixAxisDelta(output, delta, p) {\n    output.translate = mix(delta.translate, 0, p);\n    output.scale = mix(delta.scale, 1, p);\n    output.origin = delta.origin;\n    output.originPoint = delta.originPoint;\n}\nfunction mixAxis(output, from, to, p) {\n    output.min = mix(from.min, to.min, p);\n    output.max = mix(from.max, to.max, p);\n}\nfunction mixBox(output, from, to, p) {\n    mixAxis(output.x, from.x, to.x, p);\n    mixAxis(output.y, from.y, to.y, p);\n}\nfunction hasOpacityCrossfade(node) {\n    return (node.animationValues && node.animationValues.opacityExit !== undefined);\n}\nconst defaultLayoutTransition = {\n    duration: 0.45,\n    ease: [0.4, 0, 0.1, 1],\n};\nconst userAgentContains = (string) => typeof navigator !== \"undefined\" &&\n    navigator.userAgent.toLowerCase().includes(string);\n/**\n * Measured bounding boxes must be rounded in Safari and\n * left untouched in Chrome, otherwise non-integer layouts within scaled-up elements\n * can appear to jump.\n */\nconst roundPoint = userAgentContains(\"applewebkit/\") && !userAgentContains(\"chrome/\")\n    ? Math.round\n    : noop;\nfunction roundAxis(axis) {\n    // Round to the nearest .5 pixels to support subpixel layouts\n    axis.min = roundPoint(axis.min);\n    axis.max = roundPoint(axis.max);\n}\nfunction roundBox(box) {\n    roundAxis(box.x);\n    roundAxis(box.y);\n}\nfunction shouldAnimatePositionOnly(animationType, snapshot, layout) {\n    return (animationType === \"position\" ||\n        (animationType === \"preserve-aspect\" &&\n            !isNear(aspectRatio(snapshot), aspectRatio(layout), 0.2)));\n}\n\nexport { cleanDirtyNodes, createProjectionNode, mixAxis, mixAxisDelta, mixBox, propagateDirtyNodes };\n","function record(data) {\n    if (window.MotionDebug) {\n        window.MotionDebug.record(data);\n    }\n}\n\nexport { record };\n","function isSVGElement(element) {\n    return element instanceof SVGElement && element.tagName !== \"svg\";\n}\n\nexport { isSVGElement };\n","import { frame, cancelFrame } from '../frameloop/frame.mjs';\n\n/**\n * Timeout defined in ms\n */\nfunction delay(callback, timeout) {\n    const start = performance.now();\n    const checkElapsed = ({ timestamp }) => {\n        const elapsed = timestamp - start;\n        if (elapsed >= timeout) {\n            cancelFrame(checkElapsed);\n            callback(elapsed - timeout);\n        }\n    };\n    frame.read(checkElapsed, true);\n    return () => cancelFrame(checkElapsed);\n}\n\nexport { delay };\n","import { animateMotionValue } from './motion-value.mjs';\nimport { motionValue } from '../../value/index.mjs';\nimport { isMotionValue } from '../../value/utils/is-motion-value.mjs';\n\nfunction animateSingleValue(value, keyframes, options) {\n    const motionValue$1 = isMotionValue(value) ? value : motionValue(value);\n    motionValue$1.start(animateMotionValue(\"\", motionValue$1, keyframes, options));\n    return motionValue$1.animation;\n}\n\nexport { animateSingleValue };\n","import { createProjectionNode } from './create-projection-node.mjs';\nimport { addDomEvent } from '../../events/add-dom-event.mjs';\n\nconst DocumentProjectionNode = createProjectionNode({\n    attachResizeListener: (ref, notify) => addDomEvent(ref, \"resize\", notify),\n    measureScroll: () => ({\n        x: document.documentElement.scrollLeft || document.body.scrollLeft,\n        y: document.documentElement.scrollTop || document.body.scrollTop,\n    }),\n    checkIsScrollRoot: () => true,\n});\n\nexport { DocumentProjectionNode };\n","import { createProjectionNode } from './create-projection-node.mjs';\nimport { DocumentProjectionNode } from './DocumentProjectionNode.mjs';\n\nconst rootProjectionNode = {\n    current: undefined,\n};\nconst HTMLProjectionNode = createProjectionNode({\n    measureScroll: (instance) => ({\n        x: instance.scrollLeft,\n        y: instance.scrollTop,\n    }),\n    defaultParent: () => {\n        if (!rootProjectionNode.current) {\n            const documentNode = new DocumentProjectionNode({});\n            documentNode.mount(window);\n            documentNode.setOptions({ layoutScroll: true });\n            rootProjectionNode.current = documentNode;\n        }\n        return rootProjectionNode.current;\n    },\n    resetTransform: (instance, value) => {\n        instance.style.transform = value !== undefined ? value : \"none\";\n    },\n    checkIsScrollRoot: (instance) => Boolean(window.getComputedStyle(instance).position === \"fixed\"),\n});\n\nexport { HTMLProjectionNode, rootProjectionNode };\n","import { DragGesture } from '../../gestures/drag/index.mjs';\nimport { PanGesture } from '../../gestures/pan/index.mjs';\nimport { MeasureLayout } from './layout/MeasureLayout.mjs';\nimport { HTMLProjectionNode } from '../../projection/node/HTMLProjectionNode.mjs';\n\nconst drag = {\n    pan: {\n        Feature: PanGesture,\n    },\n    drag: {\n        Feature: DragGesture,\n        ProjectionNode: HTMLProjectionNode,\n        MeasureLayout,\n    },\n};\n\nexport { drag };\n","import { HTMLProjectionNode } from '../../projection/node/HTMLProjectionNode.mjs';\nimport { MeasureLayout } from './layout/MeasureLayout.mjs';\n\nconst layout = {\n    layout: {\n        ProjectionNode: HTMLProjectionNode,\n        MeasureLayout,\n    },\n};\n\nexport { layout };\n","function shallowCompare(next, prev) {\n    if (!Array.isArray(prev))\n        return false;\n    const prevLength = prev.length;\n    if (prevLength !== next.length)\n        return false;\n    for (let i = 0; i < prevLength; i++) {\n        if (prev[i] !== next[i])\n            return false;\n    }\n    return true;\n}\n\nexport { shallowCompare };\n","import { isAnimationControls } from '../../animation/utils/is-animation-controls.mjs';\nimport { isKeyframesTarget } from '../../animation/utils/is-keyframes-target.mjs';\nimport { shallowCompare } from '../../utils/shallow-compare.mjs';\nimport { isVariantLabel } from './is-variant-label.mjs';\nimport { resolveVariant } from './resolve-dynamic-variants.mjs';\nimport { variantPriorityOrder } from './variant-props.mjs';\nimport { animateVisualElement } from '../../animation/interfaces/visual-element.mjs';\n\nconst reversePriorityOrder = [...variantPriorityOrder].reverse();\nconst numAnimationTypes = variantPriorityOrder.length;\nfunction animateList(visualElement) {\n    return (animations) => Promise.all(animations.map(({ animation, options }) => animateVisualElement(visualElement, animation, options)));\n}\nfunction createAnimationState(visualElement) {\n    let animate = animateList(visualElement);\n    const state = createState();\n    let isInitialRender = true;\n    /**\n     * This function will be used to reduce the animation definitions for\n     * each active animation type into an object of resolved values for it.\n     */\n    const buildResolvedTypeValues = (acc, definition) => {\n        const resolved = resolveVariant(visualElement, definition);\n        if (resolved) {\n            const { transition, transitionEnd, ...target } = resolved;\n            acc = { ...acc, ...target, ...transitionEnd };\n        }\n        return acc;\n    };\n    /**\n     * This just allows us to inject mocked animation functions\n     * @internal\n     */\n    function setAnimateFunction(makeAnimator) {\n        animate = makeAnimator(visualElement);\n    }\n    /**\n     * When we receive new props, we need to:\n     * 1. Create a list of protected keys for each type. This is a directory of\n     *    value keys that are currently being \"handled\" by types of a higher priority\n     *    so that whenever an animation is played of a given type, these values are\n     *    protected from being animated.\n     * 2. Determine if an animation type needs animating.\n     * 3. Determine if any values have been removed from a type and figure out\n     *    what to animate those to.\n     */\n    function animateChanges(options, changedActiveType) {\n        const props = visualElement.getProps();\n        const context = visualElement.getVariantContext(true) || {};\n        /**\n         * A list of animations that we'll build into as we iterate through the animation\n         * types. This will get executed at the end of the function.\n         */\n        const animations = [];\n        /**\n         * Keep track of which values have been removed. Then, as we hit lower priority\n         * animation types, we can check if they contain removed values and animate to that.\n         */\n        const removedKeys = new Set();\n        /**\n         * A dictionary of all encountered keys. This is an object to let us build into and\n         * copy it without iteration. Each time we hit an animation type we set its protected\n         * keys - the keys its not allowed to animate - to the latest version of this object.\n         */\n        let encounteredKeys = {};\n        /**\n         * If a variant has been removed at a given index, and this component is controlling\n         * variant animations, we want to ensure lower-priority variants are forced to animate.\n         */\n        let removedVariantIndex = Infinity;\n        /**\n         * Iterate through all animation types in reverse priority order. For each, we want to\n         * detect which values it's handling and whether or not they've changed (and therefore\n         * need to be animated). If any values have been removed, we want to detect those in\n         * lower priority props and flag for animation.\n         */\n        for (let i = 0; i < numAnimationTypes; i++) {\n            const type = reversePriorityOrder[i];\n            const typeState = state[type];\n            const prop = props[type] !== undefined ? props[type] : context[type];\n            const propIsVariant = isVariantLabel(prop);\n            /**\n             * If this type has *just* changed isActive status, set activeDelta\n             * to that status. Otherwise set to null.\n             */\n            const activeDelta = type === changedActiveType ? typeState.isActive : null;\n            if (activeDelta === false)\n                removedVariantIndex = i;\n            /**\n             * If this prop is an inherited variant, rather than been set directly on the\n             * component itself, we want to make sure we allow the parent to trigger animations.\n             *\n             * TODO: Can probably change this to a !isControllingVariants check\n             */\n            let isInherited = prop === context[type] && prop !== props[type] && propIsVariant;\n            /**\n             *\n             */\n            if (isInherited &&\n                isInitialRender &&\n                visualElement.manuallyAnimateOnMount) {\n                isInherited = false;\n            }\n            /**\n             * Set all encountered keys so far as the protected keys for this type. This will\n             * be any key that has been animated or otherwise handled by active, higher-priortiy types.\n             */\n            typeState.protectedKeys = { ...encounteredKeys };\n            // Check if we can skip analysing this prop early\n            if (\n            // If it isn't active and hasn't *just* been set as inactive\n            (!typeState.isActive && activeDelta === null) ||\n                // If we didn't and don't have any defined prop for this animation type\n                (!prop && !typeState.prevProp) ||\n                // Or if the prop doesn't define an animation\n                isAnimationControls(prop) ||\n                typeof prop === \"boolean\") {\n                continue;\n            }\n            /**\n             * As we go look through the values defined on this type, if we detect\n             * a changed value or a value that was removed in a higher priority, we set\n             * this to true and add this prop to the animation list.\n             */\n            const variantDidChange = checkVariantsDidChange(typeState.prevProp, prop);\n            let shouldAnimateType = variantDidChange ||\n                // If we're making this variant active, we want to always make it active\n                (type === changedActiveType &&\n                    typeState.isActive &&\n                    !isInherited &&\n                    propIsVariant) ||\n                // If we removed a higher-priority variant (i is in reverse order)\n                (i > removedVariantIndex && propIsVariant);\n            /**\n             * As animations can be set as variant lists, variants or target objects, we\n             * coerce everything to an array if it isn't one already\n             */\n            const definitionList = Array.isArray(prop) ? prop : [prop];\n            /**\n             * Build an object of all the resolved values. We'll use this in the subsequent\n             * animateChanges calls to determine whether a value has changed.\n             */\n            let resolvedValues = definitionList.reduce(buildResolvedTypeValues, {});\n            if (activeDelta === false)\n                resolvedValues = {};\n            /**\n             * Now we need to loop through all the keys in the prev prop and this prop,\n             * and decide:\n             * 1. If the value has changed, and needs animating\n             * 2. If it has been removed, and needs adding to the removedKeys set\n             * 3. If it has been removed in a higher priority type and needs animating\n             * 4. If it hasn't been removed in a higher priority but hasn't changed, and\n             *    needs adding to the type's protectedKeys list.\n             */\n            const { prevResolvedValues = {} } = typeState;\n            const allKeys = {\n                ...prevResolvedValues,\n                ...resolvedValues,\n            };\n            const markToAnimate = (key) => {\n                shouldAnimateType = true;\n                removedKeys.delete(key);\n                typeState.needsAnimating[key] = true;\n            };\n            for (const key in allKeys) {\n                const next = resolvedValues[key];\n                const prev = prevResolvedValues[key];\n                // If we've already handled this we can just skip ahead\n                if (encounteredKeys.hasOwnProperty(key))\n                    continue;\n                /**\n                 * If the value has changed, we probably want to animate it.\n                 */\n                if (next !== prev) {\n                    /**\n                     * If both values are keyframes, we need to shallow compare them to\n                     * detect whether any value has changed. If it has, we animate it.\n                     */\n                    if (isKeyframesTarget(next) && isKeyframesTarget(prev)) {\n                        if (!shallowCompare(next, prev) || variantDidChange) {\n                            markToAnimate(key);\n                        }\n                        else {\n                            /**\n                             * If it hasn't changed, we want to ensure it doesn't animate by\n                             * adding it to the list of protected keys.\n                             */\n                            typeState.protectedKeys[key] = true;\n                        }\n                    }\n                    else if (next !== undefined) {\n                        // If next is defined and doesn't equal prev, it needs animating\n                        markToAnimate(key);\n                    }\n                    else {\n                        // If it's undefined, it's been removed.\n                        removedKeys.add(key);\n                    }\n                }\n                else if (next !== undefined && removedKeys.has(key)) {\n                    /**\n                     * If next hasn't changed and it isn't undefined, we want to check if it's\n                     * been removed by a higher priority\n                     */\n                    markToAnimate(key);\n                }\n                else {\n                    /**\n                     * If it hasn't changed, we add it to the list of protected values\n                     * to ensure it doesn't get animated.\n                     */\n                    typeState.protectedKeys[key] = true;\n                }\n            }\n            /**\n             * Update the typeState so next time animateChanges is called we can compare the\n             * latest prop and resolvedValues to these.\n             */\n            typeState.prevProp = prop;\n            typeState.prevResolvedValues = resolvedValues;\n            /**\n             *\n             */\n            if (typeState.isActive) {\n                encounteredKeys = { ...encounteredKeys, ...resolvedValues };\n            }\n            if (isInitialRender && visualElement.blockInitialAnimation) {\n                shouldAnimateType = false;\n            }\n            /**\n             * If this is an inherited prop we want to hard-block animations\n             * TODO: Test as this should probably still handle animations triggered\n             * by removed values?\n             */\n            if (shouldAnimateType && !isInherited) {\n                animations.push(...definitionList.map((animation) => ({\n                    animation: animation,\n                    options: { type, ...options },\n                })));\n            }\n        }\n        /**\n         * If there are some removed value that haven't been dealt with,\n         * we need to create a new animation that falls back either to the value\n         * defined in the style prop, or the last read value.\n         */\n        if (removedKeys.size) {\n            const fallbackAnimation = {};\n            removedKeys.forEach((key) => {\n                const fallbackTarget = visualElement.getBaseTarget(key);\n                if (fallbackTarget !== undefined) {\n                    fallbackAnimation[key] = fallbackTarget;\n                }\n            });\n            animations.push({ animation: fallbackAnimation });\n        }\n        let shouldAnimate = Boolean(animations.length);\n        if (isInitialRender &&\n            props.initial === false &&\n            !visualElement.manuallyAnimateOnMount) {\n            shouldAnimate = false;\n        }\n        isInitialRender = false;\n        return shouldAnimate ? animate(animations) : Promise.resolve();\n    }\n    /**\n     * Change whether a certain animation type is active.\n     */\n    function setActive(type, isActive, options) {\n        var _a;\n        // If the active state hasn't changed, we can safely do nothing here\n        if (state[type].isActive === isActive)\n            return Promise.resolve();\n        // Propagate active change to children\n        (_a = visualElement.variantChildren) === null || _a === void 0 ? void 0 : _a.forEach((child) => { var _a; return (_a = child.animationState) === null || _a === void 0 ? void 0 : _a.setActive(type, isActive); });\n        state[type].isActive = isActive;\n        const animations = animateChanges(options, type);\n        for (const key in state) {\n            state[key].protectedKeys = {};\n        }\n        return animations;\n    }\n    return {\n        animateChanges,\n        setActive,\n        setAnimateFunction,\n        getState: () => state,\n    };\n}\nfunction checkVariantsDidChange(prev, next) {\n    if (typeof next === \"string\") {\n        return next !== prev;\n    }\n    else if (Array.isArray(next)) {\n        return !shallowCompare(next, prev);\n    }\n    return false;\n}\nfunction createTypeState(isActive = false) {\n    return {\n        isActive,\n        protectedKeys: {},\n        needsAnimating: {},\n        prevResolvedValues: {},\n    };\n}\nfunction createState() {\n    return {\n        animate: createTypeState(true),\n        whileInView: createTypeState(),\n        whileHover: createTypeState(),\n        whileTap: createTypeState(),\n        whileDrag: createTypeState(),\n        whileFocus: createTypeState(),\n        exit: createTypeState(),\n    };\n}\n\nexport { checkVariantsDidChange, createAnimationState };\n","import { isAnimationControls } from '../../../animation/utils/is-animation-controls.mjs';\nimport { createAnimationState } from '../../../render/utils/animation-state.mjs';\nimport { Feature } from '../Feature.mjs';\n\nclass AnimationFeature extends Feature {\n    /**\n     * We dynamically generate the AnimationState manager as it contains a reference\n     * to the underlying animation library. We only want to load that if we load this,\n     * so people can optionally code split it out using the `m` component.\n     */\n    constructor(node) {\n        super(node);\n        node.animationState || (node.animationState = createAnimationState(node));\n    }\n    updateAnimationControlsSubscription() {\n        const { animate } = this.node.getProps();\n        this.unmount();\n        if (isAnimationControls(animate)) {\n            this.unmount = animate.subscribe(this.node);\n        }\n    }\n    /**\n     * Subscribe any provided AnimationControls to the component's VisualElement\n     */\n    mount() {\n        this.updateAnimationControlsSubscription();\n    }\n    update() {\n        const { animate } = this.node.getProps();\n        const { animate: prevAnimate } = this.node.prevProps || {};\n        if (animate !== prevAnimate) {\n            this.updateAnimationControlsSubscription();\n        }\n    }\n    unmount() { }\n}\n\nexport { AnimationFeature };\n","import { Feature } from '../Feature.mjs';\n\nlet id = 0;\nclass ExitAnimationFeature extends Feature {\n    constructor() {\n        super(...arguments);\n        this.id = id++;\n    }\n    update() {\n        if (!this.node.presenceContext)\n            return;\n        const { isPresent, onExitComplete, custom } = this.node.presenceContext;\n        const { isPresent: prevIsPresent } = this.node.prevPresenceContext || {};\n        if (!this.node.animationState || isPresent === prevIsPresent) {\n            return;\n        }\n        const exitAnimation = this.node.animationState.setActive(\"exit\", !isPresent, { custom: custom !== null && custom !== void 0 ? custom : this.node.getProps().custom });\n        if (onExitComplete && !isPresent) {\n            exitAnimation.then(() => onExitComplete(this.id));\n        }\n    }\n    mount() {\n        const { register } = this.node.presenceContext || {};\n        if (register) {\n            this.unmount = register(this.id);\n        }\n    }\n    unmount() { }\n}\n\nexport { ExitAnimationFeature };\n","import { AnimationFeature } from './animation/index.mjs';\nimport { ExitAnimationFeature } from './animation/exit.mjs';\n\nconst animations = {\n    animation: {\n        Feature: AnimationFeature,\n    },\n    exit: {\n        Feature: ExitAnimationFeature,\n    },\n};\n\nexport { animations };\n","import { addPointerEvent } from '../events/add-pointer-event.mjs';\nimport { pipe } from '../utils/pipe.mjs';\nimport { isDragActive } from './drag/utils/lock.mjs';\nimport { Feature } from '../motion/features/Feature.mjs';\nimport { frame } from '../frameloop/frame.mjs';\n\nfunction addHoverEvent(node, isActive) {\n    const eventName = \"pointer\" + (isActive ? \"enter\" : \"leave\");\n    const callbackName = \"onHover\" + (isActive ? \"Start\" : \"End\");\n    const handleEvent = (event, info) => {\n        if (event.type === \"touch\" || isDragActive())\n            return;\n        const props = node.getProps();\n        if (node.animationState && props.whileHover) {\n            node.animationState.setActive(\"whileHover\", isActive);\n        }\n        if (props[callbackName]) {\n            frame.update(() => props[callbackName](event, info));\n        }\n    };\n    return addPointerEvent(node.current, eventName, handleEvent, {\n        passive: !node.getProps()[callbackName],\n    });\n}\nclass HoverGesture extends Feature {\n    mount() {\n        this.unmount = pipe(addHoverEvent(this.node, true), addHoverEvent(this.node, false));\n    }\n    unmount() { }\n}\n\nexport { HoverGesture };\n","import { addDomEvent } from '../events/add-dom-event.mjs';\nimport { Feature } from '../motion/features/Feature.mjs';\nimport { pipe } from '../utils/pipe.mjs';\n\nclass FocusGesture extends Feature {\n    constructor() {\n        super(...arguments);\n        this.isActive = false;\n    }\n    onFocus() {\n        let isFocusVisible = false;\n        /**\n         * If this element doesn't match focus-visible then don't\n         * apply whileHover. But, if matches throws that focus-visible\n         * is not a valid selector then in that browser outline styles will be applied\n         * to the element by default and we want to match that behaviour with whileFocus.\n         */\n        try {\n            isFocusVisible = this.node.current.matches(\":focus-visible\");\n        }\n        catch (e) {\n            isFocusVisible = true;\n        }\n        if (!isFocusVisible || !this.node.animationState)\n            return;\n        this.node.animationState.setActive(\"whileFocus\", true);\n        this.isActive = true;\n    }\n    onBlur() {\n        if (!this.isActive || !this.node.animationState)\n            return;\n        this.node.animationState.setActive(\"whileFocus\", false);\n        this.isActive = false;\n    }\n    mount() {\n        this.unmount = pipe(addDomEvent(this.node.current, \"focus\", () => this.onFocus()), addDomEvent(this.node.current, \"blur\", () => this.onBlur()));\n    }\n    unmount() { }\n}\n\nexport { FocusGesture };\n","/**\n * Recursively traverse up the tree to check whether the provided child node\n * is the parent or a descendant of it.\n *\n * @param parent - Element to find\n * @param child - Element to test against parent\n */\nconst isNodeOrChild = (parent, child) => {\n    if (!child) {\n        return false;\n    }\n    else if (parent === child) {\n        return true;\n    }\n    else {\n        return isNodeOrChild(parent, child.parentElement);\n    }\n};\n\nexport { isNodeOrChild };\n","import { extractEventInfo } from '../events/event-info.mjs';\nimport { addDomEvent } from '../events/add-dom-event.mjs';\nimport { addPointerEvent } from '../events/add-pointer-event.mjs';\nimport { Feature } from '../motion/features/Feature.mjs';\nimport { pipe } from '../utils/pipe.mjs';\nimport { isDragActive } from './drag/utils/lock.mjs';\nimport { isNodeOrChild } from './utils/is-node-or-child.mjs';\nimport { noop } from '../utils/noop.mjs';\nimport { frame } from '../frameloop/frame.mjs';\n\nfunction fireSyntheticPointerEvent(name, handler) {\n    if (!handler)\n        return;\n    const syntheticPointerEvent = new PointerEvent(\"pointer\" + name);\n    handler(syntheticPointerEvent, extractEventInfo(syntheticPointerEvent));\n}\nclass PressGesture extends Feature {\n    constructor() {\n        super(...arguments);\n        this.removeStartListeners = noop;\n        this.removeEndListeners = noop;\n        this.removeAccessibleListeners = noop;\n        this.startPointerPress = (startEvent, startInfo) => {\n            this.removeEndListeners();\n            if (this.isPressing)\n                return;\n            const props = this.node.getProps();\n            const endPointerPress = (endEvent, endInfo) => {\n                if (!this.checkPressEnd())\n                    return;\n                const { onTap, onTapCancel } = this.node.getProps();\n                frame.update(() => {\n                    /**\n                     * We only count this as a tap gesture if the event.target is the same\n                     * as, or a child of, this component's element\n                     */\n                    !isNodeOrChild(this.node.current, endEvent.target)\n                        ? onTapCancel && onTapCancel(endEvent, endInfo)\n                        : onTap && onTap(endEvent, endInfo);\n                });\n            };\n            const removePointerUpListener = addPointerEvent(window, \"pointerup\", endPointerPress, { passive: !(props.onTap || props[\"onPointerUp\"]) });\n            const removePointerCancelListener = addPointerEvent(window, \"pointercancel\", (cancelEvent, cancelInfo) => this.cancelPress(cancelEvent, cancelInfo), { passive: !(props.onTapCancel || props[\"onPointerCancel\"]) });\n            this.removeEndListeners = pipe(removePointerUpListener, removePointerCancelListener);\n            this.startPress(startEvent, startInfo);\n        };\n        this.startAccessiblePress = () => {\n            const handleKeydown = (keydownEvent) => {\n                if (keydownEvent.key !== \"Enter\" || this.isPressing)\n                    return;\n                const handleKeyup = (keyupEvent) => {\n                    if (keyupEvent.key !== \"Enter\" || !this.checkPressEnd())\n                        return;\n                    fireSyntheticPointerEvent(\"up\", (event, info) => {\n                        const { onTap } = this.node.getProps();\n                        if (onTap) {\n                            frame.update(() => onTap(event, info));\n                        }\n                    });\n                };\n                this.removeEndListeners();\n                this.removeEndListeners = addDomEvent(this.node.current, \"keyup\", handleKeyup);\n                fireSyntheticPointerEvent(\"down\", (event, info) => {\n                    this.startPress(event, info);\n                });\n            };\n            const removeKeydownListener = addDomEvent(this.node.current, \"keydown\", handleKeydown);\n            const handleBlur = () => {\n                if (!this.isPressing)\n                    return;\n                fireSyntheticPointerEvent(\"cancel\", (cancelEvent, cancelInfo) => this.cancelPress(cancelEvent, cancelInfo));\n            };\n            const removeBlurListener = addDomEvent(this.node.current, \"blur\", handleBlur);\n            this.removeAccessibleListeners = pipe(removeKeydownListener, removeBlurListener);\n        };\n    }\n    startPress(event, info) {\n        this.isPressing = true;\n        const { onTapStart, whileTap } = this.node.getProps();\n        /**\n         * Ensure we trigger animations before firing event callback\n         */\n        if (whileTap && this.node.animationState) {\n            this.node.animationState.setActive(\"whileTap\", true);\n        }\n        if (onTapStart) {\n            frame.update(() => onTapStart(event, info));\n        }\n    }\n    checkPressEnd() {\n        this.removeEndListeners();\n        this.isPressing = false;\n        const props = this.node.getProps();\n        if (props.whileTap && this.node.animationState) {\n            this.node.animationState.setActive(\"whileTap\", false);\n        }\n        return !isDragActive();\n    }\n    cancelPress(event, info) {\n        if (!this.checkPressEnd())\n            return;\n        const { onTapCancel } = this.node.getProps();\n        if (onTapCancel) {\n            frame.update(() => onTapCancel(event, info));\n        }\n    }\n    mount() {\n        const props = this.node.getProps();\n        const removePointerListener = addPointerEvent(this.node.current, \"pointerdown\", this.startPointerPress, { passive: !(props.onTapStart || props[\"onPointerStart\"]) });\n        const removeFocusListener = addDomEvent(this.node.current, \"focus\", this.startAccessiblePress);\n        this.removeStartListeners = pipe(removePointerListener, removeFocusListener);\n    }\n    unmount() {\n        this.removeStartListeners();\n        this.removeEndListeners();\n        this.removeAccessibleListeners();\n    }\n}\n\nexport { PressGesture };\n","/**\n * Map an IntersectionHandler callback to an element. We only ever make one handler for one\n * element, so even though these handlers might all be triggered by different\n * observers, we can keep them in the same map.\n */\nconst observerCallbacks = new WeakMap();\n/**\n * Multiple observers can be created for multiple element/document roots. Each with\n * different settings. So here we store dictionaries of observers to each root,\n * using serialised settings (threshold/margin) as lookup keys.\n */\nconst observers = new WeakMap();\nconst fireObserverCallback = (entry) => {\n    const callback = observerCallbacks.get(entry.target);\n    callback && callback(entry);\n};\nconst fireAllObserverCallbacks = (entries) => {\n    entries.forEach(fireObserverCallback);\n};\nfunction initIntersectionObserver({ root, ...options }) {\n    const lookupRoot = root || document;\n    /**\n     * If we don't have an observer lookup map for this root, create one.\n     */\n    if (!observers.has(lookupRoot)) {\n        observers.set(lookupRoot, {});\n    }\n    const rootObservers = observers.get(lookupRoot);\n    const key = JSON.stringify(options);\n    /**\n     * If we don't have an observer for this combination of root and settings,\n     * create one.\n     */\n    if (!rootObservers[key]) {\n        rootObservers[key] = new IntersectionObserver(fireAllObserverCallbacks, { root, ...options });\n    }\n    return rootObservers[key];\n}\nfunction observeIntersection(element, options, callback) {\n    const rootInteresectionObserver = initIntersectionObserver(options);\n    observerCallbacks.set(element, callback);\n    rootInteresectionObserver.observe(element);\n    return () => {\n        observerCallbacks.delete(element);\n        rootInteresectionObserver.unobserve(element);\n    };\n}\n\nexport { observeIntersection };\n","import { Feature } from '../Feature.mjs';\nimport { observeIntersection } from './observers.mjs';\n\nconst thresholdNames = {\n    some: 0,\n    all: 1,\n};\nclass InViewFeature extends Feature {\n    constructor() {\n        super(...arguments);\n        this.hasEnteredView = false;\n        this.isInView = false;\n    }\n    startObserver() {\n        this.unmount();\n        const { viewport = {} } = this.node.getProps();\n        const { root, margin: rootMargin, amount = \"some\", once } = viewport;\n        const options = {\n            root: root ? root.current : undefined,\n            rootMargin,\n            threshold: typeof amount === \"number\" ? amount : thresholdNames[amount],\n        };\n        const onIntersectionUpdate = (entry) => {\n            const { isIntersecting } = entry;\n            /**\n             * If there's been no change in the viewport state, early return.\n             */\n            if (this.isInView === isIntersecting)\n                return;\n            this.isInView = isIntersecting;\n            /**\n             * Handle hasEnteredView. If this is only meant to run once, and\n             * element isn't visible, early return. Otherwise set hasEnteredView to true.\n             */\n            if (once && !isIntersecting && this.hasEnteredView) {\n                return;\n            }\n            else if (isIntersecting) {\n                this.hasEnteredView = true;\n            }\n            if (this.node.animationState) {\n                this.node.animationState.setActive(\"whileInView\", isIntersecting);\n            }\n            /**\n             * Use the latest committed props rather than the ones in scope\n             * when this observer is created\n             */\n            const { onViewportEnter, onViewportLeave } = this.node.getProps();\n            const callback = isIntersecting ? onViewportEnter : onViewportLeave;\n            callback && callback(entry);\n        };\n        return observeIntersection(this.node.current, options, onIntersectionUpdate);\n    }\n    mount() {\n        this.startObserver();\n    }\n    update() {\n        if (typeof IntersectionObserver === \"undefined\")\n            return;\n        const { props, prevProps } = this.node;\n        const hasOptionsChanged = [\"amount\", \"margin\", \"root\"].some(hasViewportOptionChanged(props, prevProps));\n        if (hasOptionsChanged) {\n            this.startObserver();\n        }\n    }\n    unmount() { }\n}\nfunction hasViewportOptionChanged({ viewport = {} }, { viewport: prevViewport = {} } = {}) {\n    return (name) => viewport[name] !== prevViewport[name];\n}\n\nexport { InViewFeature };\n","import { HoverGesture } from '../../gestures/hover.mjs';\nimport { FocusGesture } from '../../gestures/focus.mjs';\nimport { PressGesture } from '../../gestures/press.mjs';\nimport { InViewFeature } from './viewport/index.mjs';\n\nconst gestureAnimations = {\n    inView: {\n        Feature: InViewFeature,\n    },\n    tap: {\n        Feature: PressGesture,\n    },\n    focus: {\n        Feature: FocusGesture,\n    },\n    hover: {\n        Feature: HoverGesture,\n    },\n};\n\nexport { gestureAnimations };\n","import { invariant } from '../../../utils/errors.mjs';\nimport { isNumericalString } from '../../../utils/is-numerical-string.mjs';\nimport { isCSSVariableToken } from './is-css-variable.mjs';\n\n/**\n * Parse Framer's special CSS variable format into a CSS token and a fallback.\n *\n * ```\n * `var(--foo, #fff)` => [`--foo`, '#fff']\n * ```\n *\n * @param current\n */\nconst splitCSSVariableRegex = /var\\((--[a-zA-Z0-9-_]+),? ?([a-zA-Z0-9 ()%#.,-]+)?\\)/;\nfunction parseCSSVariable(current) {\n    const match = splitCSSVariableRegex.exec(current);\n    if (!match)\n        return [,];\n    const [, token, fallback] = match;\n    return [token, fallback];\n}\nconst maxDepth = 4;\nfunction getVariableValue(current, element, depth = 1) {\n    invariant(depth <= maxDepth, `Max CSS variable fallback depth detected in property \"${current}\". This may indicate a circular fallback dependency.`);\n    const [token, fallback] = parseCSSVariable(current);\n    // No CSS variable detected\n    if (!token)\n        return;\n    // Attempt to read this CSS variable off the element\n    const resolved = window.getComputedStyle(element).getPropertyValue(token);\n    if (resolved) {\n        const trimmed = resolved.trim();\n        return isNumericalString(trimmed) ? parseFloat(trimmed) : trimmed;\n    }\n    else if (isCSSVariableToken(fallback)) {\n        // The fallback might itself be a CSS variable, in which case we attempt to resolve it too.\n        return getVariableValue(fallback, element, depth + 1);\n    }\n    else {\n        return fallback;\n    }\n}\n/**\n * Resolve CSS variables from\n *\n * @internal\n */\nfunction resolveCSSVariables(visualElement, { ...target }, transitionEnd) {\n    const element = visualElement.current;\n    if (!(element instanceof Element))\n        return { target, transitionEnd };\n    // If `transitionEnd` isn't `undefined`, clone it. We could clone `target` and `transitionEnd`\n    // only if they change but I think this reads clearer and this isn't a performance-critical path.\n    if (transitionEnd) {\n        transitionEnd = { ...transitionEnd };\n    }\n    // Go through existing `MotionValue`s and ensure any existing CSS variables are resolved\n    visualElement.values.forEach((value) => {\n        const current = value.get();\n        if (!isCSSVariableToken(current))\n            return;\n        const resolved = getVariableValue(current, element);\n        if (resolved)\n            value.set(resolved);\n    });\n    // Cycle through every target property and resolve CSS variables. Currently\n    // we only read single-var properties like `var(--foo)`, not `calc(var(--foo) + 20px)`\n    for (const key in target) {\n        const current = target[key];\n        if (!isCSSVariableToken(current))\n            continue;\n        const resolved = getVariableValue(current, element);\n        if (!resolved)\n            continue;\n        // Clone target if it hasn't already been\n        target[key] = resolved;\n        if (!transitionEnd)\n            transitionEnd = {};\n        // If the user hasn't already set this key on `transitionEnd`, set it to the unresolved\n        // CSS variable. This will ensure that after the animation the component will reflect\n        // changes in the value of the CSS variable.\n        if (transitionEnd[key] === undefined) {\n            transitionEnd[key] = current;\n        }\n    }\n    return { target, transitionEnd };\n}\n\nexport { parseCSSVariable, resolveCSSVariables };\n","export default function _objectDestructuringEmpty(obj) {\n  if (obj == null) throw new TypeError(\"Cannot destructure \" + obj);\n}","import { isKeyframesTarget } from '../../../animation/utils/is-keyframes-target.mjs';\nimport { invariant } from '../../../utils/errors.mjs';\nimport { transformPropOrder } from '../../html/utils/transform.mjs';\nimport { findDimensionValueType } from '../value-types/dimensions.mjs';\nimport { isBrowser } from '../../../utils/is-browser.mjs';\nimport { number } from '../../../value/types/numbers/index.mjs';\nimport { px } from '../../../value/types/numbers/units.mjs';\n\nconst positionalKeys = new Set([\n    \"width\",\n    \"height\",\n    \"top\",\n    \"left\",\n    \"right\",\n    \"bottom\",\n    \"x\",\n    \"y\",\n    \"translateX\",\n    \"translateY\",\n]);\nconst isPositionalKey = (key) => positionalKeys.has(key);\nconst hasPositionalKey = (target) => {\n    return Object.keys(target).some(isPositionalKey);\n};\nconst isNumOrPxType = (v) => v === number || v === px;\nconst getPosFromMatrix = (matrix, pos) => parseFloat(matrix.split(\", \")[pos]);\nconst getTranslateFromMatrix = (pos2, pos3) => (_bbox, { transform }) => {\n    if (transform === \"none\" || !transform)\n        return 0;\n    const matrix3d = transform.match(/^matrix3d\\((.+)\\)$/);\n    if (matrix3d) {\n        return getPosFromMatrix(matrix3d[1], pos3);\n    }\n    else {\n        const matrix = transform.match(/^matrix\\((.+)\\)$/);\n        if (matrix) {\n            return getPosFromMatrix(matrix[1], pos2);\n        }\n        else {\n            return 0;\n        }\n    }\n};\nconst transformKeys = new Set([\"x\", \"y\", \"z\"]);\nconst nonTranslationalTransformKeys = transformPropOrder.filter((key) => !transformKeys.has(key));\nfunction removeNonTranslationalTransform(visualElement) {\n    const removedTransforms = [];\n    nonTranslationalTransformKeys.forEach((key) => {\n        const value = visualElement.getValue(key);\n        if (value !== undefined) {\n            removedTransforms.push([key, value.get()]);\n            value.set(key.startsWith(\"scale\") ? 1 : 0);\n        }\n    });\n    // Apply changes to element before measurement\n    if (removedTransforms.length)\n        visualElement.render();\n    return removedTransforms;\n}\nconst positionalValues = {\n    // Dimensions\n    width: ({ x }, { paddingLeft = \"0\", paddingRight = \"0\" }) => x.max - x.min - parseFloat(paddingLeft) - parseFloat(paddingRight),\n    height: ({ y }, { paddingTop = \"0\", paddingBottom = \"0\" }) => y.max - y.min - parseFloat(paddingTop) - parseFloat(paddingBottom),\n    top: (_bbox, { top }) => parseFloat(top),\n    left: (_bbox, { left }) => parseFloat(left),\n    bottom: ({ y }, { top }) => parseFloat(top) + (y.max - y.min),\n    right: ({ x }, { left }) => parseFloat(left) + (x.max - x.min),\n    // Transform\n    x: getTranslateFromMatrix(4, 13),\n    y: getTranslateFromMatrix(5, 14),\n};\n// Alias translate longform names\npositionalValues.translateX = positionalValues.x;\npositionalValues.translateY = positionalValues.y;\nconst convertChangedValueTypes = (target, visualElement, changedKeys) => {\n    const originBbox = visualElement.measureViewportBox();\n    const element = visualElement.current;\n    const elementComputedStyle = getComputedStyle(element);\n    const { display } = elementComputedStyle;\n    const origin = {};\n    // If the element is currently set to display: \"none\", make it visible before\n    // measuring the target bounding box\n    if (display === \"none\") {\n        visualElement.setStaticValue(\"display\", target.display || \"block\");\n    }\n    /**\n     * Record origins before we render and update styles\n     */\n    changedKeys.forEach((key) => {\n        origin[key] = positionalValues[key](originBbox, elementComputedStyle);\n    });\n    // Apply the latest values (as set in checkAndConvertChangedValueTypes)\n    visualElement.render();\n    const targetBbox = visualElement.measureViewportBox();\n    changedKeys.forEach((key) => {\n        // Restore styles to their **calculated computed style**, not their actual\n        // originally set style. This allows us to animate between equivalent pixel units.\n        const value = visualElement.getValue(key);\n        value && value.jump(origin[key]);\n        target[key] = positionalValues[key](targetBbox, elementComputedStyle);\n    });\n    return target;\n};\nconst checkAndConvertChangedValueTypes = (visualElement, target, origin = {}, transitionEnd = {}) => {\n    target = { ...target };\n    transitionEnd = { ...transitionEnd };\n    const targetPositionalKeys = Object.keys(target).filter(isPositionalKey);\n    // We want to remove any transform values that could affect the element's bounding box before\n    // it's measured. We'll reapply these later.\n    let removedTransformValues = [];\n    let hasAttemptedToRemoveTransformValues = false;\n    const changedValueTypeKeys = [];\n    targetPositionalKeys.forEach((key) => {\n        const value = visualElement.getValue(key);\n        if (!visualElement.hasValue(key))\n            return;\n        let from = origin[key];\n        let fromType = findDimensionValueType(from);\n        const to = target[key];\n        let toType;\n        // TODO: The current implementation of this basically throws an error\n        // if you try and do value conversion via keyframes. There's probably\n        // a way of doing this but the performance implications would need greater scrutiny,\n        // as it'd be doing multiple resize-remeasure operations.\n        if (isKeyframesTarget(to)) {\n            const numKeyframes = to.length;\n            const fromIndex = to[0] === null ? 1 : 0;\n            from = to[fromIndex];\n            fromType = findDimensionValueType(from);\n            for (let i = fromIndex; i < numKeyframes; i++) {\n                /**\n                 * Don't allow wildcard keyframes to be used to detect\n                 * a difference in value types.\n                 */\n                if (to[i] === null)\n                    break;\n                if (!toType) {\n                    toType = findDimensionValueType(to[i]);\n                    invariant(toType === fromType ||\n                        (isNumOrPxType(fromType) && isNumOrPxType(toType)), \"Keyframes must be of the same dimension as the current value\");\n                }\n                else {\n                    invariant(findDimensionValueType(to[i]) === toType, \"All keyframes must be of the same type\");\n                }\n            }\n        }\n        else {\n            toType = findDimensionValueType(to);\n        }\n        if (fromType !== toType) {\n            // If they're both just number or px, convert them both to numbers rather than\n            // relying on resize/remeasure to convert (which is wasteful in this situation)\n            if (isNumOrPxType(fromType) && isNumOrPxType(toType)) {\n                const current = value.get();\n                if (typeof current === \"string\") {\n                    value.set(parseFloat(current));\n                }\n                if (typeof to === \"string\") {\n                    target[key] = parseFloat(to);\n                }\n                else if (Array.isArray(to) && toType === px) {\n                    target[key] = to.map(parseFloat);\n                }\n            }\n            else if ((fromType === null || fromType === void 0 ? void 0 : fromType.transform) &&\n                (toType === null || toType === void 0 ? void 0 : toType.transform) &&\n                (from === 0 || to === 0)) {\n                // If one or the other value is 0, it's safe to coerce it to the\n                // type of the other without measurement\n                if (from === 0) {\n                    value.set(toType.transform(from));\n                }\n                else {\n                    target[key] = fromType.transform(to);\n                }\n            }\n            else {\n                // If we're going to do value conversion via DOM measurements, we first\n                // need to remove non-positional transform values that could affect the bbox measurements.\n                if (!hasAttemptedToRemoveTransformValues) {\n                    removedTransformValues =\n                        removeNonTranslationalTransform(visualElement);\n                    hasAttemptedToRemoveTransformValues = true;\n                }\n                changedValueTypeKeys.push(key);\n                transitionEnd[key] =\n                    transitionEnd[key] !== undefined\n                        ? transitionEnd[key]\n                        : target[key];\n                value.jump(to);\n            }\n        }\n    });\n    if (changedValueTypeKeys.length) {\n        const scrollY = changedValueTypeKeys.indexOf(\"height\") >= 0\n            ? window.pageYOffset\n            : null;\n        const convertedTarget = convertChangedValueTypes(target, visualElement, changedValueTypeKeys);\n        // If we removed transform values, reapply them before the next render\n        if (removedTransformValues.length) {\n            removedTransformValues.forEach(([key, value]) => {\n                visualElement.getValue(key).set(value);\n            });\n        }\n        // Reapply original values\n        visualElement.render();\n        // Restore scroll position\n        if (isBrowser && scrollY !== null) {\n            window.scrollTo({ top: scrollY });\n        }\n        return { target: convertedTarget, transitionEnd };\n    }\n    else {\n        return { target, transitionEnd };\n    }\n};\n/**\n * Convert value types for x/y/width/height/top/left/bottom/right\n *\n * Allows animation between `'auto'` -> `'100%'` or `0` -> `'calc(50% - 10vw)'`\n *\n * @internal\n */\nfunction unitConversion(visualElement, target, origin, transitionEnd) {\n    return hasPositionalKey(target)\n        ? checkAndConvertChangedValueTypes(visualElement, target, origin, transitionEnd)\n        : { target, transitionEnd };\n}\n\nexport { positionalValues, unitConversion };\n","import { resolveCSSVariables } from './css-variables-conversion.mjs';\nimport { unitConversion } from './unit-conversion.mjs';\n\n/**\n * Parse a DOM variant to make it animatable. This involves resolving CSS variables\n * and ensuring animations like \"20%\" => \"calc(50vw)\" are performed in pixels.\n */\nconst parseDomVariant = (visualElement, target, origin, transitionEnd) => {\n    const resolved = resolveCSSVariables(visualElement, target, transitionEnd);\n    target = resolved.target;\n    transitionEnd = resolved.transitionEnd;\n    return unitConversion(visualElement, target, origin, transitionEnd);\n};\n\nexport { parseDomVariant };\n","// Does this device prefer reduced motion? Returns `null` server-side.\nconst prefersReducedMotion = { current: null };\nconst hasReducedMotionListener = { current: false };\n\nexport { hasReducedMotionListener, prefersReducedMotion };\n","const visualElementStore = new WeakMap();\n\nexport { visualElementStore };\n","import { warning, invariant } from '../utils/errors.mjs';\nimport { createBox } from '../projection/geometry/models.mjs';\nimport { isRefObject } from '../utils/is-ref-object.mjs';\nimport { initPrefersReducedMotion } from '../utils/reduced-motion/index.mjs';\nimport { hasReducedMotionListener, prefersReducedMotion } from '../utils/reduced-motion/state.mjs';\nimport { SubscriptionManager } from '../utils/subscription-manager.mjs';\nimport { motionValue } from '../value/index.mjs';\nimport { isWillChangeMotionValue } from '../value/use-will-change/is.mjs';\nimport { isMotionValue } from '../value/utils/is-motion-value.mjs';\nimport { transformProps } from './html/utils/transform.mjs';\nimport { isControllingVariants, isVariantNode } from './utils/is-controlling-variants.mjs';\nimport { isVariantLabel } from './utils/is-variant-label.mjs';\nimport { updateMotionValuesFromProps } from './utils/motion-values.mjs';\nimport { resolveVariantFromProps } from './utils/resolve-variants.mjs';\nimport { warnOnce } from '../utils/warn-once.mjs';\nimport { featureDefinitions } from '../motion/features/definitions.mjs';\nimport { variantProps } from './utils/variant-props.mjs';\nimport { visualElementStore } from './store.mjs';\nimport { frame, cancelFrame } from '../frameloop/frame.mjs';\n\nconst featureNames = Object.keys(featureDefinitions);\nconst numFeatures = featureNames.length;\nconst propEventHandlers = [\n    \"AnimationStart\",\n    \"AnimationComplete\",\n    \"Update\",\n    \"BeforeLayoutMeasure\",\n    \"LayoutMeasure\",\n    \"LayoutAnimationStart\",\n    \"LayoutAnimationComplete\",\n];\nconst numVariantProps = variantProps.length;\n/**\n * A VisualElement is an imperative abstraction around UI elements such as\n * HTMLElement, SVGElement, Three.Object3D etc.\n */\nclass VisualElement {\n    constructor({ parent, props, presenceContext, reducedMotionConfig, visualState, }, options = {}) {\n        /**\n         * A reference to the current underlying Instance, e.g. a HTMLElement\n         * or Three.Mesh etc.\n         */\n        this.current = null;\n        /**\n         * A set containing references to this VisualElement's children.\n         */\n        this.children = new Set();\n        /**\n         * Determine what role this visual element should take in the variant tree.\n         */\n        this.isVariantNode = false;\n        this.isControllingVariants = false;\n        /**\n         * Decides whether this VisualElement should animate in reduced motion\n         * mode.\n         *\n         * TODO: This is currently set on every individual VisualElement but feels\n         * like it could be set globally.\n         */\n        this.shouldReduceMotion = null;\n        /**\n         * A map of all motion values attached to this visual element. Motion\n         * values are source of truth for any given animated value. A motion\n         * value might be provided externally by the component via props.\n         */\n        this.values = new Map();\n        /**\n         * Cleanup functions for active features (hover/tap/exit etc)\n         */\n        this.features = {};\n        /**\n         * A map of every subscription that binds the provided or generated\n         * motion values onChange listeners to this visual element.\n         */\n        this.valueSubscriptions = new Map();\n        /**\n         * A reference to the previously-provided motion values as returned\n         * from scrapeMotionValuesFromProps. We use the keys in here to determine\n         * if any motion values need to be removed after props are updated.\n         */\n        this.prevMotionValues = {};\n        /**\n         * An object containing a SubscriptionManager for each active event.\n         */\n        this.events = {};\n        /**\n         * An object containing an unsubscribe function for each prop event subscription.\n         * For example, every \"Update\" event can have multiple subscribers via\n         * VisualElement.on(), but only one of those can be defined via the onUpdate prop.\n         */\n        this.propEventSubscriptions = {};\n        this.notifyUpdate = () => this.notify(\"Update\", this.latestValues);\n        this.render = () => {\n            if (!this.current)\n                return;\n            this.triggerBuild();\n            this.renderInstance(this.current, this.renderState, this.props.style, this.projection);\n        };\n        this.scheduleRender = () => frame.render(this.render, false, true);\n        const { latestValues, renderState } = visualState;\n        this.latestValues = latestValues;\n        this.baseTarget = { ...latestValues };\n        this.initialValues = props.initial ? { ...latestValues } : {};\n        this.renderState = renderState;\n        this.parent = parent;\n        this.props = props;\n        this.presenceContext = presenceContext;\n        this.depth = parent ? parent.depth + 1 : 0;\n        this.reducedMotionConfig = reducedMotionConfig;\n        this.options = options;\n        this.isControllingVariants = isControllingVariants(props);\n        this.isVariantNode = isVariantNode(props);\n        if (this.isVariantNode) {\n            this.variantChildren = new Set();\n        }\n        this.manuallyAnimateOnMount = Boolean(parent && parent.current);\n        /**\n         * Any motion values that are provided to the element when created\n         * aren't yet bound to the element, as this would technically be impure.\n         * However, we iterate through the motion values and set them to the\n         * initial values for this component.\n         *\n         * TODO: This is impure and we should look at changing this to run on mount.\n         * Doing so will break some tests but this isn't neccessarily a breaking change,\n         * more a reflection of the test.\n         */\n        const { willChange, ...initialMotionValues } = this.scrapeMotionValuesFromProps(props, {});\n        for (const key in initialMotionValues) {\n            const value = initialMotionValues[key];\n            if (latestValues[key] !== undefined && isMotionValue(value)) {\n                value.set(latestValues[key], false);\n                if (isWillChangeMotionValue(willChange)) {\n                    willChange.add(key);\n                }\n            }\n        }\n    }\n    /**\n     * This method takes React props and returns found MotionValues. For example, HTML\n     * MotionValues will be found within the style prop, whereas for Three.js within attribute arrays.\n     *\n     * This isn't an abstract method as it needs calling in the constructor, but it is\n     * intended to be one.\n     */\n    scrapeMotionValuesFromProps(_props, _prevProps) {\n        return {};\n    }\n    mount(instance) {\n        this.current = instance;\n        visualElementStore.set(instance, this);\n        if (this.projection && !this.projection.instance) {\n            this.projection.mount(instance);\n        }\n        if (this.parent && this.isVariantNode && !this.isControllingVariants) {\n            this.removeFromVariantTree = this.parent.addVariantChild(this);\n        }\n        this.values.forEach((value, key) => this.bindToMotionValue(key, value));\n        if (!hasReducedMotionListener.current) {\n            initPrefersReducedMotion();\n        }\n        this.shouldReduceMotion =\n            this.reducedMotionConfig === \"never\"\n                ? false\n                : this.reducedMotionConfig === \"always\"\n                    ? true\n                    : prefersReducedMotion.current;\n        if (process.env.NODE_ENV !== \"production\") {\n            warnOnce(this.shouldReduceMotion !== true, \"You have Reduced Motion enabled on your device. Animations may not appear as expected.\");\n        }\n        if (this.parent)\n            this.parent.children.add(this);\n        this.update(this.props, this.presenceContext);\n    }\n    unmount() {\n        visualElementStore.delete(this.current);\n        this.projection && this.projection.unmount();\n        cancelFrame(this.notifyUpdate);\n        cancelFrame(this.render);\n        this.valueSubscriptions.forEach((remove) => remove());\n        this.removeFromVariantTree && this.removeFromVariantTree();\n        this.parent && this.parent.children.delete(this);\n        for (const key in this.events) {\n            this.events[key].clear();\n        }\n        for (const key in this.features) {\n            this.features[key].unmount();\n        }\n        this.current = null;\n    }\n    bindToMotionValue(key, value) {\n        const valueIsTransform = transformProps.has(key);\n        const removeOnChange = value.on(\"change\", (latestValue) => {\n            this.latestValues[key] = latestValue;\n            this.props.onUpdate &&\n                frame.update(this.notifyUpdate, false, true);\n            if (valueIsTransform && this.projection) {\n                this.projection.isTransformDirty = true;\n            }\n        });\n        const removeOnRenderRequest = value.on(\"renderRequest\", this.scheduleRender);\n        this.valueSubscriptions.set(key, () => {\n            removeOnChange();\n            removeOnRenderRequest();\n        });\n    }\n    sortNodePosition(other) {\n        /**\n         * If these nodes aren't even of the same type we can't compare their depth.\n         */\n        if (!this.current ||\n            !this.sortInstanceNodePosition ||\n            this.type !== other.type) {\n            return 0;\n        }\n        return this.sortInstanceNodePosition(this.current, other.current);\n    }\n    loadFeatures({ children, ...renderedProps }, isStrict, preloadedFeatures, initialLayoutGroupConfig) {\n        let ProjectionNodeConstructor;\n        let MeasureLayout;\n        /**\n         * If we're in development mode, check to make sure we're not rendering a motion component\n         * as a child of LazyMotion, as this will break the file-size benefits of using it.\n         */\n        if (process.env.NODE_ENV !== \"production\" &&\n            preloadedFeatures &&\n            isStrict) {\n            const strictMessage = \"You have rendered a `motion` component within a `LazyMotion` component. This will break tree shaking. Import and render a `m` component instead.\";\n            renderedProps.ignoreStrict\n                ? warning(false, strictMessage)\n                : invariant(false, strictMessage);\n        }\n        for (let i = 0; i < numFeatures; i++) {\n            const name = featureNames[i];\n            const { isEnabled, Feature: FeatureConstructor, ProjectionNode, MeasureLayout: MeasureLayoutComponent, } = featureDefinitions[name];\n            if (ProjectionNode)\n                ProjectionNodeConstructor = ProjectionNode;\n            if (isEnabled(renderedProps)) {\n                if (!this.features[name] && FeatureConstructor) {\n                    this.features[name] = new FeatureConstructor(this);\n                }\n                if (MeasureLayoutComponent) {\n                    MeasureLayout = MeasureLayoutComponent;\n                }\n            }\n        }\n        if (!this.projection && ProjectionNodeConstructor) {\n            this.projection = new ProjectionNodeConstructor(this.latestValues, this.parent && this.parent.projection);\n            const { layoutId, layout, drag, dragConstraints, layoutScroll, layoutRoot, } = renderedProps;\n            this.projection.setOptions({\n                layoutId,\n                layout,\n                alwaysMeasureLayout: Boolean(drag) ||\n                    (dragConstraints && isRefObject(dragConstraints)),\n                visualElement: this,\n                scheduleRender: () => this.scheduleRender(),\n                /**\n                 * TODO: Update options in an effect. This could be tricky as it'll be too late\n                 * to update by the time layout animations run.\n                 * We also need to fix this safeToRemove by linking it up to the one returned by usePresence,\n                 * ensuring it gets called if there's no potential layout animations.\n                 *\n                 */\n                animationType: typeof layout === \"string\" ? layout : \"both\",\n                initialPromotionConfig: initialLayoutGroupConfig,\n                layoutScroll,\n                layoutRoot,\n            });\n        }\n        return MeasureLayout;\n    }\n    updateFeatures() {\n        for (const key in this.features) {\n            const feature = this.features[key];\n            if (feature.isMounted) {\n                feature.update();\n            }\n            else {\n                feature.mount();\n                feature.isMounted = true;\n            }\n        }\n    }\n    triggerBuild() {\n        this.build(this.renderState, this.latestValues, this.options, this.props);\n    }\n    /**\n     * Measure the current viewport box with or without transforms.\n     * Only measures axis-aligned boxes, rotate and skew must be manually\n     * removed with a re-render to work.\n     */\n    measureViewportBox() {\n        return this.current\n            ? this.measureInstanceViewportBox(this.current, this.props)\n            : createBox();\n    }\n    getStaticValue(key) {\n        return this.latestValues[key];\n    }\n    setStaticValue(key, value) {\n        this.latestValues[key] = value;\n    }\n    /**\n     * Make a target animatable by Popmotion. For instance, if we're\n     * trying to animate width from 100px to 100vw we need to measure 100vw\n     * in pixels to determine what we really need to animate to. This is also\n     * pluggable to support Framer's custom value types like Color,\n     * and CSS variables.\n     */\n    makeTargetAnimatable(target, canMutate = true) {\n        return this.makeTargetAnimatableFromInstance(target, this.props, canMutate);\n    }\n    /**\n     * Update the provided props. Ensure any newly-added motion values are\n     * added to our map, old ones removed, and listeners updated.\n     */\n    update(props, presenceContext) {\n        if (props.transformTemplate || this.props.transformTemplate) {\n            this.scheduleRender();\n        }\n        this.prevProps = this.props;\n        this.props = props;\n        this.prevPresenceContext = this.presenceContext;\n        this.presenceContext = presenceContext;\n        /**\n         * Update prop event handlers ie onAnimationStart, onAnimationComplete\n         */\n        for (let i = 0; i < propEventHandlers.length; i++) {\n            const key = propEventHandlers[i];\n            if (this.propEventSubscriptions[key]) {\n                this.propEventSubscriptions[key]();\n                delete this.propEventSubscriptions[key];\n            }\n            const listener = props[\"on\" + key];\n            if (listener) {\n                this.propEventSubscriptions[key] = this.on(key, listener);\n            }\n        }\n        this.prevMotionValues = updateMotionValuesFromProps(this, this.scrapeMotionValuesFromProps(props, this.prevProps), this.prevMotionValues);\n        if (this.handleChildMotionValue) {\n            this.handleChildMotionValue();\n        }\n    }\n    getProps() {\n        return this.props;\n    }\n    /**\n     * Returns the variant definition with a given name.\n     */\n    getVariant(name) {\n        return this.props.variants ? this.props.variants[name] : undefined;\n    }\n    /**\n     * Returns the defined default transition on this component.\n     */\n    getDefaultTransition() {\n        return this.props.transition;\n    }\n    getTransformPagePoint() {\n        return this.props.transformPagePoint;\n    }\n    getClosestVariantNode() {\n        return this.isVariantNode\n            ? this\n            : this.parent\n                ? this.parent.getClosestVariantNode()\n                : undefined;\n    }\n    getVariantContext(startAtParent = false) {\n        if (startAtParent) {\n            return this.parent ? this.parent.getVariantContext() : undefined;\n        }\n        if (!this.isControllingVariants) {\n            const context = this.parent\n                ? this.parent.getVariantContext() || {}\n                : {};\n            if (this.props.initial !== undefined) {\n                context.initial = this.props.initial;\n            }\n            return context;\n        }\n        const context = {};\n        for (let i = 0; i < numVariantProps; i++) {\n            const name = variantProps[i];\n            const prop = this.props[name];\n            if (isVariantLabel(prop) || prop === false) {\n                context[name] = prop;\n            }\n        }\n        return context;\n    }\n    /**\n     * Add a child visual element to our set of children.\n     */\n    addVariantChild(child) {\n        const closestVariantNode = this.getClosestVariantNode();\n        if (closestVariantNode) {\n            closestVariantNode.variantChildren &&\n                closestVariantNode.variantChildren.add(child);\n            return () => closestVariantNode.variantChildren.delete(child);\n        }\n    }\n    /**\n     * Add a motion value and bind it to this visual element.\n     */\n    addValue(key, value) {\n        // Remove existing value if it exists\n        if (value !== this.values.get(key)) {\n            this.removeValue(key);\n            this.bindToMotionValue(key, value);\n        }\n        this.values.set(key, value);\n        this.latestValues[key] = value.get();\n    }\n    /**\n     * Remove a motion value and unbind any active subscriptions.\n     */\n    removeValue(key) {\n        this.values.delete(key);\n        const unsubscribe = this.valueSubscriptions.get(key);\n        if (unsubscribe) {\n            unsubscribe();\n            this.valueSubscriptions.delete(key);\n        }\n        delete this.latestValues[key];\n        this.removeValueFromRenderState(key, this.renderState);\n    }\n    /**\n     * Check whether we have a motion value for this key\n     */\n    hasValue(key) {\n        return this.values.has(key);\n    }\n    getValue(key, defaultValue) {\n        if (this.props.values && this.props.values[key]) {\n            return this.props.values[key];\n        }\n        let value = this.values.get(key);\n        if (value === undefined && defaultValue !== undefined) {\n            value = motionValue(defaultValue, { owner: this });\n            this.addValue(key, value);\n        }\n        return value;\n    }\n    /**\n     * If we're trying to animate to a previously unencountered value,\n     * we need to check for it in our state and as a last resort read it\n     * directly from the instance (which might have performance implications).\n     */\n    readValue(key) {\n        var _a;\n        return this.latestValues[key] !== undefined || !this.current\n            ? this.latestValues[key]\n            : (_a = this.getBaseTargetFromProps(this.props, key)) !== null && _a !== void 0 ? _a : this.readValueFromInstance(this.current, key, this.options);\n    }\n    /**\n     * Set the base target to later animate back to. This is currently\n     * only hydrated on creation and when we first read a value.\n     */\n    setBaseTarget(key, value) {\n        this.baseTarget[key] = value;\n    }\n    /**\n     * Find the base target for a value thats been removed from all animation\n     * props.\n     */\n    getBaseTarget(key) {\n        var _a;\n        const { initial } = this.props;\n        const valueFromInitial = typeof initial === \"string\" || typeof initial === \"object\"\n            ? (_a = resolveVariantFromProps(this.props, initial)) === null || _a === void 0 ? void 0 : _a[key]\n            : undefined;\n        /**\n         * If this value still exists in the current initial variant, read that.\n         */\n        if (initial && valueFromInitial !== undefined) {\n            return valueFromInitial;\n        }\n        /**\n         * Alternatively, if this VisualElement config has defined a getBaseTarget\n         * so we can read the value from an alternative source, try that.\n         */\n        const target = this.getBaseTargetFromProps(this.props, key);\n        if (target !== undefined && !isMotionValue(target))\n            return target;\n        /**\n         * If the value was initially defined on initial, but it doesn't any more,\n         * return undefined. Otherwise return the value as initially read from the DOM.\n         */\n        return this.initialValues[key] !== undefined &&\n            valueFromInitial === undefined\n            ? undefined\n            : this.baseTarget[key];\n    }\n    on(eventName, callback) {\n        if (!this.events[eventName]) {\n            this.events[eventName] = new SubscriptionManager();\n        }\n        return this.events[eventName].add(callback);\n    }\n    notify(eventName, ...args) {\n        if (this.events[eventName]) {\n            this.events[eventName].notify(...args);\n        }\n    }\n}\n\nexport { VisualElement };\n","import { isBrowser } from '../is-browser.mjs';\nimport { hasReducedMotionListener, prefersReducedMotion } from './state.mjs';\n\nfunction initPrefersReducedMotion() {\n    hasReducedMotionListener.current = true;\n    if (!isBrowser)\n        return;\n    if (window.matchMedia) {\n        const motionMediaQuery = window.matchMedia(\"(prefers-reduced-motion)\");\n        const setReducedMotionPreferences = () => (prefersReducedMotion.current = motionMediaQuery.matches);\n        motionMediaQuery.addListener(setReducedMotionPreferences);\n        setReducedMotionPreferences();\n    }\n    else {\n        prefersReducedMotion.current = false;\n    }\n}\n\nexport { initPrefersReducedMotion };\n","import { isWillChangeMotionValue } from '../../value/use-will-change/is.mjs';\nimport { warnOnce } from '../../utils/warn-once.mjs';\nimport { motionValue } from '../../value/index.mjs';\nimport { isMotionValue } from '../../value/utils/is-motion-value.mjs';\n\nfunction updateMotionValuesFromProps(element, next, prev) {\n    const { willChange } = next;\n    for (const key in next) {\n        const nextValue = next[key];\n        const prevValue = prev[key];\n        if (isMotionValue(nextValue)) {\n            /**\n             * If this is a motion value found in props or style, we want to add it\n             * to our visual element's motion value map.\n             */\n            element.addValue(key, nextValue);\n            if (isWillChangeMotionValue(willChange)) {\n                willChange.add(key);\n            }\n            /**\n             * Check the version of the incoming motion value with this version\n             * and warn against mismatches.\n             */\n            if (process.env.NODE_ENV === \"development\") {\n                warnOnce(nextValue.version === \"10.16.4\", `Attempting to mix Framer Motion versions ${nextValue.version} with 10.16.4 may not work as expected.`);\n            }\n        }\n        else if (isMotionValue(prevValue)) {\n            /**\n             * If we're swapping from a motion value to a static value,\n             * create a new motion value from that\n             */\n            element.addValue(key, motionValue(nextValue, { owner: element }));\n            if (isWillChangeMotionValue(willChange)) {\n                willChange.remove(key);\n            }\n        }\n        else if (prevValue !== nextValue) {\n            /**\n             * If this is a flat value that has changed, update the motion value\n             * or create one if it doesn't exist. We only want to do this if we're\n             * not handling the value with our animation state.\n             */\n            if (element.hasValue(key)) {\n                const existingValue = element.getValue(key);\n                // TODO: Only update values that aren't being animated or even looked at\n                !existingValue.hasAnimated && existingValue.set(nextValue);\n            }\n            else {\n                const latestValue = element.getStaticValue(key);\n                element.addValue(key, motionValue(latestValue !== undefined ? latestValue : nextValue, { owner: element }));\n            }\n        }\n    }\n    // Handle removed values\n    for (const key in prev) {\n        if (next[key] === undefined)\n            element.removeValue(key);\n    }\n    return next;\n}\n\nexport { updateMotionValuesFromProps };\n","import { getOrigin, checkTargetForNewValues } from '../utils/setters.mjs';\nimport { parseDomVariant } from './utils/parse-dom-variant.mjs';\nimport { VisualElement } from '../VisualElement.mjs';\n\nclass DOMVisualElement extends VisualElement {\n    sortInstanceNodePosition(a, b) {\n        /**\n         * compareDocumentPosition returns a bitmask, by using the bitwise &\n         * we're returning true if 2 in that bitmask is set to true. 2 is set\n         * to true if b preceeds a.\n         */\n        return a.compareDocumentPosition(b) & 2 ? 1 : -1;\n    }\n    getBaseTargetFromProps(props, key) {\n        return props.style ? props.style[key] : undefined;\n    }\n    removeValueFromRenderState(key, { vars, style }) {\n        delete vars[key];\n        delete style[key];\n    }\n    makeTargetAnimatableFromInstance({ transition, transitionEnd, ...target }, { transformValues }, isMounted) {\n        let origin = getOrigin(target, transition || {}, this);\n        /**\n         * If Framer has provided a function to convert `Color` etc value types, convert them\n         */\n        if (transformValues) {\n            if (transitionEnd)\n                transitionEnd = transformValues(transitionEnd);\n            if (target)\n                target = transformValues(target);\n            if (origin)\n                origin = transformValues(origin);\n        }\n        if (isMounted) {\n            checkTargetForNewValues(this, target, origin);\n            const parsed = parseDomVariant(this, target, origin, transitionEnd);\n            transitionEnd = parsed.transitionEnd;\n            target = parsed.target;\n        }\n        return {\n            transition,\n            transitionEnd,\n            ...target,\n        };\n    }\n}\n\nexport { DOMVisualElement };\n","import { buildHTMLStyles } from './utils/build-styles.mjs';\nimport { isCSSVariableName } from '../dom/utils/is-css-variable.mjs';\nimport { transformProps } from './utils/transform.mjs';\nimport { scrapeMotionValuesFromProps } from './utils/scrape-motion-values.mjs';\nimport { renderHTML } from './utils/render.mjs';\nimport { getDefaultValueType } from '../dom/value-types/defaults.mjs';\nimport { measureViewportBox } from '../../projection/utils/measure.mjs';\nimport { DOMVisualElement } from '../dom/DOMVisualElement.mjs';\nimport { isMotionValue } from '../../value/utils/is-motion-value.mjs';\n\nfunction getComputedStyle(element) {\n    return window.getComputedStyle(element);\n}\nclass HTMLVisualElement extends DOMVisualElement {\n    readValueFromInstance(instance, key) {\n        if (transformProps.has(key)) {\n            const defaultType = getDefaultValueType(key);\n            return defaultType ? defaultType.default || 0 : 0;\n        }\n        else {\n            const computedStyle = getComputedStyle(instance);\n            const value = (isCSSVariableName(key)\n                ? computedStyle.getPropertyValue(key)\n                : computedStyle[key]) || 0;\n            return typeof value === \"string\" ? value.trim() : value;\n        }\n    }\n    measureInstanceViewportBox(instance, { transformPagePoint }) {\n        return measureViewportBox(instance, transformPagePoint);\n    }\n    build(renderState, latestValues, options, props) {\n        buildHTMLStyles(renderState, latestValues, options, props.transformTemplate);\n    }\n    scrapeMotionValuesFromProps(props, prevProps) {\n        return scrapeMotionValuesFromProps(props, prevProps);\n    }\n    handleChildMotionValue() {\n        if (this.childSubscription) {\n            this.childSubscription();\n            delete this.childSubscription;\n        }\n        const { children } = this.props;\n        if (isMotionValue(children)) {\n            this.childSubscription = children.on(\"change\", (latest) => {\n                if (this.current)\n                    this.current.textContent = `${latest}`;\n            });\n        }\n    }\n    renderInstance(instance, renderState, styleProp, projection) {\n        renderHTML(instance, renderState, styleProp, projection);\n    }\n}\n\nexport { HTMLVisualElement, getComputedStyle };\n","import superPropBase from \"./superPropBase.js\";\nexport default function _get() {\n  if (typeof Reflect !== \"undefined\" && Reflect.get) {\n    _get = Reflect.get.bind();\n  } else {\n    _get = function _get(target, property, receiver) {\n      var base = superPropBase(target, property);\n      if (!base) return;\n      var desc = Object.getOwnPropertyDescriptor(base, property);\n      if (desc.get) {\n        return desc.get.call(arguments.length < 3 ? target : receiver);\n      }\n      return desc.value;\n    };\n  }\n  return _get.apply(this, arguments);\n}","import getPrototypeOf from \"./getPrototypeOf.js\";\nexport default function _superPropBase(object, property) {\n  while (!Object.prototype.hasOwnProperty.call(object, property)) {\n    object = getPrototypeOf(object);\n    if (object === null) break;\n  }\n  return object;\n}","import { scrapeMotionValuesFromProps } from './utils/scrape-motion-values.mjs';\nimport { DOMVisualElement } from '../dom/DOMVisualElement.mjs';\nimport { buildSVGAttrs } from './utils/build-attrs.mjs';\nimport { camelToDash } from '../dom/utils/camel-to-dash.mjs';\nimport { camelCaseAttributes } from './utils/camel-case-attrs.mjs';\nimport { transformProps } from '../html/utils/transform.mjs';\nimport { renderSVG } from './utils/render.mjs';\nimport { getDefaultValueType } from '../dom/value-types/defaults.mjs';\nimport { createBox } from '../../projection/geometry/models.mjs';\nimport { isSVGTag } from './utils/is-svg-tag.mjs';\n\nclass SVGVisualElement extends DOMVisualElement {\n    constructor() {\n        super(...arguments);\n        this.isSVGTag = false;\n    }\n    getBaseTargetFromProps(props, key) {\n        return props[key];\n    }\n    readValueFromInstance(instance, key) {\n        if (transformProps.has(key)) {\n            const defaultType = getDefaultValueType(key);\n            return defaultType ? defaultType.default || 0 : 0;\n        }\n        key = !camelCaseAttributes.has(key) ? camelToDash(key) : key;\n        return instance.getAttribute(key);\n    }\n    measureInstanceViewportBox() {\n        return createBox();\n    }\n    scrapeMotionValuesFromProps(props, prevProps) {\n        return scrapeMotionValuesFromProps(props, prevProps);\n    }\n    build(renderState, latestValues, options, props) {\n        buildSVGAttrs(renderState, latestValues, options, this.isSVGTag, props.transformTemplate);\n    }\n    renderInstance(instance, renderState, styleProp, projection) {\n        renderSVG(instance, renderState, styleProp, projection);\n    }\n    mount(instance) {\n        this.isSVGTag = isSVGTag(instance.tagName);\n        super.mount(instance);\n    }\n}\n\nexport { SVGVisualElement };\n","import { animations } from '../../motion/features/animations.mjs';\nimport { gestureAnimations } from '../../motion/features/gestures.mjs';\nimport { createDomVisualElement } from './create-visual-element.mjs';\n\n/**\n * @public\n */\nconst domAnimation = {\n    renderer: createDomVisualElement,\n    ...animations,\n    ...gestureAnimations,\n};\n\nexport { domAnimation };\n","import { HTMLVisualElement } from '../html/HTMLVisualElement.mjs';\nimport { SVGVisualElement } from '../svg/SVGVisualElement.mjs';\nimport { isSVGComponent } from './utils/is-svg-component.mjs';\n\nconst createDomVisualElement = (Component, options) => {\n    return isSVGComponent(Component)\n        ? new SVGVisualElement(options, { enableHardwareAcceleration: false })\n        : new HTMLVisualElement(options, { enableHardwareAcceleration: true });\n};\n\nexport { createDomVisualElement };\n","import { drag } from '../../motion/features/drag.mjs';\nimport { layout } from '../../motion/features/layout.mjs';\nimport { domAnimation } from './features-animation.mjs';\n\n/**\n * @public\n */\nconst domMax = {\n    ...domAnimation,\n    ...drag,\n    ...layout,\n};\n\nexport { domMax };\n"],"names":["Feature","node","_classCallCheck","this","isMounted","_createClass","key","value","isPrimaryPointer","event","pointerType","button","isPrimary","extractEventInfo","pointType","arguments","length","undefined","point","x","y","addPointerInfo","handler","addDomEvent","target","eventName","options","passive","addEventListener","removeEventListener","addPointerEvent","distance","a","b","Math","abs","PanSession","handlers","_this","transformPagePoint","startEvent","lastMoveEvent","lastMoveEventInfo","updatePoint","info","getPanInfo","history","isPanStarted","isDistancePastThreshold","xDelta","yDelta","sqrt","pow","distance2D","offset","timestamp","frameData","push","_objectSpread","_this$handlers","onStart","onMove","handlePointerMove","transformPoint","frame","update","handlePointerUp","end","_this$handlers2","onEnd","onSessionEnd","panInfo","type","initialInfo","onSessionStart","removeListeners","pipe","window","cancelFrame","subtractPoint","_ref2","delta","lastDevicePoint","startDevicePoint","velocity","getVelocity","timeDelta","i","timestampedPoint","lastPoint","secondsToMilliseconds","time","millisecondsToSeconds","currentVelocity","Infinity","createLock","name","lock","globalHorizontalLock","globalVerticalLock","getGlobalLock","drag","openHorizontal","openVertical","isDragActive","openGestureLock","calcLength","axis","max","min","isNear","maxDistance","calcAxisDelta","source","origin","originPoint","mix","scale","isNaN","translate","calcBoxDelta","originX","originY","calcRelativeAxis","relative","parent","calcRelativeAxisPosition","layout","calcRelativePosition","calcRelativeAxisConstraints","calcViewportAxisConstraints","layoutAxis","constraintsAxis","_ref3","defaultElastic","resolveAxisElastic","dragElastic","minLabel","maxLabel","resolvePointElastic","label","createDelta","createBox","eachAxis","callback","convertBoundingBoxToBox","_ref","top","left","right","bottom","isIdentityScale","hasScale","scaleX","scaleY","hasTransform","values","has2DTranslate","z","rotate","rotateX","rotateY","is2DTranslate","scalePoint","applyPointDelta","boxScale","applyAxisDelta","applyBoxDelta","box","snapToDefault","Number","isInteger","translateAxis","transformAxis","transforms","_slicedToArray","scaleKey","originKey","axisOrigin","xKeys","yKeys","transformBox","transform","measureViewportBox","instance","topLeft","bottomRight","transformBoxPoints","getBoundingClientRect","elementDragControls","WeakMap","VisualElementDragControls","visualElement","openGlobalLock","isDragging","currentDirection","constraints","hasMutatedConstraints","elastic","originEvent","_ref$snapToCursor","snapToCursor","presenceContext","isPresent","panSession","stopAnimation","_this$getProps","getProps","dragPropagation","onDragStart","resolveConstraints","projection","isAnimationBlocked","current","getAxisMotionValue","get","percent","test","measuredAxis","layoutBox","parseFloat","animationState","setActive","_this$getProps2","dragDirectionLock","onDirectionLock","onDrag","lockThreshold","direction","getCurrentDirection","updateAxis","render","stop","getTransformPagePoint","cancel","startAnimation","onDragEnd","_this$visualElement","_point","shouldDrag","axisValue","next","applyConstraints","set","_this2","_this$getProps6","dragConstraints","prevConstraints","isRefObject","resolveRefConstraints","calcRelativeConstraints","resolveDragElastic","relativeConstraints","rebaseAxisConstraints","_this$getProps7","onMeasureDragConstraints","constraintsElement","invariant","constraintsBox","element","rootProjectionNode","viewportBox","scroll","measurePageBox","root","measuredConstraints","calcViewportConstraints","userConstraints","convertBoxToBoundingBox","_this3","_this$getProps8","dragMomentum","dragTransition","dragSnapToOrigin","onDragTransitionEnd","momentumAnimations","transition","bounceStiffness","bounceDamping","inertia","timeConstant","restDelta","restSpeed","startAxisValueAnimation","Promise","all","then","start","animateMotionValue","_this4","dragKey","toUpperCase","props","externalMotionValue","getValue","initial","_this5","_projection$layout$la","_this6","_this$getProps9","boxProgress","latest","sourceLength","targetLength","progress","clamp","calcOrigin","transformTemplate","style","updateScroll","updateLayout","_this6$constraints$ax","_this7","stopPointerListener","_this7$getProps","_this7$getProps$dragL","dragListener","measureDragConstraints","stopMeasureLayoutListener","stopResizeListener","scalePositionWithinConstraints","stopLayoutUpdateListener","hasLayoutChanged","motionValue","_props$drag","_props$dragDirectionL","_props$dragPropagatio","_props$dragConstraint","_props$dragElastic","_props$dragMomentum","DragGesture","_Feature","_inherits","_super","_createSuper","call","removeGroupControls","noop","controls","dragControls","subscribe","addListeners","asyncHandler","PanGesture","apply","removePointerDownListener","pointerDownEvent","session","createPanHandlers","_this$node$getProps","onPanSessionStart","onPanStart","onPan","onPanEnd","onPointerDown","updateHandlers","globalProjectionState","hasAnimatedSinceResize","hasEverUpdated","pixelsToPercent","pixels","correctBorderRadius","correct","px","concat","correctBoxShadow","treeScale","projectionDelta","original","shadow","complex","parse","template","createTransformer","xScale","yScale","averageScale","MeasureLayoutWithContext","_React__default$Compo","_this$props","layoutGroup","switchLayoutGroup","layoutId","addScaleCorrector","defaultScaleCorrectors","group","add","register","didUpdate","safeToRemove","setOptions","onExitComplete","prevProps","_this$props2","layoutDependency","willUpdate","promote","relegate","postRender","stack","getStack","members","queueMicrotask","currentAnimation","isLead","_this$props3","promoteContext","scheduleCheckAfterUnmount","remove","deregister","React__default","MeasureLayout","_usePresence","context","useContext","PresenceContext","id","useId","useEffect","usePresence","_usePresence2","LayoutGroupContext","SwitchLayoutGroupContext","borderRadius","applyTo","borderTopLeftRadius","borderTopRightRadius","borderBottomLeftRadius","borderBottomRightRadius","boxShadow","borders","numBorders","asNumber","isPx","getRadius","radiusName","easeCrossfadeIn","compress","circOut","easeCrossfadeOut","easing","p","copyAxisInto","originAxis","copyBoxInto","originBox","removePointDelta","removeAxisTransforms","sourceAxis","removeAxisDelta","removeBoxTransforms","sourceBox","isAxisDeltaZero","isDeltaZero","boxEqualsRounded","round","aspectRatio","NodeStack","addUniqueItem","scheduleRender","removeItem","prevLead","lead","indexOfNode","findIndex","member","preserveFollowOpacity","show","resumeFrom","preserveOpacity","snapshot","latestValues","animationValues","isUpdating","isLayoutDirty","crossfade","hide","forEach","resumingFrom","buildProjectionTransform","latestTransform","xTranslate","yTranslate","elementScaleX","elementScaleY","compareByDepth","depth","FlatTree","children","isDirty","child","sort","transformAxes","projectionFrameData","totalNodes","resolvedTargetDeltas","recalculatedProjection","createProjectionNode","attachResizeListener","defaultParent","measureScroll","checkIsScrollRoot","resetTransform","ProjectionNode","animationId","Set","isTreeAnimating","isProjectionDirty","isSharedProjectionDirty","isTransformDirty","updateManuallyBlocked","updateBlockedByResize","isSVG","needsReset","shouldResetTransform","eventHandlers","Map","hasTreeAnimated","updateScheduled","checkUpdateFailed","clearAllSnapshots","updateProjection","data","nodes","propagateDirtyNodes","resolveTargetDelta","calcProjection","cleanDirtyNodes","MotionDebug","record","hasProjected","isVisible","animationProgress","sharedNodes","path","_toConsumableArray","has","SubscriptionManager","subscriptionManager","_len","args","Array","_key","notify","SVGElement","tagName","_this$options","mount","cancelDelay","resizeUnblockUpdate","timeout","performance","now","checkElapsed","elapsed","read","delay","finishAnimation","registerSharedNode","animate","hasRelativeTargetChanged","newLayout","isTreeAnimationBlocked","relativeTarget","layoutTransition","getDefaultTransition","defaultLayoutTransition","_visualElement$getPro","onLayoutAnimationStart","onLayoutAnimationComplete","targetChanged","targetLayout","hasOnlyRelativeTargetChanged","layoutRoot","setAnimationOrigin","animationOptions","getValueTransition","onPlay","onComplete","shouldReduceMotion","delete","isUpdateBlocked","resetRotation","shouldNotifyListeners","startUpdate","_this$options2","getTransformTemplate","prevTransformTemplateValue","updateSnapshot","notifyListeners","unblockUpdate","clearMeasurements","clearIsLayoutDirty","resetTransformStyle","notifyLayoutUpdate","isProcessing","steps","process","preRender","clearSnapshot","removeLeadSnapshots","measure","alwaysMeasureLayout","prevLayout","layoutCorrected","phase","needsMeasurement","Boolean","layoutScroll","isRoot","isResetRequested","hasProjection","transformTemplateValue","transformTemplateHasChanged","removeTransform","pageBox","removeElementScroll","roundAxis","measuredBox","boxWithoutScroll","rootScroll","transformOnly","withTransforms","boxWithoutTransform","targetDelta","scheduleUpdateProjection","relativeParent","resolvedRelativeTargetAt","_a","forceRecalculation","getLead","isShared","attemptToResolveRelativeTarget","_this$options3","getClosestProjectingParent","forceRelativeParentToResolveTarget","relativeTargetOrigin","targetWithTransforms","applyTransform","isProjecting","canSkip","_this$options4","pendingAnimation","prevTreeScaleX","prevTreeScaleY","treePath","isSharedTransition","treeLength","display","applyTreeDeltas","projectionDeltaWithTransform","prevProjectionTransform","projectionTransform","notifyAll","snapshotLatestValues","mixedValues","prevRelativeTarget","relativeLayout","isSharedLayoutAnimation","isOnlyMember","shouldCrossfadeOpacity","some","hasOpacityCrossfade","mixTargetDelta","output","from","to","mixAxisDelta","setTargetDelta","mixAxis","follow","opacity","opacityExit","borderLabel","followRadius","leadRadius","mixValues","keyframes","motionValue$1","isMotionValue","animation","animateSingleValue","onUpdate","completeAnimation","exitAnimationComplete","shouldAnimatePositionOnly","animationType","xLength","yLength","config","initialPromotionConfig","shouldPreserveFollowOpacity","hasRotate","rotateZ","resetValues","setStaticValue","_b","styleProp","styles","visibility","pointerEvents","resolveMotionValue","emptyStyles","valuesToRender","applyTransformsToTarget","_this$projectionDelta","transformOrigin","scaleCorrectors","_scaleCorrectors$key","corrected","num","clear","hasListeners","_node$layout","measuredLayout","axisSnapshot","layoutDelta","visualDelta","parentSnapshot","parentLayout","relativeSnapshot","onBeforeLayoutMeasure","removeLeadSnapshot","duration","ease","userAgentContains","string","navigator","userAgent","toLowerCase","includes","roundPoint","DocumentProjectionNode","ref","document","documentElement","scrollLeft","body","scrollTop","HTMLProjectionNode","documentNode","getComputedStyle","position","pan","shallowCompare","prev","isArray","prevLength","reversePriorityOrder","variantPriorityOrder","reverse","numAnimationTypes","createAnimationState","animations","map","animateVisualElement","animateList","state","createTypeState","whileInView","whileHover","whileTap","whileDrag","whileFocus","exit","isInitialRender","buildResolvedTypeValues","acc","definition","resolved","resolveVariant","transitionEnd","_objectWithoutProperties","_excluded","animateChanges","changedActiveType","getVariantContext","removedKeys","encounteredKeys","removedVariantIndex","_loop","typeState","prop","propIsVariant","isVariantLabel","activeDelta","isActive","isInherited","manuallyAnimateOnMount","protectedKeys","prevProp","isAnimationControls","variantDidChange","checkVariantsDidChange","shouldAnimateType","definitionList","resolvedValues","reduce","_typeState$prevResolv","prevResolvedValues","allKeys","markToAnimate","needsAnimating","hasOwnProperty","isKeyframesTarget","blockInitialAnimation","size","fallbackAnimation","fallbackTarget","getBaseTarget","shouldAnimate","resolve","variantChildren","setAnimateFunction","makeAnimator","getState","AnimationFeature","unmount","updateAnimationControlsSubscription","ExitAnimationFeature","_this$node$presenceCo","custom","prevIsPresent","prevPresenceContext","exitAnimation","addHoverEvent","callbackName","HoverGesture","FocusGesture","isFocusVisible","matches","e","onFocus","onBlur","isNodeOrChild","parentElement","fireSyntheticPointerEvent","syntheticPointerEvent","PointerEvent","PressGesture","removeStartListeners","removeEndListeners","removeAccessibleListeners","startPointerPress","startInfo","isPressing","removePointerUpListener","endEvent","endInfo","checkPressEnd","onTap","onTapCancel","removePointerCancelListener","cancelEvent","cancelInfo","cancelPress","startPress","startAccessiblePress","removeKeydownListener","keydownEvent","keyupEvent","removeBlurListener","_this$node$getProps3","onTapStart","removePointerListener","removeFocusListener","observerCallbacks","observers","fireObserverCallback","entry","fireAllObserverCallbacks","entries","observeIntersection","rootInteresectionObserver","lookupRoot","rootObservers","JSON","stringify","IntersectionObserver","initIntersectionObserver","observe","unobserve","thresholdNames","InViewFeature","hasEnteredView","isInView","_this$node$getProps$v","viewport","rootMargin","margin","_viewport$amount","amount","once","threshold","isIntersecting","_this2$node$getProps","onViewportEnter","onViewportLeave","startObserver","_this$node","hasOptionsChanged","_ref$viewport","_ref2$viewport","prevViewport","hasViewportOptionChanged","gestureAnimations","inView","tap","focus","hover","splitCSSVariableRegex","maxDepth","getVariableValue","_parseCSSVariable","match","exec","_match","parseCSSVariable","_parseCSSVariable2","token","fallback","getPropertyValue","trimmed","trim","isNumericalString","isCSSVariableToken","resolveCSSVariables","Object","assign","obj","TypeError","_objectDestructuringEmpty","Element","positionalKeys","isPositionalKey","isNumOrPxType","v","number","getPosFromMatrix","matrix","pos","split","getTranslateFromMatrix","pos2","pos3","_bbox","matrix3d","transformKeys","nonTranslationalTransformKeys","transformPropOrder","filter","positionalValues","width","_ref3$paddingLeft","paddingLeft","_ref3$paddingRight","paddingRight","height","_ref4","_ref5","_ref5$paddingTop","paddingTop","_ref5$paddingBottom","paddingBottom","_ref6","_ref7","_ref8","_ref9","_ref10","_ref11","translateX","translateY","checkAndConvertChangedValueTypes","targetPositionalKeys","keys","removedTransformValues","hasAttemptedToRemoveTransformValues","changedValueTypeKeys","hasValue","toType","fromType","findDimensionValueType","numKeyframes","fromIndex","removedTransforms","startsWith","removeNonTranslationalTransform","jump","scrollY","indexOf","pageYOffset","convertedTarget","changedKeys","originBbox","elementComputedStyle","targetBbox","convertChangedValueTypes","_ref12","_ref13","isBrowser","scrollTo","unitConversion","hasPositionalKey","prefersReducedMotion","hasReducedMotionListener","visualElementStore","featureNames","featureDefinitions","numFeatures","propEventHandlers","numVariantProps","variantProps","VisualElement","reducedMotionConfig","visualState","isVariantNode","isControllingVariants","features","valueSubscriptions","prevMotionValues","events","propEventSubscriptions","notifyUpdate","triggerBuild","renderInstance","renderState","baseTarget","initialValues","_this$scrapeMotionVal","scrapeMotionValuesFromProps","willChange","initialMotionValues","isWillChangeMotionValue","_props","_prevProps","removeFromVariantTree","addVariantChild","bindToMotionValue","matchMedia","motionMediaQuery","setReducedMotionPreferences","addListener","initPrefersReducedMotion","valueIsTransform","transformProps","removeOnChange","on","latestValue","removeOnRenderRequest","other","sortInstanceNodePosition","isStrict","preloadedFeatures","initialLayoutGroupConfig","ProjectionNodeConstructor","renderedProps","_excluded2","_featureDefinitions$n","isEnabled","FeatureConstructor","MeasureLayoutComponent","feature","build","measureInstanceViewportBox","canMutate","makeTargetAnimatableFromInstance","listener","nextValue","prevValue","addValue","owner","existingValue","hasAnimated","getStaticValue","removeValue","updateMotionValuesFromProps","handleChildMotionValue","variants","getClosestVariantNode","closestVariantNode","unsubscribe","removeValueFromRenderState","defaultValue","getBaseTargetFromProps","readValueFromInstance","valueFromInitial","resolveVariantFromProps","_this$events$eventNam","_key2","DOMVisualElement","_VisualElement","compareDocumentPosition","vars","transformValues","getOrigin","checkTargetForNewValues","parsed","parseDomVariant","HTMLVisualElement","_DOMVisualElement","defaultType","getDefaultValueType","default","computedStyle","isCSSVariableName","buildHTMLStyles","childSubscription","textContent","renderHTML","_get","Reflect","bind","property","receiver","base","object","prototype","getPrototypeOf","desc","getOwnPropertyDescriptor","SVGVisualElement","isSVGTag","camelCaseAttributes","camelToDash","getAttribute","buildSVGAttrs","renderSVG","_getPrototypeOf","domAnimation","renderer","Component","isSVGComponent","enableHardwareAcceleration","domMax"],"sourceRoot":""}