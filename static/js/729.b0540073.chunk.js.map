{"version":3,"file":"static/js/729.b0540073.chunk.js","mappings":"qIAAA,MAAMA,EACFC,WAAAA,CAAYC,GACRC,KAAKC,WAAY,EACjBD,KAAKD,KAAOA,CAChB,CACAG,MAAAA,GAAW,E,wBCLf,MAAMC,EAAoBC,GACI,UAAtBA,EAAMC,YACyB,kBAAjBD,EAAME,QAAuBF,EAAME,QAAU,GAWhC,IAApBF,EAAMG,UCXrB,SAASC,EAAiBJ,GAA2B,IAApBK,EAASC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,OACzC,MAAO,CACHG,MAAO,CACHC,EAAGV,EAAMK,EAAY,KACrBM,EAAGX,EAAMK,EAAY,MAGjC,CACA,MAAMO,EAAkBC,GACZb,GAAUD,EAAiBC,IAAUa,EAAQb,EAAOI,EAAiBJ,I,cCXjF,SAASc,EAAYC,EAAQC,EAAWH,GAAsC,IAA7BI,EAAOX,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,CAAEY,SAAS,GAElE,OADAH,EAAOI,iBAAiBH,EAAWH,EAASI,GACrC,IAAMF,EAAOK,oBAAoBJ,EAAWH,EACvD,CCAA,SAASQ,EAAgBN,EAAQC,EAAWH,EAASI,GACjD,OAAOH,EAAYC,EAAQC,EAAWJ,EAAeC,GAAUI,EACnE,C,cCLA,MAAMK,EAAWA,CAACC,EAAGC,IAAMC,KAAKC,IAAIH,EAAIC,G,cCWxC,MAAMG,EACFjC,WAAAA,CAAYM,EAAO4B,GAAuC,IAA7B,mBAAEC,GAAoBvB,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,CAAC,EA0DnD,GAtDAV,KAAKkC,WAAa,KAIlBlC,KAAKmC,cAAgB,KAIrBnC,KAAKoC,kBAAoB,KAIzBpC,KAAKgC,SAAW,CAAC,EACjBhC,KAAKqC,YAAc,KACf,IAAMrC,KAAKmC,gBAAiBnC,KAAKoC,kBAC7B,OACJ,MAAME,EAAOC,EAAWvC,KAAKoC,kBAAmBpC,KAAKwC,SAC/CC,EAAmC,OAApBzC,KAAKkC,WAIpBQ,EDpClB,SAAoBf,EAAGC,GAEnB,MAAMe,EAASjB,EAASC,EAAEb,EAAGc,EAAEd,GACzB8B,EAASlB,EAASC,EAAEZ,EAAGa,EAAEb,GAC/B,OAAOc,KAAKgB,KAAKF,GAAU,EAAIC,GAAU,EAC7C,CC+B4CE,CAAWR,EAAKS,OAAQ,CAAEjC,EAAG,EAAGC,EAAG,KAAQ,EAC3E,IAAK0B,IAAiBC,EAClB,OACJ,MAAM,MAAE7B,GAAUyB,GACZ,UAAEU,GAAcC,EAAAA,UACtBjD,KAAKwC,QAAQU,KAAK,IAAKrC,EAAOmC,cAC9B,MAAM,QAAEG,EAAO,OAAEC,GAAWpD,KAAKgC,SAC5BS,IACDU,GAAWA,EAAQnD,KAAKmC,cAAeG,GACvCtC,KAAKkC,WAAalC,KAAKmC,eAE3BiB,GAAUA,EAAOpD,KAAKmC,cAAeG,EAAK,EAE9CtC,KAAKqD,kBAAoB,CAACjD,EAAOkC,KAC7BtC,KAAKmC,cAAgB/B,EACrBJ,KAAKoC,kBAAoBkB,EAAehB,EAAMtC,KAAKiC,oBAEnDsB,EAAAA,GAAMrD,OAAOF,KAAKqC,aAAa,EAAK,EAExCrC,KAAKwD,gBAAkB,CAACpD,EAAOkC,KAE3B,GADAtC,KAAKyD,OACCzD,KAAKmC,gBAAiBnC,KAAKoC,kBAC7B,OACJ,MAAM,MAAEsB,EAAK,aAAEC,GAAiB3D,KAAKgC,SAC/B4B,EAAUrB,EAA0B,kBAAfnC,EAAMyD,KAC3B7D,KAAKoC,kBACLkB,EAAehB,EAAMtC,KAAKiC,oBAAqBjC,KAAKwC,SACtDxC,KAAKkC,YAAcwB,GACnBA,EAAMtD,EAAOwD,GAEjBD,GAAgBA,EAAavD,EAAOwD,EAAQ,GAG3CzD,EAAiBC,GAClB,OACJJ,KAAKgC,SAAWA,EAChBhC,KAAKiC,mBAAqBA,EAC1B,MACM6B,EAAcR,EADP9C,EAAiBJ,GACWJ,KAAKiC,qBACxC,MAAEpB,GAAUiD,GACZ,UAAEd,GAAcC,EAAAA,UACtBjD,KAAKwC,QAAU,CAAC,IAAK3B,EAAOmC,cAC5B,MAAM,eAAEe,GAAmB/B,EAC3B+B,GACIA,EAAe3D,EAAOmC,EAAWuB,EAAa9D,KAAKwC,UACvDxC,KAAKgE,iBAAkBC,EAAAA,EAAAA,GAAKxC,EAAgByC,OAAQ,cAAelE,KAAKqD,mBAAoB5B,EAAgByC,OAAQ,YAAalE,KAAKwD,iBAAkB/B,EAAgByC,OAAQ,gBAAiBlE,KAAKwD,iBAC1M,CACAW,cAAAA,CAAenC,GACXhC,KAAKgC,SAAWA,CACpB,CACAyB,GAAAA,GACIzD,KAAKgE,iBAAmBhE,KAAKgE,mBAC7BI,EAAAA,EAAAA,IAAYpE,KAAKqC,YACrB,EAEJ,SAASiB,EAAehB,EAAML,GAC1B,OAAOA,EAAqB,CAAEpB,MAAOoB,EAAmBK,EAAKzB,QAAWyB,CAC5E,CACA,SAAS+B,EAAc1C,EAAGC,GACtB,MAAO,CAAEd,EAAGa,EAAEb,EAAIc,EAAEd,EAAGC,EAAGY,EAAEZ,EAAIa,EAAEb,EACtC,CACA,SAASwB,EAAU+B,EAAY9B,GAAS,IAApB,MAAE3B,GAAOyD,EACzB,MAAO,CACHzD,QACA0D,MAAOF,EAAcxD,EAAO2D,EAAgBhC,IAC5CO,OAAQsB,EAAcxD,EAAO4D,EAAiBjC,IAC9CkC,SAAUC,EAAYnC,EAAS,IAEvC,CACA,SAASiC,EAAiBjC,GACtB,OAAOA,EAAQ,EACnB,CACA,SAASgC,EAAgBhC,GACrB,OAAOA,EAAQA,EAAQ7B,OAAS,EACpC,CACA,SAASgE,EAAYnC,EAASoC,GAC1B,GAAIpC,EAAQ7B,OAAS,EACjB,MAAO,CAAEG,EAAG,EAAGC,EAAG,GAEtB,IAAI8D,EAAIrC,EAAQ7B,OAAS,EACrBmE,EAAmB,KACvB,MAAMC,EAAYP,EAAgBhC,GAClC,KAAOqC,GAAK,IACRC,EAAmBtC,EAAQqC,KACvBE,EAAU/B,UAAY8B,EAAiB9B,WACvCgC,EAAAA,EAAAA,GAAsBJ,MAG1BC,IAEJ,IAAKC,EACD,MAAO,CAAEhE,EAAG,EAAGC,EAAG,GAEtB,MAAMkE,GAAOC,EAAAA,EAAAA,GAAsBH,EAAU/B,UAAY8B,EAAiB9B,WAC1E,GAAa,IAATiC,EACA,MAAO,CAAEnE,EAAG,EAAGC,EAAG,GAEtB,MAAMoE,EAAkB,CACpBrE,GAAIiE,EAAUjE,EAAIgE,EAAiBhE,GAAKmE,EACxClE,GAAIgE,EAAUhE,EAAI+D,EAAiB/D,GAAKkE,GAQ5C,OANIE,EAAgBrE,IAAMsE,MACtBD,EAAgBrE,EAAI,GAEpBqE,EAAgBpE,IAAMqE,MACtBD,EAAgBpE,EAAI,GAEjBoE,CACX,CCjJA,SAASE,EAAWC,GAChB,IAAIC,EAAO,KACX,MAAO,KACH,MAAMC,EAAWA,KACbD,EAAO,IAAI,EAEf,OAAa,OAATA,IACAA,EAAOD,EACAE,EAEC,CAEpB,CACA,MAAMC,EAAuBJ,EAAW,kBAClCK,EAAqBL,EAAW,gBACtC,SAASM,EAAcC,GACnB,IAAIL,GAAO,EACX,GAAa,MAATK,EACAL,EAAOG,SAEN,GAAa,MAATE,EACLL,EAAOE,QAEN,CACD,MAAMI,EAAiBJ,IACjBK,EAAeJ,IACjBG,GAAkBC,EAClBP,EAAOA,KACHM,IACAC,GAAc,GAKdD,GACAA,IACAC,GACAA,IAEZ,CACA,OAAOP,CACX,CACA,SAASQ,IAGL,MAAMC,EAAkBL,GAAc,GACtC,OAAKK,IAELA,KACO,EACX,C,kCChDA,SAASC,EAAWC,GAChB,OAAOA,EAAKC,IAAMD,EAAKE,GAC3B,CACA,SAASC,EAAOC,GAAuC,IAAhCnF,EAAMT,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,EAAG6F,EAAW7F,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,IAC7C,OAAOmB,KAAKC,IAAIwE,EAAQnF,IAAWoF,CACvC,CACA,SAASC,EAAcjC,EAAOkC,EAAQtF,GAAsB,IAAduF,EAAMhG,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,GACnD6D,EAAMmC,OAASA,EACfnC,EAAMoC,aAAcC,EAAAA,EAAAA,GAAIH,EAAOL,IAAKK,EAAON,IAAK5B,EAAMmC,QACtDnC,EAAMsC,MAAQZ,EAAW9E,GAAU8E,EAAWQ,IAC1CJ,EAAO9B,EAAMsC,MAAO,EAAG,OAAWC,MAAMvC,EAAMsC,UAC9CtC,EAAMsC,MAAQ,GAClBtC,EAAMwC,WACFH,EAAAA,EAAAA,GAAIzF,EAAOiF,IAAKjF,EAAOgF,IAAK5B,EAAMmC,QAAUnC,EAAMoC,aAClDN,EAAO9B,EAAMwC,YAAcD,MAAMvC,EAAMwC,cACvCxC,EAAMwC,UAAY,EAC1B,CACA,SAASC,EAAazC,EAAOkC,EAAQtF,EAAQuF,GACzCF,EAAcjC,EAAMzD,EAAG2F,EAAO3F,EAAGK,EAAOL,EAAG4F,EAASA,EAAOO,aAAUrG,GACrE4F,EAAcjC,EAAMxD,EAAG0F,EAAO1F,EAAGI,EAAOJ,EAAG2F,EAASA,EAAOQ,aAAUtG,EACzE,CACA,SAASuG,EAAiBhG,EAAQiG,EAAUC,GACxClG,EAAOiF,IAAMiB,EAAOjB,IAAMgB,EAAShB,IACnCjF,EAAOgF,IAAMhF,EAAOiF,IAAMH,EAAWmB,EACzC,CAKA,SAASE,EAAyBnG,EAAQoG,EAAQF,GAC9ClG,EAAOiF,IAAMmB,EAAOnB,IAAMiB,EAAOjB,IACjCjF,EAAOgF,IAAMhF,EAAOiF,IAAMH,EAAWsB,EACzC,CACA,SAASC,EAAqBrG,EAAQoG,EAAQF,GAC1CC,EAAyBnG,EAAOL,EAAGyG,EAAOzG,EAAGuG,EAAOvG,GACpDwG,EAAyBnG,EAAOJ,EAAGwG,EAAOxG,EAAGsG,EAAOtG,EACxD,C,cCZA,SAAS0G,EAA4BvB,EAAME,EAAKD,GAC5C,MAAO,CACHC,SAAaxF,IAARwF,EAAoBF,EAAKE,IAAMA,OAAMxF,EAC1CuF,SAAavF,IAARuF,EACCD,EAAKC,IAAMA,GAAOD,EAAKC,IAAMD,EAAKE,UAClCxF,EAEd,CAcA,SAAS8G,EAA4BC,EAAYC,GAC7C,IAAIxB,EAAMwB,EAAgBxB,IAAMuB,EAAWvB,IACvCD,EAAMyB,EAAgBzB,IAAMwB,EAAWxB,IAO3C,OAJIyB,EAAgBzB,IAAMyB,EAAgBxB,IACtCuB,EAAWxB,IAAMwB,EAAWvB,OAC3BA,EAAKD,GAAO,CAACA,EAAKC,IAEhB,CAAEA,MAAKD,MAClB,CAuCA,MAAM0B,EAAiB,IAgBvB,SAASC,EAAmBC,EAAaC,EAAUC,GAC/C,MAAO,CACH7B,IAAK8B,EAAoBH,EAAaC,GACtC7B,IAAK+B,EAAoBH,EAAaE,GAE9C,CACA,SAASC,EAAoBH,EAAaI,GACtC,MAA8B,kBAAhBJ,EACRA,EACAA,EAAYI,IAAU,CAChC,CC1HA,MAMMC,EAAcA,KAAA,CAChBtH,EAPoB,CACpBiG,UAAW,EACXF,MAAO,EACPH,OAAQ,EACRC,YAAa,GAIb5F,EARoB,CACpBgG,UAAW,EACXF,MAAO,EACPH,OAAQ,EACRC,YAAa,KAOX0B,EAAYA,KAAA,CACdvH,EAFe,CAASsF,IAAK,EAAGD,IAAK,GAGrCpF,EAHe,CAASqF,IAAK,EAAGD,IAAK,KCVzC,SAASmC,EAASC,GACd,MAAO,CAACA,EAAS,KAAMA,EAAS,KACpC,CCGA,SAASC,EAAuBlE,GAAgC,IAA/B,IAAEmE,EAAG,KAAEC,EAAI,MAAEC,EAAK,OAAEC,GAAStE,EAC1D,MAAO,CACHxD,EAAG,CAAEsF,IAAKsC,EAAMvC,IAAKwC,GACrB5H,EAAG,CAAEqF,IAAKqC,EAAKtC,IAAKyC,GAE5B,CCVA,SAASC,EAAgBhC,GACrB,YAAiBjG,IAAViG,GAAiC,IAAVA,CAClC,CACA,SAASiC,EAAQxE,GAA4B,IAA3B,MAAEuC,EAAK,OAAEkC,EAAM,OAAEC,GAAQ1E,EACvC,OAASuE,EAAgBhC,KACpBgC,EAAgBE,KAChBF,EAAgBG,EACzB,CACA,SAASC,EAAaC,GAClB,OAAQJ,EAASI,IACbC,EAAeD,IACfA,EAAOE,GACPF,EAAOG,QACPH,EAAOI,SACPJ,EAAOK,OACf,CACA,SAASJ,EAAeD,GACpB,OAAOM,EAAcN,EAAOpI,IAAM0I,EAAcN,EAAOnI,EAC3D,CACA,SAASyI,EAAclD,GACnB,OAAOA,GAAmB,OAAVA,CACpB,CCfA,SAASmD,EAAW5I,EAAOgG,EAAOF,GAG9B,OAAOA,EADQE,GADYhG,EAAQ8F,EAGvC,CAIA,SAAS+C,EAAgB7I,EAAOkG,EAAWF,EAAOF,EAAagD,GAI3D,YAHiB/I,IAAb+I,IACA9I,EAAQ4I,EAAW5I,EAAO8I,EAAUhD,IAEjC8C,EAAW5I,EAAOgG,EAAOF,GAAeI,CACnD,CAIA,SAAS6C,GAAe1D,GAAuD,IAAjDa,EAASrG,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,EAAGmG,EAAKnG,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,EAAGiG,EAAWjG,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAAE+I,EAAQjJ,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EACzEsF,EAAKE,IAAMsD,EAAgBxD,EAAKE,IAAKW,EAAWF,EAAOF,EAAagD,GACpEzD,EAAKC,IAAMuD,EAAgBxD,EAAKC,IAAKY,EAAWF,EAAOF,EAAagD,EACxE,CAIA,SAASE,GAAcC,EAAGxF,GAAY,IAAV,EAAExD,EAAC,EAAEC,GAAGuD,EAChCsF,GAAeE,EAAIhJ,EAAGA,EAAEiG,UAAWjG,EAAE+F,MAAO/F,EAAE6F,aAC9CiD,GAAeE,EAAI/I,EAAGA,EAAEgG,UAAWhG,EAAE8F,MAAO9F,EAAE4F,YAClD,CAuDA,SAASoD,GAAclD,GACnB,OAAImD,OAAOC,UAAUpD,IAEdA,EAAQ,iBAAmBA,EAAQ,cAD/BA,EACwD,CACvE,CACA,SAASqD,GAAchE,EAAMxE,GACzBwE,EAAKE,IAAMF,EAAKE,IAAM1E,EACtBwE,EAAKC,IAAMD,EAAKC,IAAMzE,CAC1B,CAMA,SAASyI,GAAcjE,EAAMkE,EAAUC,GAA8B,IAA3BC,EAAKC,EAAUC,GAAUH,EAC/D,MAAMI,OAAuC7J,IAA1BwJ,EAAWI,GAA2BJ,EAAWI,GAAa,GAC3E7D,GAAcC,EAAAA,EAAAA,GAAIV,EAAKE,IAAKF,EAAKC,IAAKsE,GAE5Cb,GAAe1D,EAAMkE,EAAWE,GAAMF,EAAWG,GAAW5D,EAAayD,EAAWvD,MACxF,CAIA,MAAM6D,GAAQ,CAAC,IAAK,SAAU,WACxBC,GAAQ,CAAC,IAAK,SAAU,WAI9B,SAASC,GAAad,EAAKe,GACvBV,GAAcL,EAAIhJ,EAAG+J,EAAWH,IAChCP,GAAcL,EAAI/I,EAAG8J,EAAWF,GACpC,CCpHA,SAASG,GAAmBC,EAAUzH,GAClC,OAAOkF,EHeX,SAA4B3H,EAAOyC,GAC/B,IAAKA,EACD,OAAOzC,EACX,MAAMmK,EAAU1H,EAAe,CAAExC,EAAGD,EAAM6H,KAAM3H,EAAGF,EAAM4H,MACnDwC,EAAc3H,EAAe,CAAExC,EAAGD,EAAM8H,MAAO5H,EAAGF,EAAM+H,SAC9D,MAAO,CACHH,IAAKuC,EAAQjK,EACb2H,KAAMsC,EAAQlK,EACd8H,OAAQqC,EAAYlK,EACpB4H,MAAOsC,EAAYnK,EAE3B,CG1BmCoK,CAAmBH,EAASI,wBAAyB7H,GACxF,C,0BCaA,MAAM8H,GAAsB,IAAIC,QAKhC,MAAMC,GACFxL,WAAAA,CAAYyL,GAIRvL,KAAKwL,eAAiB,KACtBxL,KAAKyL,YAAa,EAClBzL,KAAK0L,iBAAmB,KACxB1L,KAAK2G,YAAc,CAAE7F,EAAG,EAAGC,EAAG,GAI9Bf,KAAK2L,aAAc,EACnB3L,KAAK4L,uBAAwB,EAI7B5L,KAAK6L,QAAUxD,IACfrI,KAAKuL,cAAgBA,CACzB,CACAO,KAAAA,CAAMC,GAA4C,IAA/B,aAAEC,GAAe,GAAOtL,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,CAAC,EAI3C,MAAM,gBAAEuL,GAAoBjM,KAAKuL,cACjC,GAAIU,IAAiD,IAA9BA,EAAgBC,UACnC,OAuFJlM,KAAKmM,WAAa,IAAIpK,EAAWgK,EAAa,CAC1ChI,eAvFoB3D,IAGpBJ,KAAKoM,gBACDJ,GACAhM,KAAKgM,aAAaxL,EAAiBJ,EAAO,QAAQS,MACtD,EAkFAsC,QAhFYA,CAAC/C,EAAOkC,KAEpB,MAAM,KAAEsD,EAAI,gBAAEyG,EAAe,YAAEC,GAAgBtM,KAAKuM,WACpD,GAAI3G,IAASyG,IACLrM,KAAKwL,gBACLxL,KAAKwL,iBACTxL,KAAKwL,eAAiB7F,EAAcC,IAE/B5F,KAAKwL,gBACN,OAERxL,KAAKyL,YAAa,EAClBzL,KAAK0L,iBAAmB,KACxB1L,KAAKwM,qBACDxM,KAAKuL,cAAckB,aACnBzM,KAAKuL,cAAckB,WAAWC,oBAAqB,EACnD1M,KAAKuL,cAAckB,WAAWtL,YAASP,GAK3C0H,GAAUpC,IACN,IAAIyG,EAAU3M,KAAK4M,mBAAmB1G,GAAM2G,OAAS,EAIrD,GAAIC,GAAAA,GAAQC,KAAKJ,GAAU,CACvB,MAAM,WAAEF,GAAezM,KAAKuL,cAC5B,GAAIkB,GAAcA,EAAWlF,OAAQ,CACjC,MAAMyF,EAAeP,EAAWlF,OAAO0F,UAAU/G,GACjD,GAAI8G,EAAc,CAEdL,EADe1G,EAAW+G,IACNE,WAAWP,GAAW,IAC9C,CACJ,CACJ,CACA3M,KAAK2G,YAAYT,GAAQyG,CAAO,IAGhCL,GACA/I,EAAAA,GAAMrD,QAAO,IAAMoM,EAAYlM,EAAOkC,KAAO,GAAO,GAExD,MAAM,eAAE6K,GAAmBnN,KAAKuL,cAChC4B,GAAkBA,EAAeC,UAAU,aAAa,EAAK,EAsC7DhK,OApCWA,CAAChD,EAAOkC,KAEnB,MAAM,gBAAE+J,EAAe,kBAAEgB,EAAiB,gBAAEC,EAAe,OAAEC,GAAYvN,KAAKuM,WAE9E,IAAKF,IAAoBrM,KAAKwL,eAC1B,OACJ,MAAM,OAAEzI,GAAWT,EAEnB,GAAI+K,GAA+C,OAA1BrN,KAAK0L,iBAM1B,OALA1L,KAAK0L,iBA6UrB,SAA6B3I,GAA4B,IAApByK,EAAa9M,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,GAC7C+M,EAAY,KACZ5L,KAAKC,IAAIiB,EAAOhC,GAAKyM,EACrBC,EAAY,IAEP5L,KAAKC,IAAIiB,EAAOjC,GAAK0M,IAC1BC,EAAY,KAEhB,OAAOA,CACX,CAtVwCC,CAAoB3K,QAEd,OAA1B/C,KAAK0L,kBACL4B,GAAmBA,EAAgBtN,KAAK0L,mBAKhD1L,KAAK2N,WAAW,IAAKrL,EAAKzB,MAAOkC,GACjC/C,KAAK2N,WAAW,IAAKrL,EAAKzB,MAAOkC,GAOjC/C,KAAKuL,cAAcqC,SAKnBL,GAAUA,EAAOnN,EAAOkC,EAAK,EAO7BqB,aALiBA,CAACvD,EAAOkC,IAAStC,KAAK6N,KAAKzN,EAAOkC,IAMpD,CAAEL,mBAAoBjC,KAAKuL,cAAcuC,yBAChD,CACAD,IAAAA,CAAKzN,EAAOkC,GACR,MAAMmJ,EAAazL,KAAKyL,WAExB,GADAzL,KAAK+N,UACAtC,EACD,OACJ,MAAM,SAAE/G,GAAapC,EACrBtC,KAAKgO,eAAetJ,GACpB,MAAM,UAAEuJ,GAAcjO,KAAKuM,WACvB0B,GACA1K,EAAAA,GAAMrD,QAAO,IAAM+N,EAAU7N,EAAOkC,IAE5C,CACAyL,MAAAA,GACI/N,KAAKyL,YAAa,EAClB,MAAM,WAAEgB,EAAU,eAAEU,GAAmBnN,KAAKuL,cACxCkB,IACAA,EAAWC,oBAAqB,GAEpC1M,KAAKmM,YAAcnM,KAAKmM,WAAW1I,MACnCzD,KAAKmM,gBAAavL,EAClB,MAAM,gBAAEyL,GAAoBrM,KAAKuM,YAC5BF,GAAmBrM,KAAKwL,iBACzBxL,KAAKwL,iBACLxL,KAAKwL,eAAiB,MAE1B2B,GAAkBA,EAAeC,UAAU,aAAa,EAC5D,CACAO,UAAAA,CAAWzH,EAAMgI,EAAQnL,GACrB,MAAM,KAAE6C,GAAS5F,KAAKuM,WAEtB,IAAKxJ,IAAWoL,GAAWjI,EAAMN,EAAM5F,KAAK0L,kBACxC,OACJ,MAAM0C,EAAYpO,KAAK4M,mBAAmB1G,GAC1C,IAAImI,EAAOrO,KAAK2G,YAAYT,GAAQnD,EAAOmD,GAEvClG,KAAK2L,aAAe3L,KAAK2L,YAAYzF,KACrCmI,EPzKZ,SAA0BxN,EAAKyD,EAAgBuH,GAAS,IAAvB,IAAEzF,EAAG,IAAED,GAAK7B,EASzC,YARY1D,IAARwF,GAAqBvF,EAAQuF,EAE7BvF,EAAQgL,GAAUjF,EAAAA,EAAAA,GAAIR,EAAKvF,EAAOgL,EAAQzF,KAAOvE,KAAKsE,IAAItF,EAAOuF,QAEpDxF,IAARuF,GAAqBtF,EAAQsF,IAElCtF,EAAQgL,GAAUjF,EAAAA,EAAAA,GAAIT,EAAKtF,EAAOgL,EAAQ1F,KAAOtE,KAAKuE,IAAIvF,EAAOsF,IAE9DtF,CACX,CO+JmByN,CAAiBD,EAAMrO,KAAK2L,YAAYzF,GAAOlG,KAAK6L,QAAQ3F,KAEvEkI,EAAUG,IAAIF,EAClB,CACA7B,kBAAAA,GACI,MAAM,gBAAEgC,EAAe,YAAEzG,GAAgB/H,KAAKuM,YACxC,OAAEhF,GAAWvH,KAAKuL,cAAckB,YAAc,CAAC,EAC/CgC,EAAkBzO,KAAK2L,YACzB6C,IAAmBE,EAAAA,EAAAA,GAAYF,GAC1BxO,KAAK2L,cACN3L,KAAK2L,YAAc3L,KAAK2O,yBAKxB3O,KAAK2L,eADL6C,IAAmBjH,IP3JnC,SAAiC0F,EAAS5C,GAAgC,IAA9B,IAAE5B,EAAG,KAAEC,EAAI,OAAEE,EAAM,MAAED,GAAO0B,EACpE,MAAO,CACHvJ,EAAG2G,EAA4BwF,EAAUnM,EAAG4H,EAAMC,GAClD5H,EAAG0G,EAA4BwF,EAAUlM,EAAG0H,EAAKG,GAEzD,COuJmCgG,CAAwBrH,EAAO0F,UAAWuB,GAMrExO,KAAK6L,QPpGb,WAA0D,IAA9B9D,EAAWrH,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAGmH,EAOtC,OANoB,IAAhBE,EACAA,EAAc,GAEO,IAAhBA,IACLA,EAAcF,GAEX,CACH/G,EAAGgH,EAAmBC,EAAa,OAAQ,SAC3ChH,EAAG+G,EAAmBC,EAAa,MAAO,UAElD,COyFuB8G,CAAmB9G,GAK9B0G,IAAoBzO,KAAK2L,aACzBpE,GACAvH,KAAK2L,cACJ3L,KAAK4L,uBACNtD,GAAUpC,IACFlG,KAAK4M,mBAAmB1G,KACxBlG,KAAK2L,YAAYzF,GP7HrC,SAA+BqB,EAAQoE,GACnC,MAAMmD,EAAsB,CAAC,EAO7B,YANwBlO,IAApB+K,EAAYvF,MACZ0I,EAAoB1I,IAAMuF,EAAYvF,IAAMmB,EAAOnB,UAE/BxF,IAApB+K,EAAYxF,MACZ2I,EAAoB3I,IAAMwF,EAAYxF,IAAMoB,EAAOnB,KAEhD0I,CACX,COoH6CC,CAAsBxH,EAAO0F,UAAU/G,GAAOlG,KAAK2L,YAAYzF,IAC5F,GAGZ,CACAyI,qBAAAA,GACI,MAAQH,gBAAiB7C,EAAW,yBAAEqD,GAA6BhP,KAAKuM,WACxE,IAAKZ,KAAgB+C,EAAAA,EAAAA,GAAY/C,GAC7B,OAAO,EACX,MAAMsD,EAAqBtD,EAAYgB,SACvCuC,EAAAA,EAAAA,GAAiC,OAAvBD,EAA6B,0GACvC,MAAM,WAAExC,GAAezM,KAAKuL,cAE5B,IAAKkB,IAAeA,EAAWlF,OAC3B,OAAO,EACX,MAAM4H,ED5Nd,SAAwBC,EAASC,EAAoBpN,GACjD,MAAMqN,EAAcxE,GAAmBsE,EAASnN,IAC1C,OAAEsN,GAAWF,EAKnB,OAJIE,IACArF,GAAcoF,EAAYxO,EAAGyO,EAAOxM,OAAOjC,GAC3CoJ,GAAcoF,EAAYvO,EAAGwO,EAAOxM,OAAOhC,IAExCuO,CACX,CCoN+BE,CAAeP,EAAoBxC,EAAWgD,KAAMzP,KAAKuL,cAAcuC,yBAC9F,IAAI4B,EPtKZ,SAAiCzC,EAAWkC,GACxC,MAAO,CACHrO,EAAG4G,EAA4BuF,EAAUnM,EAAGqO,EAAerO,GAC3DC,EAAG2G,EAA4BuF,EAAUlM,EAAGoO,EAAepO,GAEnE,COiKkC4O,CAAwBlD,EAAWlF,OAAO0F,UAAWkC,GAK/E,GAAIH,EAA0B,CAC1B,MAAMY,EAAkBZ,EJ9NpC,SAAgC3E,GAAW,IAAV,EAAEvJ,EAAC,EAAEC,GAAGsJ,EACrC,MAAO,CAAE5B,IAAK1H,EAAEqF,IAAKuC,MAAO7H,EAAEqF,IAAKyC,OAAQ7H,EAAEoF,IAAKuC,KAAM5H,EAAEsF,IAC9D,CI4N6DyJ,CAAwBH,IACzE1P,KAAK4L,wBAA0BgE,EAC3BA,IACAF,EAAsBlH,EAAwBoH,GAEtD,CACA,OAAOF,CACX,CACA1B,cAAAA,CAAetJ,GACX,MAAM,KAAEkB,EAAI,aAAEkK,EAAY,YAAE/H,EAAW,eAAEgI,EAAc,iBAAEC,EAAgB,oBAAEC,GAAyBjQ,KAAKuM,WACnGZ,EAAc3L,KAAK2L,aAAe,CAAC,EACnCuE,EAAqB5H,GAAUpC,IACjC,IAAKiI,GAAWjI,EAAMN,EAAM5F,KAAK0L,kBAC7B,OAEJ,IAAIyE,EAAcxE,GAAeA,EAAYzF,IAAU,CAAC,EACpD8J,IACAG,EAAa,CAAE/J,IAAK,EAAGD,IAAK,IAOhC,MAAMiK,EAAkBrI,EAAc,IAAM,IACtCsI,EAAgBtI,EAAc,GAAK,IACnCuI,EAAU,CACZzM,KAAM,UACNa,SAAUoL,EAAepL,EAASwB,GAAQ,EAC1CkK,kBACAC,gBACAE,aAAc,IACdC,UAAW,EACXC,UAAW,MACRV,KACAI,GAKP,OAAOnQ,KAAK0Q,wBAAwBxK,EAAMoK,EAAQ,IAGtD,OAAOK,QAAQC,IAAIV,GAAoBW,KAAKZ,EAChD,CACAS,uBAAAA,CAAwBxK,EAAMiK,GAC1B,MAAM/B,EAAYpO,KAAK4M,mBAAmB1G,GAC1C,OAAOkI,EAAUtC,OAAMgF,EAAAA,GAAAA,GAAmB5K,EAAMkI,EAAW,EAAG+B,GAClE,CACA/D,aAAAA,GACI9D,GAAUpC,GAASlG,KAAK4M,mBAAmB1G,GAAM2H,QACrD,CAOAjB,kBAAAA,CAAmB1G,GACf,MAAM6K,EAAU,QAAU7K,EAAK8K,cACzBC,EAAQjR,KAAKuL,cAAcgB,WAC3B2E,EAAsBD,EAAMF,GAClC,OAAOG,GAEDlR,KAAKuL,cAAc4F,SAASjL,GAAO+K,EAAMG,QAAUH,EAAMG,QAAQlL,QAAQtF,IAAc,EACjG,CACAoL,YAAAA,CAAanL,GACTyH,GAAUpC,IACN,MAAM,KAAEN,GAAS5F,KAAKuM,WAEtB,IAAK4B,GAAWjI,EAAMN,EAAM5F,KAAK0L,kBAC7B,OACJ,MAAM,WAAEe,GAAezM,KAAKuL,cACtB6C,EAAYpO,KAAK4M,mBAAmB1G,GAC1C,GAAIuG,GAAcA,EAAWlF,OAAQ,CACjC,MAAM,IAAEnB,EAAG,IAAED,GAAQsG,EAAWlF,OAAO0F,UAAU/G,GACjDkI,EAAUG,IAAI1N,EAAMqF,IAAQU,EAAAA,EAAAA,GAAIR,EAAKD,EAAK,IAC9C,IAER,CAMAkL,8BAAAA,GACI,IAAKrR,KAAKuL,cAAcoB,QACpB,OACJ,MAAM,KAAE/G,EAAI,gBAAE4I,GAAoBxO,KAAKuM,YACjC,WAAEE,GAAezM,KAAKuL,cAC5B,KAAKmD,EAAAA,EAAAA,GAAYF,KAAqB/B,IAAezM,KAAK2L,YACtD,OAKJ3L,KAAKoM,gBAKL,MAAMkF,EAAc,CAAExQ,EAAG,EAAGC,EAAG,GAC/BuH,GAAUpC,IACN,MAAMkI,EAAYpO,KAAK4M,mBAAmB1G,GAC1C,GAAIkI,EAAW,CACX,MAAMmD,EAASnD,EAAUvB,MACzByE,EAAYpL,GP5Q5B,SAAoBO,EAAQtF,GACxB,IAAIuF,EAAS,GACb,MAAM8K,EAAevL,EAAWQ,GAC1BgL,EAAexL,EAAW9E,GAOhC,OANIsQ,EAAeD,EACf9K,GAASgL,EAAAA,EAAAA,GAASvQ,EAAOiF,IAAKjF,EAAOgF,IAAMqL,EAAc/K,EAAOL,KAE3DoL,EAAeC,IACpB/K,GAASgL,EAAAA,EAAAA,GAASjL,EAAOL,IAAKK,EAAON,IAAMsL,EAActQ,EAAOiF,OAE7DuL,EAAAA,EAAAA,GAAM,EAAG,EAAGjL,EACvB,COiQoCkL,CAAW,CAAExL,IAAKmL,EAAQpL,IAAKoL,GAAUvR,KAAK2L,YAAYzF,GAClF,KAKJ,MAAM,kBAAE2L,GAAsB7R,KAAKuL,cAAcgB,WACjDvM,KAAKuL,cAAcoB,QAAQmF,MAAMjH,UAAYgH,EACvCA,EAAkB,CAAC,EAAG,IACtB,OACNpF,EAAWgD,MAAQhD,EAAWgD,KAAKsC,eACnCtF,EAAWuF,eACXhS,KAAKwM,qBAKLlE,GAAUpC,IACN,IAAKiI,GAAWjI,EAAMN,EAAM,MACxB,OAIJ,MAAMwI,EAAYpO,KAAK4M,mBAAmB1G,IACpC,IAAEE,EAAG,IAAED,GAAQnG,KAAK2L,YAAYzF,GACtCkI,EAAUG,KAAI3H,EAAAA,EAAAA,GAAIR,EAAKD,EAAKmL,EAAYpL,IAAO,GAEvD,CACA+L,YAAAA,GACI,IAAKjS,KAAKuL,cAAcoB,QACpB,OACJvB,GAAoBmD,IAAIvO,KAAKuL,cAAevL,MAC5C,MAIMkS,EAAsBzQ,EAJZzB,KAAKuL,cAAcoB,QAIkB,eAAgBvM,IACjE,MAAM,KAAEwF,EAAI,aAAEuM,GAAe,GAASnS,KAAKuM,WAC3C3G,GAAQuM,GAAgBnS,KAAK8L,MAAM1L,EAAM,IAEvCgS,EAAyBA,KAC3B,MAAM,gBAAE5D,GAAoBxO,KAAKuM,YAC7BmC,EAAAA,EAAAA,GAAYF,KACZxO,KAAK2L,YAAc3L,KAAK2O,wBAC5B,GAEE,WAAElC,GAAezM,KAAKuL,cACtB8G,EAA4B5F,EAAWlL,iBAAiB,UAAW6Q,GACrE3F,IAAeA,EAAWlF,SAC1BkF,EAAWgD,MAAQhD,EAAWgD,KAAKsC,eACnCtF,EAAWuF,gBAEfI,IAKA,MAAME,EAAqBpR,EAAYgD,OAAQ,UAAU,IAAMlE,KAAKqR,mCAK9DkB,EAA2B9F,EAAWlL,iBAAiB,aAAc+C,IAAiC,IAAhC,MAAEC,EAAK,iBAAEiO,GAAkBlO,EAC/FtE,KAAKyL,YAAc+G,IACnBlK,GAAUpC,IACN,MAAMuM,EAAczS,KAAK4M,mBAAmB1G,GACvCuM,IAELzS,KAAK2G,YAAYT,IAAS3B,EAAM2B,GAAMa,UACtC0L,EAAYlE,IAAIkE,EAAY5F,MAAQtI,EAAM2B,GAAMa,WAAU,IAE9D/G,KAAKuL,cAAcqC,SACvB,IAEJ,MAAO,KACH0E,IACAJ,IACAG,IACAE,GAA4BA,GAA0B,CAE9D,CACAhG,QAAAA,GACI,MAAM0E,EAAQjR,KAAKuL,cAAcgB,YAC3B,KAAE3G,GAAO,EAAK,kBAAEyH,GAAoB,EAAK,gBAAEhB,GAAkB,EAAK,gBAAEmC,GAAkB,EAAK,YAAEzG,EAAcF,EAAc,aAAEiI,GAAe,GAAUmB,EAC1J,MAAO,IACAA,EACHrL,OACAyH,oBACAhB,kBACAmC,kBACAzG,cACA+H,eAER,EAEJ,SAAS3B,GAAWV,EAAW7H,EAAM8F,GACjC,QAAkB,IAAT9F,GAAiBA,IAAS6H,KACT,OAArB/B,GAA6BA,IAAqB+B,EAC3D,CC/aA,MAAMiF,GAAgBzR,GAAY,CAACb,EAAOkC,KAClCrB,GACAsC,EAAAA,GAAMrD,QAAO,IAAMe,EAAQb,EAAOkC,IACtC,E,mDCJJ,MAAMqQ,GAAwB,CAK1BC,wBAAwB,EAKxBC,gBAAgB,GCbpB,SAASC,GAAgBC,EAAQ7M,GAC7B,OAAIA,EAAKC,MAAQD,EAAKE,IACX,EACH2M,GAAU7M,EAAKC,IAAMD,EAAKE,KAAQ,GAC9C,CAQA,MAAM4M,GAAsB,CACxBC,QAASA,CAAC1B,EAAQxR,KACd,IAAKA,EAAKoB,OACN,OAAOoQ,EAKX,GAAsB,kBAAXA,EAAqB,CAC5B,IAAI2B,GAAAA,GAAGnG,KAAKwE,GAIR,OAAOA,EAHPA,EAASrE,WAAWqE,EAK5B,CAOA,MAAQ,GAFEuB,GAAgBvB,EAAQxR,EAAKoB,OAAOL,OACpCgS,GAAgBvB,EAAQxR,EAAKoB,OAAOJ,KAC1B,G,eCjC5B,MAAMoS,GAAmB,CACrBF,QAASA,CAAC1B,EAAMjN,KAAqC,IAAnC,UAAE8O,EAAS,gBAAEC,GAAiB/O,EAC5C,MAAMgP,EAAW/B,EACXgC,EAASC,GAAAA,EAAQC,MAAMlC,GAE7B,GAAIgC,EAAO5S,OAAS,EAChB,OAAO2S,EACX,MAAMI,EAAWF,GAAAA,EAAQG,kBAAkBpC,GACrCxO,EAA8B,kBAAdwQ,EAAO,GAAkB,EAAI,EAE7CK,EAASP,EAAgBvS,EAAE+F,MAAQuM,EAAUtS,EAC7C+S,EAASR,EAAgBtS,EAAE8F,MAAQuM,EAAUrS,EACnDwS,EAAO,EAAIxQ,IAAW6Q,EACtBL,EAAO,EAAIxQ,IAAW8Q,EAOtB,MAAMC,GAAelN,EAAAA,EAAAA,GAAIgN,EAAQC,EAAQ,IAOzC,MALkC,kBAAvBN,EAAO,EAAIxQ,KAClBwQ,EAAO,EAAIxQ,IAAW+Q,GAEQ,kBAAvBP,EAAO,EAAIxQ,KAClBwQ,EAAO,EAAIxQ,IAAW+Q,GACnBJ,EAASH,EAAO,G,eCpB/B,MAAMQ,WAAiCC,GAAAA,UAMnCC,iBAAAA,GACI,MAAM,cAAE1I,EAAa,YAAE2I,EAAW,kBAAEC,EAAiB,SAAEC,GAAapU,KAAKiR,OACnE,WAAExE,GAAelB,GACvB8I,EAAAA,GAAAA,GAAkBC,IACd7H,IACIyH,EAAYK,OACZL,EAAYK,MAAMC,IAAI/H,GACtB0H,GAAqBA,EAAkBM,UAAYL,GACnDD,EAAkBM,SAAShI,GAE/BA,EAAWgD,KAAKiF,YAChBjI,EAAWlL,iBAAiB,qBAAqB,KAC7CvB,KAAK2U,cAAc,IAEvBlI,EAAWmI,WAAW,IACfnI,EAAWpL,QACdwT,eAAgBA,IAAM7U,KAAK2U,kBAGnChC,GAAsBE,gBAAiB,CAC3C,CACAiC,uBAAAA,CAAwBC,GACpB,MAAM,iBAAEC,EAAgB,cAAEzJ,EAAa,KAAE3F,EAAI,UAAEsG,GAAclM,KAAKiR,MAC5DxE,EAAalB,EAAckB,WACjC,OAAKA,GASLA,EAAWP,UAAYA,EACnBtG,GACAmP,EAAUC,mBAAqBA,QACVpU,IAArBoU,EACAvI,EAAWwI,aAGXjV,KAAK2U,eAELI,EAAU7I,YAAcA,IACpBA,EACAO,EAAWyI,UAELzI,EAAW0I,YAMjB5R,EAAAA,GAAM6R,YAAW,KACb,MAAMC,EAAQ5I,EAAW6I,WACpBD,GAAUA,EAAME,QAAQ5U,QACzBX,KAAK2U,cACT,KAIL,MAnCI,IAoCf,CACAa,kBAAAA,GACI,MAAM,WAAE/I,GAAezM,KAAKiR,MAAM1F,cAC9BkB,IACAA,EAAWgD,KAAKiF,YAChBe,gBAAe,MACNhJ,EAAWiJ,kBAAoBjJ,EAAWkJ,UAC3C3V,KAAK2U,cACT,IAGZ,CACAiB,oBAAAA,GACI,MAAM,cAAErK,EAAa,YAAE2I,EAAaC,kBAAmB0B,GAAoB7V,KAAKiR,OAC1E,WAAExE,GAAelB,EACnBkB,IACAA,EAAWqJ,4BACP5B,GAAeA,EAAYK,OAC3BL,EAAYK,MAAMwB,OAAOtJ,GACzBoJ,GAAkBA,EAAeG,YACjCH,EAAeG,WAAWvJ,GAEtC,CACAkI,YAAAA,GACI,MAAM,aAAEA,GAAiB3U,KAAKiR,MAC9B0D,GAAgBA,GACpB,CACA/G,MAAAA,GACI,OAAO,IACX,EAEJ,SAASqI,GAAchF,GACnB,MAAO/E,EAAWyI,GCnFtB,WACI,MAAMuB,GAAUC,EAAAA,GAAAA,YAAWC,GAAAA,GAC3B,GAAgB,OAAZF,EACA,MAAO,EAAC,EAAM,MAClB,MAAM,UAAEhK,EAAS,eAAE2I,EAAc,SAAEJ,GAAayB,EAG1CG,GAAKC,EAAAA,GAAAA,SAGX,OAFAC,EAAAA,GAAAA,YAAU,IAAM9B,EAAS4B,IAAK,KAEtBnK,GAAa2I,EAAiB,EAAC,EADlBF,IAAME,GAAkBA,EAAewB,IACE,EAAC,EACnE,CDwEsCG,GAC5BtC,GAAciC,EAAAA,GAAAA,YAAWM,GAAAA,GAC/B,OAAQzC,GAAAA,cAA6BD,GAA0B,IAAK9C,EAAOiD,YAAaA,EAAaC,mBAAmBgC,EAAAA,GAAAA,YAAWO,GAAAA,GAA2BxK,UAAWA,EAAWyI,aAAcA,GACtM,CACA,MAAML,GAAyB,CAC3BqC,aAAc,IACP3D,GACH4D,QAAS,CACL,sBACA,uBACA,yBACA,4BAGRC,oBAAqB7D,GACrB8D,qBAAsB9D,GACtB+D,uBAAwB/D,GACxBgE,wBAAyBhE,GACzBiE,UAAW9D,I,yBEzHf,MAAM+D,GAAU,CAAC,UAAW,WAAY,aAAc,eAChDC,GAAaD,GAAQvW,OACrByW,GAAY9Q,GAA2B,kBAAVA,EAAqB4G,WAAW5G,GAASA,EACtE+Q,GAAQ/Q,GAA2B,kBAAVA,GAAsB4M,GAAAA,GAAGnG,KAAKzG,GA0C7D,SAASgR,GAAUpO,EAAQqO,GACvB,YAA8B3W,IAAvBsI,EAAOqO,GACRrO,EAAOqO,GACPrO,EAAOyN,YACjB,CAwBA,MAAMa,GAAkBC,GAAS,EAAG,GAAKC,GAAAA,IACnCC,GAAmBF,GAAS,GAAK,IAAMG,EAAAA,GAC7C,SAASH,GAASrR,EAAKD,EAAK0R,GACxB,OAAQC,GAEAA,EAAI1R,EACG,EACP0R,EAAI3R,EACG,EACJ0R,GAAOnG,EAAAA,EAAAA,GAAStL,EAAKD,EAAK2R,GAEzC,CCrFA,SAASC,GAAa7R,EAAM8R,GACxB9R,EAAKE,IAAM4R,EAAW5R,IACtBF,EAAKC,IAAM6R,EAAW7R,GAC1B,CAMA,SAAS8R,GAAYnO,EAAKoO,GACtBH,GAAajO,EAAIhJ,EAAGoX,EAAUpX,GAC9BiX,GAAajO,EAAI/I,EAAGmX,EAAUnX,EAClC,CCVA,SAASoX,GAAiBtX,EAAOkG,EAAWF,EAAOF,EAAagD,GAM5D,OAJA9I,EAAQ4I,EADR5I,GAASkG,EACiB,EAAIF,EAAOF,QACpB/F,IAAb+I,IACA9I,EAAQ4I,EAAW5I,EAAO,EAAI8I,EAAUhD,IAErC9F,CACX,CAsBA,SAASuX,GAAqBlS,EAAMkE,EAAU9F,EAA8BoC,EAAQ2R,GAAY,IAA/C/N,EAAKC,EAAUC,GAAUlG,GAlB1E,SAAyB4B,GAA8F,IAAxFa,EAASrG,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,EAAGmG,EAAKnG,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,EAAGgG,EAAMhG,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,GAAKiJ,EAAQjJ,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAAEoX,EAAUtX,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAGwF,EAAMmS,EAAU3X,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAGwF,EACzG4G,GAAAA,GAAQC,KAAKhG,KACbA,EAAYmG,WAAWnG,GAEvBA,GADyBH,EAAAA,EAAAA,GAAIyR,EAAWjS,IAAKiS,EAAWlS,IAAKY,EAAY,KAC1CsR,EAAWjS,KAE9C,GAAyB,kBAAdW,EACP,OACJ,IAAIJ,GAAcC,EAAAA,EAAAA,GAAIoR,EAAW5R,IAAK4R,EAAW7R,IAAKO,GAClDR,IAAS8R,IACTrR,GAAeI,GACnBb,EAAKE,IAAM+R,GAAiBjS,EAAKE,IAAKW,EAAWF,EAAOF,EAAagD,GACrEzD,EAAKC,IAAMgS,GAAiBjS,EAAKC,IAAKY,EAAWF,EAAOF,EAAagD,EACzE,CAMI2O,CAAgBpS,EAAMkE,EAAWE,GAAMF,EAAWG,GAAWH,EAAWI,GAAYJ,EAAWvD,MAAOH,EAAQ2R,EAClH,CAIA,MAAM3N,GAAQ,CAAC,IAAK,SAAU,WACxBC,GAAQ,CAAC,IAAK,SAAU,WAK9B,SAAS4N,GAAoBzO,EAAKM,EAAY8N,EAAWM,GACrDJ,GAAqBtO,EAAIhJ,EAAGsJ,EAAYM,GAAOwN,EAAYA,EAAUpX,OAAIF,EAAW4X,EAAYA,EAAU1X,OAAIF,GAC9GwX,GAAqBtO,EAAI/I,EAAGqJ,EAAYO,GAAOuN,EAAYA,EAAUnX,OAAIH,EAAW4X,EAAYA,EAAUzX,OAAIH,EAClH,C,eCjDA,SAAS6X,GAAgBlU,GACrB,OAA2B,IAApBA,EAAMwC,WAAmC,IAAhBxC,EAAMsC,KAC1C,CACA,SAAS6R,GAAYnU,GACjB,OAAOkU,GAAgBlU,EAAMzD,IAAM2X,GAAgBlU,EAAMxD,EAC7D,CAOA,SAAS4X,GAAiBhX,EAAGC,GACzB,OAAQC,KAAK+W,MAAMjX,EAAEb,EAAEsF,OAASvE,KAAK+W,MAAMhX,EAAEd,EAAEsF,MAC3CvE,KAAK+W,MAAMjX,EAAEb,EAAEqF,OAAStE,KAAK+W,MAAMhX,EAAEd,EAAEqF,MACvCtE,KAAK+W,MAAMjX,EAAEZ,EAAEqF,OAASvE,KAAK+W,MAAMhX,EAAEb,EAAEqF,MACvCvE,KAAK+W,MAAMjX,EAAEZ,EAAEoF,OAAStE,KAAK+W,MAAMhX,EAAEb,EAAEoF,IAC/C,CACA,SAAS0S,GAAY/O,GACjB,OAAO7D,EAAW6D,EAAIhJ,GAAKmF,EAAW6D,EAAI/I,EAC9C,C,eCpBA,MAAM+X,GACFhZ,WAAAA,GACIE,KAAKuV,QAAU,EACnB,CACAf,GAAAA,CAAIzU,IACAgZ,EAAAA,GAAAA,IAAc/Y,KAAKuV,QAASxV,GAC5BA,EAAKiZ,gBACT,CACAjD,MAAAA,CAAOhW,GAKH,IAJAkZ,EAAAA,GAAAA,IAAWjZ,KAAKuV,QAASxV,GACrBA,IAASC,KAAKkZ,WACdlZ,KAAKkZ,cAAWtY,GAEhBb,IAASC,KAAKmZ,KAAM,CACpB,MAAMD,EAAWlZ,KAAKuV,QAAQvV,KAAKuV,QAAQ5U,OAAS,GAChDuY,GACAlZ,KAAKkV,QAAQgE,EAErB,CACJ,CACA/D,QAAAA,CAASpV,GACL,MAAMqZ,EAAcpZ,KAAKuV,QAAQ8D,WAAWC,GAAWvZ,IAASuZ,IAChE,GAAoB,IAAhBF,EACA,OAAO,EAIX,IAAIF,EACJ,IAAK,IAAIrU,EAAIuU,EAAavU,GAAK,EAAGA,IAAK,CACnC,MAAMyU,EAAStZ,KAAKuV,QAAQ1Q,GAC5B,IAAyB,IAArByU,EAAOpN,UAAqB,CAC5BgN,EAAWI,EACX,KACJ,CACJ,CACA,QAAIJ,IACAlZ,KAAKkV,QAAQgE,IACN,EAKf,CACAhE,OAAAA,CAAQnV,EAAMwZ,GACV,MAAML,EAAWlZ,KAAKmZ,KACtB,GAAIpZ,IAASmZ,IAEblZ,KAAKkZ,SAAWA,EAChBlZ,KAAKmZ,KAAOpZ,EACZA,EAAKyZ,OACDN,GAAU,CACVA,EAASnO,UAAYmO,EAASF,iBAC9BjZ,EAAKiZ,iBACLjZ,EAAK0Z,WAAaP,EACdK,IACAxZ,EAAK0Z,WAAWC,iBAAkB,GAElCR,EAASS,WACT5Z,EAAK4Z,SAAWT,EAASS,SACzB5Z,EAAK4Z,SAASC,aACVV,EAASW,iBAAmBX,EAASU,cAEzC7Z,EAAK0P,MAAQ1P,EAAK0P,KAAKqK,aACvB/Z,EAAKga,eAAgB,GAEzB,MAAM,UAAEC,GAAcja,EAAKsB,SACT,IAAd2Y,GACAd,EAASe,MAcjB,CACJ,CACAC,qBAAAA,GACIla,KAAKuV,QAAQ4E,SAASpa,IAClB,MAAM,QAAEsB,EAAO,aAAE+Y,GAAiBra,EAClCsB,EAAQwT,gBAAkBxT,EAAQwT,iBAC9BuF,GACAA,EAAa/Y,QAAQwT,gBACjBuF,EAAa/Y,QAAQwT,gBAC7B,GAER,CACAmE,cAAAA,GACIhZ,KAAKuV,QAAQ4E,SAASpa,IAClBA,EAAKgL,UAAYhL,EAAKiZ,gBAAe,EAAM,GAEnD,CAKAqB,kBAAAA,GACQra,KAAKmZ,MAAQnZ,KAAKmZ,KAAKQ,WACvB3Z,KAAKmZ,KAAKQ,cAAW/Y,EAE7B,EC5GJ,SAAS0Z,GAAyB/V,EAAO6O,EAAWmH,GAChD,IAAI1P,EAAY,GAOhB,MAAM2P,EAAajW,EAAMzD,EAAEiG,UAAYqM,EAAUtS,EAC3C2Z,EAAalW,EAAMxD,EAAEgG,UAAYqM,EAAUrS,EAWjD,IAVIyZ,GAAcC,KACd5P,EAAa,eAAc2P,QAAiBC,YAM5B,IAAhBrH,EAAUtS,GAA2B,IAAhBsS,EAAUrS,IAC/B8J,GAAc,SAAQ,EAAIuI,EAAUtS,MAAM,EAAIsS,EAAUrS,OAExDwZ,EAAiB,CACjB,MAAM,OAAElR,EAAM,QAAEC,EAAO,QAAEC,GAAYgR,EACjClR,IACAwB,GAAc,UAASxB,UACvBC,IACAuB,GAAc,WAAUvB,UACxBC,IACAsB,GAAc,WAAUtB,SAChC,CAKA,MAAMmR,EAAgBnW,EAAMzD,EAAE+F,MAAQuM,EAAUtS,EAC1C6Z,EAAgBpW,EAAMxD,EAAE8F,MAAQuM,EAAUrS,EAIhD,OAHsB,IAAlB2Z,GAAyC,IAAlBC,IACvB9P,GAAc,SAAQ6P,MAAkBC,MAErC9P,GAAa,MACxB,CCvCA,MAAM+P,GAAiBA,CAACjZ,EAAGC,IAAMD,EAAEkZ,MAAQjZ,EAAEiZ,MCG7C,MAAMC,GACFhb,WAAAA,GACIE,KAAK+a,SAAW,GAChB/a,KAAKgb,SAAU,CACnB,CACAxG,GAAAA,CAAIyG,IACAlC,EAAAA,GAAAA,IAAc/Y,KAAK+a,SAAUE,GAC7Bjb,KAAKgb,SAAU,CACnB,CACAjF,MAAAA,CAAOkF,IACHhC,EAAAA,GAAAA,IAAWjZ,KAAK+a,SAAUE,GAC1Bjb,KAAKgb,SAAU,CACnB,CACAb,OAAAA,CAAQ5R,GACJvI,KAAKgb,SAAWhb,KAAK+a,SAASG,KAAKN,IACnC5a,KAAKgb,SAAU,EACfhb,KAAK+a,SAASZ,QAAQ5R,EAC1B,E,wCCMJ,MAAM4S,GAAgB,CAAC,GAAI,IAAK,IAAK,KAMrC,IAAI9E,GAAK,EAKT,MAAM+E,GAAsB,CACxBvX,KAAM,kBACNwX,WAAY,EACZC,qBAAsB,EACtBC,uBAAwB,GAE5B,SAASC,GAAoBlX,GAA6F,IAA5F,qBAAEmX,EAAoB,cAAEC,EAAa,cAAEC,EAAa,kBAAEC,EAAiB,eAAEC,GAAiBvX,EACpH,OAAO,MACHxE,WAAAA,GAAuH,IAA3G8Z,EAAYlZ,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,CAAC,EAAG2G,EAAM3G,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAqB,OAAlBgb,QAA4C,IAAlBA,OAA2B,EAASA,IAIlG1b,KAAKqW,GAAKA,KAIVrW,KAAK8b,YAAc,EAOnB9b,KAAK+a,SAAW,IAAIgB,IAKpB/b,KAAKqB,QAAU,CAAC,EAMhBrB,KAAKgc,iBAAkB,EACvBhc,KAAK0M,oBAAqB,EAO1B1M,KAAK+Z,eAAgB,EAKrB/Z,KAAKic,mBAAoB,EAKzBjc,KAAKkc,yBAA0B,EAK/Blc,KAAKmc,kBAAmB,EAIxBnc,KAAKoc,uBAAwB,EAC7Bpc,KAAKqc,uBAAwB,EAK7Brc,KAAK8Z,YAAa,EAIlB9Z,KAAKsc,OAAQ,EAKbtc,KAAKuc,YAAa,EAIlBvc,KAAKwc,sBAAuB,EAS5Bxc,KAAKoT,UAAY,CAAEtS,EAAG,EAAGC,EAAG,GAI5Bf,KAAKyc,cAAgB,IAAIC,IACzB1c,KAAK2c,iBAAkB,EAEvB3c,KAAK4c,iBAAkB,EACvB5c,KAAK6c,kBAAoB,KACjB7c,KAAK8Z,aACL9Z,KAAK8Z,YAAa,EAClB9Z,KAAK8c,oBACT,EAOJ9c,KAAK+c,iBAAmB,KCjJpC,IAAgBC,EDsJA5B,GAAoBC,WAChBD,GAAoBE,qBAChBF,GAAoBG,uBAChB,EACZvb,KAAKid,MAAM9C,QAAQ+C,IACnBld,KAAKid,MAAM9C,QAAQgD,IACnBnd,KAAKid,MAAM9C,QAAQiD,IACnBpd,KAAKid,MAAM9C,QAAQkD,IC7JnBL,ED8JO5B,GC7JflX,OAAOoZ,aACPpZ,OAAOoZ,YAAYC,OAAOP,ED4JS,EAE/Bhd,KAAKwd,cAAe,EACpBxd,KAAKyd,WAAY,EACjBzd,KAAK0d,kBAAoB,EAKzB1d,KAAK2d,YAAc,IAAIjB,IACvB1c,KAAK4Z,aAAeA,EACpB5Z,KAAKyP,KAAOpI,EAASA,EAAOoI,MAAQpI,EAASrH,KAC7CA,KAAK4d,KAAOvW,EAAS,IAAIA,EAAOuW,KAAMvW,GAAU,GAChDrH,KAAKqH,OAASA,EACdrH,KAAK6a,MAAQxT,EAASA,EAAOwT,MAAQ,EAAI,EACzC,IAAK,IAAIhW,EAAI,EAAGA,EAAI7E,KAAK4d,KAAKjd,OAAQkE,IAClC7E,KAAK4d,KAAK/Y,GAAG2X,sBAAuB,EAEpCxc,KAAKyP,OAASzP,OACdA,KAAKid,MAAQ,IAAInC,GACzB,CACAvZ,gBAAAA,CAAiB+D,EAAMrE,GAInB,OAHKjB,KAAKyc,cAAcoB,IAAIvY,IACxBtF,KAAKyc,cAAclO,IAAIjJ,EAAM,IAAIwY,GAAAA,GAE9B9d,KAAKyc,cAAc5P,IAAIvH,GAAMkP,IAAIvT,EAC5C,CACA8c,eAAAA,CAAgBzY,GACZ,MAAM0Y,EAAsBhe,KAAKyc,cAAc5P,IAAIvH,GAAM,QAAA2Y,EAAAvd,UAAAC,OADpCud,EAAI,IAAAC,MAAAF,EAAA,EAAAA,EAAA,KAAAG,EAAA,EAAAA,EAAAH,EAAAG,IAAJF,EAAIE,EAAA,GAAA1d,UAAA0d,GAEzBJ,GAAuBA,EAAoBK,UAAUH,EACzD,CACAI,YAAAA,CAAahZ,GACT,OAAOtF,KAAKyc,cAAcoB,IAAIvY,EAClC,CAIAiZ,KAAAA,CAAMxT,GAAqD,IAA3CgP,EAAarZ,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAGV,KAAKyP,KAAKkN,gBACtC,GAAI3c,KAAK+K,SACL,OErMhB,IAAsBqE,EFsMVpP,KAAKsc,OEtMKlN,EFsMgBrE,aErMRyT,YAAkC,QAApBpP,EAAQqP,QFsMxCze,KAAK+K,SAAWA,EAChB,MAAM,SAAEqJ,EAAQ,OAAE7M,EAAM,cAAEgE,GAAkBvL,KAAKqB,QASjD,GARIkK,IAAkBA,EAAcoB,SAChCpB,EAAcgT,MAAMxT,GAExB/K,KAAKyP,KAAKwN,MAAMzI,IAAIxU,MACpBA,KAAKqH,QAAUrH,KAAKqH,OAAO0T,SAASvG,IAAIxU,MACpC+Z,IAAkBxS,GAAU6M,KAC5BpU,KAAK+Z,eAAgB,GAErB0B,EAAsB,CACtB,IAAIiD,EACJ,MAAMC,EAAsBA,IAAO3e,KAAKyP,KAAK4M,uBAAwB,EACrEZ,EAAqB1Q,GAAU,KAC3B/K,KAAKyP,KAAK4M,uBAAwB,EAClCqC,GAAeA,IACfA,EGlNpB,SAAenW,EAAUqW,GACrB,MAAM9S,EAAQ+S,YAAYC,MACpBC,EAAeza,IAAmB,IAAlB,UAAEtB,GAAWsB,EAC/B,MAAM0a,EAAUhc,EAAY8I,EACxBkT,GAAWJ,KACXxa,EAAAA,EAAAA,IAAY2a,GACZxW,EAASyW,EAAUJ,GACvB,EAGJ,OADArb,EAAAA,GAAM0b,KAAKF,GAAc,GAClB,KAAM3a,EAAAA,EAAAA,IAAY2a,EAC7B,CHuMkCG,CAAMP,EAAqB,KACrChM,GAAsBC,yBACtBD,GAAsBC,wBAAyB,EAC/C5S,KAAKid,MAAM9C,QAAQgF,IACvB,GAER,CACI/K,GACApU,KAAKyP,KAAK2P,mBAAmBhL,EAAUpU,OAGd,IAAzBA,KAAKqB,QAAQge,SACb9T,IACC6I,GAAY7M,IACbvH,KAAKuB,iBAAiB,aAAa8I,IAA+E,IAA9E,MAAE9F,EAAK,iBAAEiO,EAAgB,yBAAE8M,EAA0B/X,OAAQgY,GAAYlV,EACzG,GAAIrK,KAAKwf,yBAGL,OAFAxf,KAAKmB,YAASP,OACdZ,KAAKyf,oBAAiB7e,GAI1B,MAAM8e,EAAmB1f,KAAKqB,QAAQ8O,YAClC5E,EAAcoU,wBACdC,IACE,uBAAEC,EAAsB,0BAAEC,GAA+BvU,EAAcgB,WAKvEwT,GAAiB/f,KAAKggB,eACvBrH,GAAiB3Y,KAAKggB,aAAcT,IACrCD,EAMEW,GAAgCzN,GAAoB8M,EAC1D,GAAItf,KAAKqB,QAAQ6e,YACZlgB,KAAKyZ,YAAczZ,KAAKyZ,WAAW1O,UACpCkV,GACCzN,IACIuN,IAAkB/f,KAAK0V,kBAAoB,CAC5C1V,KAAKyZ,aACLzZ,KAAKoa,aAAepa,KAAKyZ,WACzBzZ,KAAKoa,aAAaA,kBAAexZ,GAErCZ,KAAKmgB,mBAAmB5b,EAAO0b,GAC/B,MAAMG,EAAmB,KAClBC,EAAAA,GAAAA,GAAmBX,EAAkB,UACxCY,OAAQT,EACRU,WAAYT,IAEZvU,EAAciV,oBACdxgB,KAAKqB,QAAQ6e,cACbE,EAAiBlB,MAAQ,EACzBkB,EAAiBvc,MAAO,GAE5B7D,KAAKgO,eAAeoS,EACxB,MAOS5N,GACD2M,GAAgBnf,MAEhBA,KAAK2V,UAAY3V,KAAKqB,QAAQwT,gBAC9B7U,KAAKqB,QAAQwT,iBAGrB7U,KAAKggB,aAAeT,CAAS,GAGzC,CACAkB,OAAAA,GACIzgB,KAAKqB,QAAQ+S,UAAYpU,KAAKiV,aAC9BjV,KAAKyP,KAAKwN,MAAMlH,OAAO/V,MACvB,MAAMqV,EAAQrV,KAAKsV,WACnBD,GAASA,EAAMU,OAAO/V,MACtBA,KAAKqH,QAAUrH,KAAKqH,OAAO0T,SAAS2F,OAAO1gB,MAC3CA,KAAK+K,cAAWnK,GAChBwD,EAAAA,EAAAA,IAAYpE,KAAK+c,iBACrB,CAEA4D,WAAAA,GACI3gB,KAAKoc,uBAAwB,CACjC,CACAwE,aAAAA,GACI5gB,KAAKoc,uBAAwB,CACjC,CACAyE,eAAAA,GACI,OAAO7gB,KAAKoc,uBAAyBpc,KAAKqc,qBAC9C,CACAmD,sBAAAA,GACI,OAAQxf,KAAK0M,oBACR1M,KAAKqH,QAAUrH,KAAKqH,OAAOmY,2BAC5B,CACR,CAEAsB,WAAAA,GACQ9gB,KAAK6gB,oBAET7gB,KAAK8Z,YAAa,EAClB9Z,KAAKid,OAASjd,KAAKid,MAAM9C,QAAQ4G,IACjC/gB,KAAK8b,cACT,CACAkF,oBAAAA,GACI,MAAM,cAAEzV,GAAkBvL,KAAKqB,QAC/B,OAAOkK,GAAiBA,EAAcgB,WAAWsF,iBACrD,CACAoD,UAAAA,GAAyC,IAA9BgM,IAAqBvgB,UAAAC,OAAA,QAAAC,IAAAF,UAAA,KAAAA,UAAA,GAE5B,GADAV,KAAKyP,KAAKkN,iBAAkB,EACxB3c,KAAKyP,KAAKoR,kBAEV,YADA7gB,KAAKqB,QAAQwT,gBAAkB7U,KAAKqB,QAAQwT,kBAIhD,IADC7U,KAAKyP,KAAKqK,YAAc9Z,KAAKyP,KAAKqR,cAC/B9gB,KAAK+Z,cACL,OACJ/Z,KAAK+Z,eAAgB,EACrB,IAAK,IAAIlV,EAAI,EAAGA,EAAI7E,KAAK4d,KAAKjd,OAAQkE,IAAK,CACvC,MAAM9E,EAAOC,KAAK4d,KAAK/Y,GACvB9E,EAAKyc,sBAAuB,EAC5Bzc,EAAKgS,aAAa,YACdhS,EAAKsB,QAAQ6e,YACbngB,EAAKkV,YAAW,EAExB,CACA,MAAM,SAAEb,EAAQ,OAAE7M,GAAWvH,KAAKqB,QAClC,QAAiBT,IAAbwT,IAA2B7M,EAC3B,OACJ,MAAMsK,EAAoB7R,KAAKghB,uBAC/BhhB,KAAKkhB,2BAA6BrP,EAC5BA,EAAkB7R,KAAK4Z,aAAc,SACrChZ,EACNZ,KAAKmhB,iBACLF,GAAyBjhB,KAAK+d,gBAAgB,aAClD,CACA7d,MAAAA,GACIF,KAAK4c,iBAAkB,EAKvB,GAJyB5c,KAAK6gB,kBAQ1B,OAHA7gB,KAAK4gB,gBACL5gB,KAAK8c,yBACL9c,KAAKid,MAAM9C,QAAQiH,IAGlBphB,KAAK8Z,YACN9Z,KAAKid,MAAM9C,QAAQkH,IAEvBrhB,KAAK8Z,YAAa,EAIlB9Z,KAAKid,MAAM9C,QAAQmH,IAKnBthB,KAAKid,MAAM9C,QAAQnI,IAKnBhS,KAAKid,MAAM9C,QAAQoH,IACnBvhB,KAAK8c,oBAML,MAAMgC,EAAMD,YAAYC,MACxB7b,EAAAA,UAAUsB,OAAQoN,EAAAA,EAAAA,GAAM,EAAG,IAAO,GAAImN,EAAM7b,EAAAA,UAAUD,WACtDC,EAAAA,UAAUD,UAAY8b,EACtB7b,EAAAA,UAAUue,cAAe,EACzBC,EAAAA,GAAMvhB,OAAOwhB,QAAQze,EAAAA,WACrBwe,EAAAA,GAAME,UAAUD,QAAQze,EAAAA,WACxBwe,EAAAA,GAAM7T,OAAO8T,QAAQze,EAAAA,WACrBA,EAAAA,UAAUue,cAAe,CAC7B,CACA9M,SAAAA,GACS1U,KAAK4c,kBACN5c,KAAK4c,iBAAkB,EACvBnH,gBAAe,IAAMzV,KAAKE,WAElC,CACA4c,iBAAAA,GACI9c,KAAKid,MAAM9C,QAAQyH,IACnB5hB,KAAK2d,YAAYxD,QAAQ0H,GAC7B,CACAC,wBAAAA,GACIve,EAAAA,GAAMoe,UAAU3hB,KAAK+c,kBAAkB,GAAO,EAClD,CACAjH,yBAAAA,GAMIvS,EAAAA,GAAM6R,YAAW,KACTpV,KAAK+Z,cACL/Z,KAAKyP,KAAKiF,YAGV1U,KAAKyP,KAAKoN,mBACd,GAER,CAIAsE,cAAAA,IACQnhB,KAAK2Z,UAAa3Z,KAAK+K,WAE3B/K,KAAK2Z,SAAW3Z,KAAK+hB,UACzB,CACA/P,YAAAA,GACI,IAAKhS,KAAK+K,SACN,OAGJ,GADA/K,KAAK+R,iBACC/R,KAAKqB,QAAQ2gB,sBAAuBhiB,KAAK2V,YAC1C3V,KAAK+Z,cACN,OASJ,GAAI/Z,KAAKyZ,aAAezZ,KAAKyZ,WAAW1O,SACpC,IAAK,IAAIlG,EAAI,EAAGA,EAAI7E,KAAK4d,KAAKjd,OAAQkE,IAAK,CAC1B7E,KAAK4d,KAAK/Y,GAClBkN,cACT,CAEJ,MAAMkQ,EAAajiB,KAAKuH,OACxBvH,KAAKuH,OAASvH,KAAK+hB,SAAQ,GAC3B/hB,KAAKkiB,gBAAkB7Z,IACvBrI,KAAK+Z,eAAgB,EACrB/Z,KAAKqT,qBAAkBzS,EACvBZ,KAAK+d,gBAAgB,UAAW/d,KAAKuH,OAAO0F,WAC5C,MAAM,cAAE1B,GAAkBvL,KAAKqB,QAC/BkK,GACIA,EAAc8S,OAAO,gBAAiBre,KAAKuH,OAAO0F,UAAWgV,EAAaA,EAAWhV,eAAYrM,EACzG,CACAmR,YAAAA,GAAgC,IAAnBoQ,EAAKzhB,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,UACb0hB,EAAmBC,QAAQriB,KAAKqB,QAAQihB,cAAgBtiB,KAAK+K,UAC7D/K,KAAKuP,QACLvP,KAAKuP,OAAOuM,cAAgB9b,KAAKyP,KAAKqM,aACtC9b,KAAKuP,OAAO4S,QAAUA,IACtBC,GAAmB,GAEnBA,IACApiB,KAAKuP,OAAS,CACVuM,YAAa9b,KAAKyP,KAAKqM,YACvBqG,QACAI,OAAQ3G,EAAkB5b,KAAK+K,UAC/BhI,OAAQ4Y,EAAc3b,KAAK+K,WAGvC,CACA8Q,cAAAA,GACI,IAAKA,EACD,OACJ,MAAM2G,EAAmBxiB,KAAK+Z,eAAiB/Z,KAAKwc,qBAC9CiG,EAAgBziB,KAAKqT,kBAAoBqF,GAAY1Y,KAAKqT,iBAC1DxB,EAAoB7R,KAAKghB,uBACzB0B,EAAyB7Q,EACzBA,EAAkB7R,KAAK4Z,aAAc,SACrChZ,EACA+hB,EAA8BD,IAA2B1iB,KAAKkhB,2BAChEsB,IACCC,GACGxZ,EAAajJ,KAAK4Z,eAClB+I,KACJ9G,EAAe7b,KAAK+K,SAAU2X,GAC9B1iB,KAAKwc,sBAAuB,EAC5Bxc,KAAKgZ,iBAEb,CACA+I,OAAAA,GAAgC,IAAxBa,IAAeliB,UAAAC,OAAA,QAAAC,IAAAF,UAAA,KAAAA,UAAA,GACnB,MAAMmiB,EAAU7iB,KAAKwP,iBACrB,IAAIvC,EAAYjN,KAAK8iB,oBAAoBD,GAi9BrD,IAAkB/Y,EAv8BN,OAJI8Y,IACA3V,EAAYjN,KAAK4iB,gBAAgB3V,IA28B7C8V,IADcjZ,EAx8BGmD,GAy8BHnM,GACdiiB,GAAUjZ,EAAI/I,GAz8BC,CACH+a,YAAa9b,KAAKyP,KAAKqM,YACvBkH,YAAaH,EACb5V,YACA2M,aAAc,CAAC,EACfnT,OAAQzG,KAAKqW,GAErB,CACA7G,cAAAA,GACI,MAAM,cAAEjE,GAAkBvL,KAAKqB,QAC/B,IAAKkK,EACD,OAAOlD,IACX,MAAMyB,EAAMyB,EAAcT,sBAEpB,OAAEyE,GAAWvP,KAAKyP,KAKxB,OAJIF,IACArF,GAAcJ,EAAIhJ,EAAGyO,EAAOxM,OAAOjC,GACnCoJ,GAAcJ,EAAI/I,EAAGwO,EAAOxM,OAAOhC,IAEhC+I,CACX,CACAgZ,mBAAAA,CAAoBhZ,GAChB,MAAMmZ,EAAmB5a,IACzB4P,GAAYgL,EAAkBnZ,GAK9B,IAAK,IAAIjF,EAAI,EAAGA,EAAI7E,KAAK4d,KAAKjd,OAAQkE,IAAK,CACvC,MAAM9E,EAAOC,KAAK4d,KAAK/Y,IACjB,OAAE0K,EAAM,QAAElO,GAAYtB,EAC5B,GAAIA,IAASC,KAAKyP,MAAQF,GAAUlO,EAAQihB,aAAc,CAKtD,GAAI/S,EAAOgT,OAAQ,CACftK,GAAYgL,EAAkBnZ,GAC9B,MAAQyF,OAAQ2T,GAAeljB,KAAKyP,KAKhCyT,IACAhZ,GAAc+Y,EAAiBniB,GAAIoiB,EAAWngB,OAAOjC,GACrDoJ,GAAc+Y,EAAiBliB,GAAImiB,EAAWngB,OAAOhC,GAE7D,CACAmJ,GAAc+Y,EAAiBniB,EAAGyO,EAAOxM,OAAOjC,GAChDoJ,GAAc+Y,EAAiBliB,EAAGwO,EAAOxM,OAAOhC,EACpD,CACJ,CACA,OAAOkiB,CACX,CACAE,cAAAA,CAAerZ,GAA4B,IAAvBsZ,EAAa1iB,UAAAC,OAAA,QAAAC,IAAAF,UAAA,IAAAA,UAAA,GAC7B,MAAM2iB,EAAiBhb,IACvB4P,GAAYoL,EAAgBvZ,GAC5B,IAAK,IAAIjF,EAAI,EAAGA,EAAI7E,KAAK4d,KAAKjd,OAAQkE,IAAK,CACvC,MAAM9E,EAAOC,KAAK4d,KAAK/Y,IAClBue,GACDrjB,EAAKsB,QAAQihB,cACbviB,EAAKwP,QACLxP,IAASA,EAAK0P,MACd7E,GAAayY,EAAgB,CACzBviB,GAAIf,EAAKwP,OAAOxM,OAAOjC,EACvBC,GAAIhB,EAAKwP,OAAOxM,OAAOhC,IAG1BkI,EAAalJ,EAAK6Z,eAEvBhP,GAAayY,EAAgBtjB,EAAK6Z,aACtC,CAIA,OAHI3Q,EAAajJ,KAAK4Z,eAClBhP,GAAayY,EAAgBrjB,KAAK4Z,cAE/ByJ,CACX,CACAT,eAAAA,CAAgB9Y,GACZ,MAAMwZ,EAAsBjb,IAC5B4P,GAAYqL,EAAqBxZ,GACjC,IAAK,IAAIjF,EAAI,EAAGA,EAAI7E,KAAK4d,KAAKjd,OAAQkE,IAAK,CACvC,MAAM9E,EAAOC,KAAK4d,KAAK/Y,GACvB,IAAK9E,EAAKgL,SACN,SACJ,IAAK9B,EAAalJ,EAAK6Z,cACnB,SACJ9Q,EAAS/I,EAAK6Z,eAAiB7Z,EAAKohB,iBACpC,MAAM3I,EAAYnQ,IAElB4P,GAAYO,EADIzY,EAAKyP,kBAErB+I,GAAoB+K,EAAqBvjB,EAAK6Z,aAAc7Z,EAAK4Z,SAAW5Z,EAAK4Z,SAAS1M,eAAYrM,EAAW4X,EACrH,CAIA,OAHIvP,EAAajJ,KAAK4Z,eAClBrB,GAAoB+K,EAAqBtjB,KAAK4Z,cAE3C0J,CACX,CACAC,cAAAA,CAAehf,GACXvE,KAAKwjB,YAAcjf,EACnBvE,KAAKyP,KAAKqS,2BACV9hB,KAAKic,mBAAoB,CAC7B,CACArH,UAAAA,CAAWvT,GACPrB,KAAKqB,QAAU,IACRrB,KAAKqB,WACLA,EACH2Y,eAAiCpZ,IAAtBS,EAAQ2Y,WAA0B3Y,EAAQ2Y,UAE7D,CACAoH,iBAAAA,GACIphB,KAAKuP,YAAS3O,EACdZ,KAAKuH,YAAS3G,EACdZ,KAAK2Z,cAAW/Y,EAChBZ,KAAKkhB,gCAA6BtgB,EAClCZ,KAAKwjB,iBAAc5iB,EACnBZ,KAAKmB,YAASP,EACdZ,KAAK+Z,eAAgB,CACzB,CACA0J,kCAAAA,GACSzjB,KAAK0jB,gBAQN1jB,KAAK0jB,eAAeC,2BACpB1gB,EAAAA,UAAUD,WACVhD,KAAK0jB,eAAevG,oBAAmB,EAE/C,CACAA,kBAAAA,GAA+C,IAA5ByG,EAAkBljB,UAAAC,OAAA,QAAAC,IAAAF,UAAA,IAAAA,UAAA,GACjC,IAAImjB,EAMJ,MAAM1K,EAAOnZ,KAAK8jB,UAClB9jB,KAAKic,oBAAsBjc,KAAKic,kBAAoB9C,EAAK8C,mBACzDjc,KAAKmc,mBAAqBnc,KAAKmc,iBAAmBhD,EAAKgD,kBACvDnc,KAAKkc,0BAA4Blc,KAAKkc,wBAA0B/C,EAAK+C,yBACrE,MAAM6H,EAAW1B,QAAQriB,KAAKoa,eAAiBpa,OAASmZ,EAUxD,KALkByK,GACbG,GAAY/jB,KAAKkc,yBAClBlc,KAAKic,oBACmB,QAAtB4H,EAAK7jB,KAAKqH,cAA2B,IAAPwc,OAAgB,EAASA,EAAG5H,oBAC5Djc,KAAKgkB,gCAEL,OACJ,MAAM,OAAEzc,EAAM,SAAE6M,GAAapU,KAAKqB,QAIlC,GAAKrB,KAAKuH,SAAYA,GAAU6M,GAAhC,CASA,GAPApU,KAAK2jB,yBAA2B1gB,EAAAA,UAAUD,WAOrChD,KAAKwjB,cAAgBxjB,KAAKyf,eAAgB,CAE3C,MAAMiE,EAAiB1jB,KAAKikB,6BACxBP,GACAA,EAAenc,QACY,IAA3BvH,KAAK0d,mBACL1d,KAAK0jB,eAAiBA,EACtB1jB,KAAKyjB,qCACLzjB,KAAKyf,eAAiBpX,IACtBrI,KAAKkkB,qBAAuB7b,IAC5Bb,EAAqBxH,KAAKkkB,qBAAsBlkB,KAAKuH,OAAO0F,UAAWyW,EAAenc,OAAO0F,WAC7FgL,GAAYjY,KAAKyf,eAAgBzf,KAAKkkB,uBAGtClkB,KAAK0jB,eAAiB1jB,KAAKyf,oBAAiB7e,CAEpD,CAKA,GAAKZ,KAAKyf,gBAAmBzf,KAAKwjB,YAAlC,CvBtqBZ,IAAyBriB,EAAQiG,EAAUC,EuB+sB/B,GApCKrH,KAAKmB,SACNnB,KAAKmB,OAASkH,IACdrI,KAAKmkB,qBAAuB9b,KAK5BrI,KAAKyf,gBACLzf,KAAKkkB,sBACLlkB,KAAK0jB,gBACL1jB,KAAK0jB,eAAeviB,QACpBnB,KAAKyjB,qCvBtrBItiB,EuBurBOnB,KAAKmB,OvBvrBJiG,EuBurBYpH,KAAKyf,evBvrBPpY,EuBurBuBrH,KAAK0jB,eAAeviB,OvBtrBlFgG,EAAiBhG,EAAOL,EAAGsG,EAAStG,EAAGuG,EAAOvG,GAC9CqG,EAAiBhG,EAAOJ,EAAGqG,EAASrG,EAAGsG,EAAOtG,IuB0rB7Bf,KAAKwjB,aACNnB,QAAQriB,KAAKoa,cAEbpa,KAAKmB,OAASnB,KAAKmjB,eAAenjB,KAAKuH,OAAO0F,WAG9CgL,GAAYjY,KAAKmB,OAAQnB,KAAKuH,OAAO0F,WAEzCpD,GAAc7J,KAAKmB,OAAQnB,KAAKwjB,cAMhCvL,GAAYjY,KAAKmB,OAAQnB,KAAKuH,OAAO0F,WAKrCjN,KAAKgkB,+BAAgC,CACrChkB,KAAKgkB,gCAAiC,EACtC,MAAMN,EAAiB1jB,KAAKikB,6BACxBP,GACArB,QAAQqB,EAAetJ,gBACnBiI,QAAQriB,KAAKoa,gBAChBsJ,EAAeriB,QAAQihB,cACxBoB,EAAeviB,QACY,IAA3BnB,KAAK0d,mBACL1d,KAAK0jB,eAAiBA,EACtB1jB,KAAKyjB,qCACLzjB,KAAKyf,eAAiBpX,IACtBrI,KAAKkkB,qBAAuB7b,IAC5Bb,EAAqBxH,KAAKkkB,qBAAsBlkB,KAAKmB,OAAQuiB,EAAeviB,QAC5E8W,GAAYjY,KAAKyf,eAAgBzf,KAAKkkB,uBAGtClkB,KAAK0jB,eAAiB1jB,KAAKyf,oBAAiB7e,CAEpD,CAIAwa,GAAoBE,sBA/DV,CA9BA,CA8Fd,CACA2I,0BAAAA,GACI,GAAKjkB,KAAKqH,SACNyB,EAAS9I,KAAKqH,OAAOuS,gBACrBzQ,EAAenJ,KAAKqH,OAAOuS,cAG/B,OAAI5Z,KAAKqH,OAAO+c,eACLpkB,KAAKqH,OAGLrH,KAAKqH,OAAO4c,4BAE3B,CACAG,YAAAA,GACI,OAAO/B,SAASriB,KAAKyf,gBACjBzf,KAAKwjB,aACLxjB,KAAKqB,QAAQ6e,aACblgB,KAAKuH,OACb,CACA6V,cAAAA,GACI,IAAIyG,EACJ,MAAM1K,EAAOnZ,KAAK8jB,UACZC,EAAW1B,QAAQriB,KAAKoa,eAAiBpa,OAASmZ,EACxD,IAAIkL,GAAU,EAuBd,IAlBIrkB,KAAKic,oBAA6C,QAAtB4H,EAAK7jB,KAAKqH,cAA2B,IAAPwc,OAAgB,EAASA,EAAG5H,sBACtFoI,GAAU,GAMVN,IACC/jB,KAAKkc,yBAA2Blc,KAAKmc,oBACtCkI,GAAU,GAMVrkB,KAAK2jB,2BAA6B1gB,EAAAA,UAAUD,YAC5CqhB,GAAU,GAEVA,EACA,OACJ,MAAM,OAAE9c,EAAM,SAAE6M,GAAapU,KAAKqB,QAWlC,GANArB,KAAKgc,gBAAkBqG,QAASriB,KAAKqH,QAAUrH,KAAKqH,OAAO2U,iBACvDhc,KAAK0V,kBACL1V,KAAKskB,kBACJtkB,KAAKgc,kBACNhc,KAAKwjB,YAAcxjB,KAAKyf,oBAAiB7e,IAExCZ,KAAKuH,SAAYA,IAAU6M,EAC5B,OAKJ6D,GAAYjY,KAAKkiB,gBAAiBliB,KAAKuH,OAAO0F,WAI9C,MAAMsX,EAAiBvkB,KAAKoT,UAAUtS,EAChC0jB,EAAiBxkB,KAAKoT,UAAUrS,GjBjyBlD,SAAyB+I,EAAKsJ,EAAWqR,GAAsC,IAA5BC,EAAkBhkB,UAAAC,OAAA,QAAAC,IAAAF,UAAA,IAAAA,UAAA,GACjE,MAAMikB,EAAaF,EAAS9jB,OAC5B,IAAKgkB,EACD,OAGJ,IAAI5kB,EACAwE,EAFJ6O,EAAUtS,EAAIsS,EAAUrS,EAAI,EAG5B,IAAK,IAAI8D,EAAI,EAAGA,EAAI8f,EAAY9f,IAAK,CACjC9E,EAAO0kB,EAAS5f,GAChBN,EAAQxE,EAAKsT,gBAKb,MAAMtI,EAAWhL,EAAKgL,SAClBA,GACAA,EAAS+G,OACkB,aAA3B/G,EAAS+G,MAAM8S,UAGfF,GACA3kB,EAAKsB,QAAQihB,cACbviB,EAAKwP,QACLxP,IAASA,EAAK0P,MACd7E,GAAad,EAAK,CACdhJ,GAAIf,EAAKwP,OAAOxM,OAAOjC,EACvBC,GAAIhB,EAAKwP,OAAOxM,OAAOhC,IAG3BwD,IAEA6O,EAAUtS,GAAKyD,EAAMzD,EAAE+F,MACvBuM,EAAUrS,GAAKwD,EAAMxD,EAAE8F,MAEvBgD,GAAcC,EAAKvF,IAEnBmgB,GAAsBzb,EAAalJ,EAAK6Z,eACxChP,GAAad,EAAK/J,EAAK6Z,cAE/B,CAKAxG,EAAUtS,EAAIiJ,GAAcqJ,EAAUtS,GACtCsS,EAAUrS,EAAIgJ,GAAcqJ,EAAUrS,EAC1C,CiBuvBY8jB,CAAgB7kB,KAAKkiB,gBAAiBliB,KAAKoT,UAAWpT,KAAK4d,KAAMmG,IAK7D5K,EAAK5R,QACJ4R,EAAKhY,QACgB,IAArBnB,KAAKoT,UAAUtS,GAAgC,IAArBd,KAAKoT,UAAUrS,IAC1CoY,EAAKhY,OAASgY,EAAK5R,OAAO0F,WAE9B,MAAM,OAAE9L,GAAWgY,EACnB,IAAKhY,EAWD,YALInB,KAAK8kB,sBACL9kB,KAAKqT,gBAAkBjL,IACvBpI,KAAK8kB,oBAAsB,OAC3B9kB,KAAKgZ,mBAIRhZ,KAAKqT,kBACNrT,KAAKqT,gBAAkBjL,IACvBpI,KAAK+kB,6BAA+B3c,KAExC,MAAM4c,EAA0BhlB,KAAK8kB,oBAUrC9d,EAAahH,KAAKqT,gBAAiBrT,KAAKkiB,gBAAiB/gB,EAAQnB,KAAK4Z,cACtE5Z,KAAK8kB,oBAAsBxK,GAAyBta,KAAKqT,gBAAiBrT,KAAKoT,WAC3EpT,KAAK8kB,sBAAwBE,GAC7BhlB,KAAKoT,UAAUtS,IAAMyjB,GACrBvkB,KAAKoT,UAAUrS,IAAMyjB,IACrBxkB,KAAKwd,cAAe,EACpBxd,KAAKgZ,iBACLhZ,KAAK+d,gBAAgB,mBAAoB5c,IAK7Cia,GAAoBG,wBACxB,CACAtB,IAAAA,GACIja,KAAKyd,WAAY,CAErB,CACAjE,IAAAA,GACIxZ,KAAKyd,WAAY,CAErB,CACAzE,cAAAA,GAAiC,IAAlBiM,IAASvkB,UAAAC,OAAA,QAAAC,IAAAF,UAAA,KAAAA,UAAA,GAEpB,GADAV,KAAKqB,QAAQ2X,gBAAkBhZ,KAAKqB,QAAQ2X,iBACxCiM,EAAW,CACX,MAAM5P,EAAQrV,KAAKsV,WACnBD,GAASA,EAAM2D,gBACnB,CACIhZ,KAAKoa,eAAiBpa,KAAKoa,aAAarP,WACxC/K,KAAKoa,kBAAexZ,EAE5B,CACAuf,kBAAAA,CAAmB5b,GAA6C,IAAtC0b,EAA4Bvf,UAAAC,OAAA,QAAAC,IAAAF,UAAA,IAAAA,UAAA,GAClD,MAAMiZ,EAAW3Z,KAAK2Z,SAChBuL,EAAuBvL,EACvBA,EAASC,aACT,CAAC,EACDuL,EAAc,IAAKnlB,KAAK4Z,cACxB4J,EAAcpb,IACfpI,KAAK0jB,gBACL1jB,KAAK0jB,eAAeriB,QAAQ6e,aAC7BlgB,KAAKyf,eAAiBzf,KAAKkkB,0BAAuBtjB,GAEtDZ,KAAKgkB,gCAAkC/D,EACvC,MAAMmF,EAAiB/c,IAGjBgd,GAFiB1L,EAAWA,EAASlT,YAAS7F,MAC/BZ,KAAKuH,OAASvH,KAAKuH,OAAOd,YAAS7F,GAElDyU,EAAQrV,KAAKsV,WACbgQ,GAAgBjQ,GAASA,EAAME,QAAQ5U,QAAU,EACjD4kB,EAAyBlD,QAAQgD,IAClCC,IAC0B,IAA3BtlB,KAAKqB,QAAQ2Y,YACZha,KAAK4d,KAAK4H,KAAKC,KAEpB,IAAIC,EADJ1lB,KAAK0d,kBAAoB,EAEzB1d,KAAK2lB,eAAkBpU,IACnB,MAAMG,EAAWH,EAAS,ILr6B1C,IAAmB5P,EAAGC,EKy6CNgkB,EAAQC,EAAMC,EAAIhO,EAngBlBiO,GAAavC,EAAY1iB,EAAGyD,EAAMzD,EAAG4Q,GACrCqU,GAAavC,EAAYziB,EAAGwD,EAAMxD,EAAG2Q,GACrC1R,KAAKujB,eAAeC,GAChBxjB,KAAKyf,gBACLzf,KAAKkkB,sBACLlkB,KAAKuH,QACLvH,KAAK0jB,gBACL1jB,KAAK0jB,eAAenc,SACpBC,EAAqB4d,EAAgBplB,KAAKuH,OAAO0F,UAAWjN,KAAK0jB,eAAenc,OAAO0F,WA2f3F2Y,EA1fW5lB,KAAKyf,eA0fRoG,EA1fwB7lB,KAAKkkB,qBA0fvB4B,EA1f6CV,EA0fzCtN,EA1fyDpG,EA2fvFsU,GAAQJ,EAAO9kB,EAAG+kB,EAAK/kB,EAAGglB,EAAGhlB,EAAGgX,GAChCkO,GAAQJ,EAAO7kB,EAAG8kB,EAAK9kB,EAAG+kB,EAAG/kB,EAAG+W,GAvfZ4N,ILp7BL/jB,EKq7Be3B,KAAKyf,eLr7BjB7d,EKq7BiC8jB,ELp7B3C/jB,EAAEb,EAAEsF,MAAQxE,EAAEd,EAAEsF,KACpBzE,EAAEb,EAAEqF,MAAQvE,EAAEd,EAAEqF,KAChBxE,EAAEZ,EAAEqF,MAAQxE,EAAEb,EAAEqF,KAChBzE,EAAEZ,EAAEoF,MAAQvE,EAAEb,EAAEoF,OKk7BAnG,KAAKic,mBAAoB,GAExByJ,IACDA,EAAqBrd,KACzB4P,GAAYyN,EAAoB1lB,KAAKyf,iBAErC4F,IACArlB,KAAK6Z,gBAAkBsL,ER37B3C,SAAmBhkB,EAAQ8kB,EAAQ9M,EAAMzH,EAAU6T,EAAwBD,GACnEC,GACApkB,EAAO+kB,SAAUtf,EAAAA,EAAAA,GAAI,OAEJhG,IAAjBuY,EAAK+M,QAAwB/M,EAAK+M,QAAU,EAAG1O,GAAgB9F,IAC/DvQ,EAAOglB,aAAcvf,EAAAA,EAAAA,QAAuBhG,IAAnBqlB,EAAOC,QAAwBD,EAAOC,QAAU,EAAG,EAAGvO,GAAiBjG,KAE3F4T,IACLnkB,EAAO+kB,SAAUtf,EAAAA,EAAAA,QAAuBhG,IAAnBqlB,EAAOC,QAAwBD,EAAOC,QAAU,OAAoBtlB,IAAjBuY,EAAK+M,QAAwB/M,EAAK+M,QAAU,EAAGxU,IAK3H,IAAK,IAAI7M,EAAI,EAAGA,EAAIsS,GAAYtS,IAAK,CACjC,MAAMuhB,EAAe,SAAQlP,GAAQrS,WACrC,IAAIwhB,EAAe/O,GAAU2O,EAAQG,GACjCE,EAAahP,GAAU6B,EAAMiN,QACZxlB,IAAjBylB,QAA6CzlB,IAAf0lB,IAElCD,IAAiBA,EAAe,GAChCC,IAAeA,EAAa,GACI,IAAjBD,GACI,IAAfC,GACAjP,GAAKgP,KAAkBhP,GAAKiP,IAE5BnlB,EAAOilB,GAAevkB,KAAKsE,KAAIS,EAAAA,EAAAA,GAAIwQ,GAASiP,GAAejP,GAASkP,GAAa5U,GAAW,IACxF5E,GAAAA,GAAQC,KAAKuZ,IAAexZ,GAAAA,GAAQC,KAAKsZ,MACzCllB,EAAOilB,IAAgB,MAI3BjlB,EAAOilB,GAAeE,EAE9B,EAIIL,EAAO5c,QAAU8P,EAAK9P,UACtBlI,EAAOkI,QAASzC,EAAAA,EAAAA,GAAIqf,EAAO5c,QAAU,EAAG8P,EAAK9P,QAAU,EAAGqI,GAElE,CQo5BoB6U,CAAUpB,EAAaD,EAAsBllB,KAAK4Z,aAAclI,EAAU6T,EAAwBD,IAEtGtlB,KAAKyP,KAAKqS,2BACV9hB,KAAKgZ,iBACLhZ,KAAK0d,kBAAoBhM,CAAQ,EAErC1R,KAAK2lB,eAAe3lB,KAAKqB,QAAQ6e,WAAa,IAAO,EACzD,CACAlS,cAAAA,CAAe3M,GACXrB,KAAK+d,gBAAgB,kBACrB/d,KAAK0V,kBAAoB1V,KAAK0V,iBAAiB7H,OAC3C7N,KAAKoa,cAAgBpa,KAAKoa,aAAa1E,kBACvC1V,KAAKoa,aAAa1E,iBAAiB7H,OAEnC7N,KAAKskB,oBACLlgB,EAAAA,EAAAA,IAAYpE,KAAKskB,kBACjBtkB,KAAKskB,sBAAmB1jB,GAO5BZ,KAAKskB,iBAAmB/gB,EAAAA,GAAMrD,QAAO,KACjCyS,GAAsBC,wBAAyB,EAC/C5S,KAAK0V,iBI39BrB,SAA4BpP,EAAOkgB,EAAWnlB,GAC1C,MAAMolB,GAAgBC,EAAAA,GAAAA,GAAcpgB,GAASA,GAAQmM,EAAAA,GAAAA,IAAYnM,GAEjE,OADAmgB,EAAc3a,OAAMgF,EAAAA,GAAAA,GAAmB,GAAI2V,EAAeD,EAAWnlB,IAC9DolB,EAAcE,SACzB,CJu9BwCC,CAAmB,EAh8BnC,IAg8BuD,IACxDvlB,EACHwlB,SAAWtV,IACPvR,KAAK2lB,eAAepU,GACpBlQ,EAAQwlB,UAAYxlB,EAAQwlB,SAAStV,EAAO,EAEhDgP,WAAYA,KACRlf,EAAQkf,YAAclf,EAAQkf,aAC9BvgB,KAAK8mB,mBAAmB,IAG5B9mB,KAAKoa,eACLpa,KAAKoa,aAAa1E,iBAAmB1V,KAAK0V,kBAE9C1V,KAAKskB,sBAAmB1jB,CAAS,GAEzC,CACAkmB,iBAAAA,GACQ9mB,KAAKoa,eACLpa,KAAKoa,aAAa1E,sBAAmB9U,EACrCZ,KAAKoa,aAAaV,qBAAkB9Y,GAExC,MAAMyU,EAAQrV,KAAKsV,WACnBD,GAASA,EAAM6E,wBACfla,KAAKoa,aACDpa,KAAK0V,iBACD1V,KAAK6Z,qBACDjZ,EACZZ,KAAK+d,gBAAgB,oBACzB,CACAoB,eAAAA,GACQnf,KAAK0V,mBACL1V,KAAK2lB,gBAAkB3lB,KAAK2lB,eAh+BpB,KAi+BR3lB,KAAK0V,iBAAiB7H,QAE1B7N,KAAK8mB,mBACT,CACAC,uBAAAA,GACI,MAAM5N,EAAOnZ,KAAK8jB,UAClB,IAAI,qBAAEK,EAAoB,OAAEhjB,EAAM,OAAEoG,EAAM,aAAEqS,GAAiBT,EAC7D,GAAKgL,GAAyBhjB,GAAWoG,EAAzC,CAOA,GAAIvH,OAASmZ,GACTnZ,KAAKuH,QACLA,GACAyf,GAA0BhnB,KAAKqB,QAAQ4lB,cAAejnB,KAAKuH,OAAO0F,UAAW1F,EAAO0F,WAAY,CAChG9L,EAASnB,KAAKmB,QAAUkH,IACxB,MAAM6e,EAAUjhB,EAAWjG,KAAKuH,OAAO0F,UAAUnM,GACjDK,EAAOL,EAAEsF,IAAM+S,EAAKhY,OAAOL,EAAEsF,IAC7BjF,EAAOL,EAAEqF,IAAMhF,EAAOL,EAAEsF,IAAM8gB,EAC9B,MAAMC,EAAUlhB,EAAWjG,KAAKuH,OAAO0F,UAAUlM,GACjDI,EAAOJ,EAAEqF,IAAM+S,EAAKhY,OAAOJ,EAAEqF,IAC7BjF,EAAOJ,EAAEoF,IAAMhF,EAAOJ,EAAEqF,IAAM+gB,CAClC,CACAlP,GAAYkM,EAAsBhjB,GAMlCyJ,GAAauZ,EAAsBvK,GAOnC5S,EAAahH,KAAK+kB,6BAA8B/kB,KAAKkiB,gBAAiBiC,EAAsBvK,EA/BlF,CAgCd,CACAwF,kBAAAA,CAAmBhL,EAAUrU,GACpBC,KAAK2d,YAAYE,IAAIzJ,IACtBpU,KAAK2d,YAAYpP,IAAI6F,EAAU,IAAI0E,IAEzB9Y,KAAK2d,YAAY9Q,IAAIuH,GAC7BI,IAAIzU,GACV,MAAMqnB,EAASrnB,EAAKsB,QAAQgmB,uBAC5BtnB,EAAKmV,QAAQ,CACT/E,WAAYiX,EAASA,EAAOjX,gBAAavP,EACzC2Y,sBAAuB6N,GAAUA,EAAOE,4BAClCF,EAAOE,4BAA4BvnB,QACnCa,GAEd,CACA+U,MAAAA,GACI,MAAMN,EAAQrV,KAAKsV,WACnB,OAAOD,GAAQA,EAAM8D,OAASnZ,IAClC,CACA8jB,OAAAA,GACI,IAAID,EACJ,MAAM,SAAEzP,GAAapU,KAAKqB,QAC1B,OAAO+S,IAAuC,QAA1ByP,EAAK7jB,KAAKsV,kBAA+B,IAAPuO,OAAgB,EAASA,EAAG1K,OAAgBnZ,IACtG,CACAunB,WAAAA,GACI,IAAI1D,EACJ,MAAM,SAAEzP,GAAapU,KAAKqB,QAC1B,OAAO+S,EAAsC,QAA1ByP,EAAK7jB,KAAKsV,kBAA+B,IAAPuO,OAAgB,EAASA,EAAG3K,cAAWtY,CAChG,CACA0U,QAAAA,GACI,MAAM,SAAElB,GAAapU,KAAKqB,QAC1B,GAAI+S,EACA,OAAOpU,KAAKyP,KAAKkO,YAAY9Q,IAAIuH,EACzC,CACAc,OAAAA,GAAiE,IAAzD,WAAEqH,EAAU,WAAEpM,EAAU,sBAAEoJ,GAAwB7Y,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,CAAC,EAC1D,MAAM2U,EAAQrV,KAAKsV,WACfD,GACAA,EAAMH,QAAQlV,KAAMuZ,GACpBgD,IACAvc,KAAKqT,qBAAkBzS,EACvBZ,KAAKuc,YAAa,GAElBpM,GACAnQ,KAAK4U,WAAW,CAAEzE,cAC1B,CACAgF,QAAAA,GACI,MAAME,EAAQrV,KAAKsV,WACnB,QAAID,GACOA,EAAMF,SAASnV,KAK9B,CACA+gB,aAAAA,GACI,MAAM,cAAExV,GAAkBvL,KAAKqB,QAC/B,IAAKkK,EACD,OAEJ,IAAIic,GAAY,EAKhB,MAAM,aAAE5N,GAAiBrO,EAQzB,IAPIqO,EAAavQ,QACbuQ,EAAatQ,SACbsQ,EAAarQ,SACbqQ,EAAa6N,WACbD,GAAY,IAGXA,EACD,OACJ,MAAME,EAAc,CAAC,EAErB,IAAK,IAAI7iB,EAAI,EAAGA,EAAIsW,GAAcxa,OAAQkE,IAAK,CAC3C,MAAMyF,EAAM,SAAW6Q,GAActW,GAEjC+U,EAAatP,KACbod,EAAYpd,GAAOsP,EAAatP,GAChCiB,EAAcoc,eAAerd,EAAK,GAE1C,CAGAiB,EAAcqC,SAEd,IAAK,MAAMtD,KAAOod,EACdnc,EAAcoc,eAAerd,EAAKod,EAAYpd,IAIlDiB,EAAcyN,gBAClB,CACA4O,mBAAAA,GAAoC,IAAhBC,EAASnnB,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,CAAC,EAC7B,IAAImjB,EAAIiE,EAER,MAAMC,EAAS,CAAC,EAChB,IAAK/nB,KAAK+K,UAAY/K,KAAKsc,MACvB,OAAOyL,EACX,IAAK/nB,KAAKyd,UACN,MAAO,CAAEuK,WAAY,UAGrBD,EAAOC,WAAa,GAExB,MAAMnW,EAAoB7R,KAAKghB,uBAC/B,GAAIhhB,KAAKuc,WAQL,OAPAvc,KAAKuc,YAAa,EAClBwL,EAAO7B,QAAU,GACjB6B,EAAOE,eACHC,EAAAA,GAAAA,GAAmBL,EAAUI,gBAAkB,GACnDF,EAAOld,UAAYgH,EACbA,EAAkB7R,KAAK4Z,aAAc,IACrC,OACCmO,EAEX,MAAM5O,EAAOnZ,KAAK8jB,UAClB,IAAK9jB,KAAKqT,kBAAoBrT,KAAKuH,SAAW4R,EAAKhY,OAAQ,CACvD,MAAMgnB,EAAc,CAAC,EAerB,OAdInoB,KAAKqB,QAAQ+S,WACb+T,EAAYjC,aACsBtlB,IAA9BZ,KAAK4Z,aAAasM,QACZlmB,KAAK4Z,aAAasM,QAClB,EACViC,EAAYF,eACRC,EAAAA,GAAAA,GAAmBL,EAAUI,gBAAkB,IAEnDjoB,KAAKwd,eAAiBvU,EAAajJ,KAAK4Z,gBACxCuO,EAAYtd,UAAYgH,EAClBA,EAAkB,CAAC,EAAG,IACtB,OACN7R,KAAKwd,cAAe,GAEjB2K,CACX,CACA,MAAMC,EAAiBjP,EAAKU,iBAAmBV,EAAKS,aACpD5Z,KAAK+mB,0BACLgB,EAAOld,UAAYyP,GAAyBta,KAAK+kB,6BAA8B/kB,KAAKoT,UAAWgV,GAC3FvW,IACAkW,EAAOld,UAAYgH,EAAkBuW,EAAgBL,EAAOld,YAEhE,MAAM,EAAE/J,EAAC,EAAEC,GAAMf,KAAKqT,gBACtB0U,EAAOM,gBAAmB,GAAa,IAAXvnB,EAAE4F,WAA4B,IAAX3F,EAAE2F,YAC7CyS,EAAKU,gBAKLkO,EAAO7B,QACH/M,IAASnZ,KACiG,QAAnG8nB,EAAuC,QAAjCjE,EAAKuE,EAAelC,eAA4B,IAAPrC,EAAgBA,EAAK7jB,KAAK4Z,aAAasM,eAA4B,IAAP4B,EAAgBA,EAAK,EACjI9nB,KAAK0Z,gBACD1Z,KAAK4Z,aAAasM,QAClBkC,EAAejC,YAO7B4B,EAAO7B,QACH/M,IAASnZ,UACwBY,IAA3BwnB,EAAelC,QACXkC,EAAelC,QACf,QAC2BtlB,IAA/BwnB,EAAejC,YACXiC,EAAejC,YACf,EAKlB,IAAK,MAAM7b,KAAOge,GAAAA,EAAiB,CAC/B,QAA4B1nB,IAAxBwnB,EAAe9d,GACf,SACJ,MAAM,QAAE2I,EAAO,QAAE2D,GAAY0R,GAAAA,EAAgBhe,GAOvCie,EAAiC,SAArBR,EAAOld,UACnBud,EAAe9d,GACf2I,EAAQmV,EAAe9d,GAAM6O,GACnC,GAAIvC,EAAS,CACT,MAAM4R,EAAM5R,EAAQjW,OACpB,IAAK,IAAIkE,EAAI,EAAGA,EAAI2jB,EAAK3jB,IACrBkjB,EAAOnR,EAAQ/R,IAAM0jB,CAE7B,MAEIR,EAAOzd,GAAOie,CAEtB,CAYA,OANIvoB,KAAKqB,QAAQ+S,WACb2T,EAAOE,cACH9O,IAASnZ,MACHkoB,EAAAA,GAAAA,GAAmBL,EAAUI,gBAAkB,GAC/C,QAEPF,CACX,CACAnG,aAAAA,GACI5hB,KAAKyZ,WAAazZ,KAAK2Z,cAAW/Y,CACtC,CAEA6nB,SAAAA,GACIzoB,KAAKyP,KAAKwN,MAAM9C,SAASpa,IAAW,IAAI8jB,EAAI,OAAwC,QAAhCA,EAAK9jB,EAAK2V,wBAAqC,IAAPmO,OAAgB,EAASA,EAAGhW,MAAM,IAC9H7N,KAAKyP,KAAKwN,MAAM9C,QAAQiH,IACxBphB,KAAKyP,KAAKkO,YAAY+K,OAC1B,EAER,CACA,SAAS1W,GAAajS,GAClBA,EAAKiS,cACT,CACA,SAASuP,GAAmBxhB,GACxB,IAAI8jB,EACJ,MAAMlK,GAAuC,QAA1BkK,EAAK9jB,EAAK0Z,kBAA+B,IAAPoK,OAAgB,EAASA,EAAGlK,WAAa5Z,EAAK4Z,SACnG,GAAI5Z,EAAK4V,UACL5V,EAAKwH,QACLoS,GACA5Z,EAAKue,aAAa,aAAc,CAChC,MAAQrR,UAAW1F,EAAQyb,YAAa2F,GAAmB5oB,EAAKwH,QAC1D,cAAE0f,GAAkBlnB,EAAKsB,QACzB0iB,EAAWpK,EAASlT,SAAW1G,EAAKwH,OAAOd,OAG3B,SAAlBwgB,EACA3e,GAAUpC,IACN,MAAM0iB,EAAe7E,EACfpK,EAASqJ,YAAY9c,GACrByT,EAAS1M,UAAU/G,GACnBvF,EAASsF,EAAW2iB,GAC1BA,EAAaxiB,IAAMmB,EAAOrB,GAAME,IAChCwiB,EAAaziB,IAAMyiB,EAAaxiB,IAAMzF,CAAM,IAG3CqmB,GAA0BC,EAAetN,EAAS1M,UAAW1F,IAClEe,GAAUpC,IACN,MAAM0iB,EAAe7E,EACfpK,EAASqJ,YAAY9c,GACrByT,EAAS1M,UAAU/G,GACnBvF,EAASsF,EAAWsB,EAAOrB,IACjC0iB,EAAaziB,IAAMyiB,EAAaxiB,IAAMzF,EAIlCZ,EAAK0f,iBAAmB1f,EAAK2V,mBAC7B3V,EAAKkc,mBAAoB,EACzBlc,EAAK0f,eAAevZ,GAAMC,IACtBpG,EAAK0f,eAAevZ,GAAME,IAAMzF,EACxC,IAGR,MAAMkoB,EAAczgB,IACpBpB,EAAa6hB,EAAathB,EAAQoS,EAAS1M,WAC3C,MAAM6b,EAAc1gB,IAChB2b,EACA/c,EAAa8hB,EAAa/oB,EAAKojB,eAAewF,GAAgB,GAAOhP,EAASqJ,aAG9Ehc,EAAa8hB,EAAavhB,EAAQoS,EAAS1M,WAE/C,MAAMuF,GAAoBkG,GAAYmQ,GACtC,IAAIvJ,GAA2B,EAC/B,IAAKvf,EAAK0Z,WAAY,CAClB,MAAMiK,EAAiB3jB,EAAKkkB,6BAK5B,GAAIP,IAAmBA,EAAejK,WAAY,CAC9C,MAAQE,SAAUoP,EAAgBxhB,OAAQyhB,GAAiBtF,EAC3D,GAAIqF,GAAkBC,EAAc,CAChC,MAAMC,EAAmB5gB,IACzBb,EAAqByhB,EAAkBtP,EAAS1M,UAAW8b,EAAe9b,WAC1E,MAAMmY,EAAiB/c,IACvBb,EAAqB4d,EAAgB7d,EAAQyhB,EAAa/b,WACrD0L,GAAiBsQ,EAAkB7D,KACpC9F,GAA2B,GAE3BoE,EAAeriB,QAAQ6e,aACvBngB,EAAK0f,eAAiB2F,EACtBrlB,EAAKmkB,qBAAuB+E,EAC5BlpB,EAAK2jB,eAAiBA,EAE9B,CACJ,CACJ,CACA3jB,EAAKge,gBAAgB,YAAa,CAC9BxW,SACAoS,WACApV,MAAOukB,EACPD,cACArW,mBACA8M,4BAER,MACK,GAAIvf,EAAK4V,SAAU,CACpB,MAAM,eAAEd,GAAmB9U,EAAKsB,QAChCwT,GAAkBA,GACtB,CAMA9U,EAAKsB,QAAQ8O,gBAAavP,CAC9B,CACA,SAASsc,GAAoBnd,GAIzBqb,GAAoBC,aACftb,EAAKsH,SAQLtH,EAAKqkB,iBACNrkB,EAAKkc,kBAAoBlc,EAAKsH,OAAO4U,mBAOzClc,EAAKmc,0BAA4Bnc,EAAKmc,wBAA0BmG,QAAQtiB,EAAKkc,mBACzElc,EAAKsH,OAAO4U,mBACZlc,EAAKsH,OAAO6U,0BAChBnc,EAAKoc,mBAAqBpc,EAAKoc,iBAAmBpc,EAAKsH,OAAO8U,kBAClE,CACA,SAASkB,GAAgBtd,GACrBA,EAAKkc,kBACDlc,EAAKmc,wBACDnc,EAAKoc,kBACD,CAChB,CACA,SAASyF,GAAc7hB,GACnBA,EAAK6hB,eACT,CACA,SAASR,GAAkBrhB,GACvBA,EAAKqhB,mBACT,CACA,SAASC,GAAmBthB,GACxBA,EAAKga,eAAgB,CACzB,CACA,SAASuH,GAAoBvhB,GACzB,MAAM,cAAEwL,GAAkBxL,EAAKsB,QAC3BkK,GAAiBA,EAAcgB,WAAW2c,uBAC1C3d,EAAc8S,OAAO,uBAEzBte,EAAK8b,gBACT,CACA,SAASsD,GAAgBpf,GACrBA,EAAKof,kBACLpf,EAAKyjB,YAAczjB,EAAK0f,eAAiB1f,EAAKoB,YAASP,EACvDb,EAAKkc,mBAAoB,CAC7B,CACA,SAASkB,GAAmBpd,GACxBA,EAAKod,oBACT,CACA,SAASC,GAAerd,GACpBA,EAAKqd,gBACT,CACA,SAAS2D,GAAchhB,GACnBA,EAAKghB,eACT,CACA,SAASc,GAAoBxM,GACzBA,EAAMgF,oBACV,CACA,SAAS0L,GAAaH,EAAQrhB,EAAOuT,GACjC8N,EAAO7e,WAAYH,EAAAA,EAAAA,GAAIrC,EAAMwC,UAAW,EAAG+Q,GAC3C8N,EAAO/e,OAAQD,EAAAA,EAAAA,GAAIrC,EAAMsC,MAAO,EAAGiR,GACnC8N,EAAOlf,OAASnC,EAAMmC,OACtBkf,EAAOjf,YAAcpC,EAAMoC,WAC/B,CACA,SAASqf,GAAQJ,EAAQC,EAAMC,EAAIhO,GAC/B8N,EAAOxf,KAAMQ,EAAAA,EAAAA,GAAIif,EAAKzf,IAAK0f,EAAG1f,IAAK0R,GACnC8N,EAAOzf,KAAMS,EAAAA,EAAAA,GAAIif,EAAK1f,IAAK2f,EAAG3f,IAAK2R,EACvC,CAKA,SAAS2N,GAAoB1lB,GACzB,OAAQA,EAAK8Z,sBAAwDjZ,IAArCb,EAAK8Z,gBAAgBsM,WACzD,CACA,MAAMvG,GAA0B,CAC5BuJ,SAAU,IACVC,KAAM,CAAC,GAAK,EAAG,GAAK,IAElBC,GAAqBC,GAAgC,qBAAdC,WACzCA,UAAUC,UAAUC,cAAcC,SAASJ,GAMzCK,GAAaN,GAAkB,kBAAoBA,GAAkB,WACrExnB,KAAK+W,MACLhB,EAAAA,EACN,SAASmL,GAAU7c,GAEfA,EAAKE,IAAMujB,GAAWzjB,EAAKE,KAC3BF,EAAKC,IAAMwjB,GAAWzjB,EAAKC,IAC/B,CAKA,SAAS6gB,GAA0BC,EAAetN,EAAUpS,GACxD,MAA0B,aAAlB0f,GACe,oBAAlBA,IACI5gB,EAAOwS,GAAYc,GAAWd,GAAYtR,GAAS,GAChE,CKh9CA,MAAMqiB,GAAyBpO,GAAqB,CAChDC,qBAAsBA,CAACoO,EAAKxL,IAAWnd,EAAY2oB,EAAK,SAAUxL,GAClE1C,cAAeA,KAAA,CACX7a,EAAGgpB,SAASC,gBAAgBC,YAAcF,SAASG,KAAKD,WACxDjpB,EAAG+oB,SAASC,gBAAgBG,WAAaJ,SAASG,KAAKC,YAE3DtO,kBAAmBA,KAAM,ICNvBvM,GAAqB,CACvB1C,aAAS/L,GAEPupB,GAAqB3O,GAAqB,CAC5CG,cAAgB5Q,IAAQ,CACpBjK,EAAGiK,EAASif,WACZjpB,EAAGgK,EAASmf,YAEhBxO,cAAeA,KACX,IAAKrM,GAAmB1C,QAAS,CAC7B,MAAMyd,EAAe,IAAIR,GAAuB,CAAC,GACjDQ,EAAa7L,MAAMra,QACnBkmB,EAAaxV,WAAW,CAAE0N,cAAc,IACxCjT,GAAmB1C,QAAUyd,CACjC,CACA,OAAO/a,GAAmB1C,OAAO,EAErCkP,eAAgBA,CAAC9Q,EAAUzE,KACvByE,EAAS+G,MAAMjH,eAAsBjK,IAAV0F,EAAsBA,EAAQ,MAAM,EAEnEsV,kBAAoB7Q,GAAasX,QAAuD,UAA/Cne,OAAOmmB,iBAAiBtf,GAAUuf,YClBzE1kB,GAAO,CACT2kB,IAAK,CACD1qB,QrBIR,cAAyBA,EACrBC,WAAAA,GACI0qB,SAAS9pB,WACTV,KAAKyqB,0BAA4B7S,EAAAA,CACrC,CACA8S,aAAAA,CAAcC,GACV3qB,KAAK4qB,QAAU,IAAI7oB,EAAW4oB,EAAkB3qB,KAAK6qB,oBAAqB,CAAE5oB,mBAAoBjC,KAAKD,KAAK+N,yBAC9G,CACA+c,iBAAAA,GACI,MAAM,kBAAEC,EAAiB,WAAEC,EAAU,MAAEC,EAAK,SAAEC,GAAajrB,KAAKD,KAAKwM,WACrE,MAAO,CACHxI,eAAgB2O,GAAaoY,GAC7B3nB,QAASuP,GAAaqY,GACtB3nB,OAAQ4nB,EACRtnB,MAAOA,CAACtD,EAAOkC,YACJtC,KAAK4qB,QACRK,GACA1nB,EAAAA,GAAMrD,QAAO,IAAM+qB,EAAS7qB,EAAOkC,IACvC,EAGZ,CACAic,KAAAA,GACIve,KAAKyqB,0BAA4BhpB,EAAgBzB,KAAKD,KAAK4M,QAAS,eAAgBvM,GAAUJ,KAAK0qB,cAActqB,IACrH,CACAF,MAAAA,GACIF,KAAK4qB,SAAW5qB,KAAK4qB,QAAQzmB,eAAenE,KAAK6qB,oBACrD,CACApK,OAAAA,GACIzgB,KAAKyqB,4BACLzqB,KAAK4qB,SAAW5qB,KAAK4qB,QAAQnnB,KACjC,IqBjCAmC,KAAM,CACF/F,QCNR,cAA0BA,EACtBC,WAAAA,CAAYC,GACRyqB,MAAMzqB,GACNC,KAAKkrB,oBAAsBtT,EAAAA,EAC3B5X,KAAKgE,gBAAkB4T,EAAAA,EACvB5X,KAAKmrB,SAAW,IAAI7f,GAA0BvL,EAClD,CACAwe,KAAAA,GAGI,MAAM,aAAE6M,GAAiBprB,KAAKD,KAAKwM,WAC/B6e,IACAprB,KAAKkrB,oBAAsBE,EAAaC,UAAUrrB,KAAKmrB,WAE3DnrB,KAAKgE,gBAAkBhE,KAAKmrB,SAASlZ,gBAAkB2F,EAAAA,CAC3D,CACA6I,OAAAA,GACIzgB,KAAKkrB,sBACLlrB,KAAKgE,iBACT,GDZIsnB,eAAgBnB,GAChBlU,cAAaA,KETf1O,GAAS,CACXA,OAAQ,CACJ+jB,eAAgBnB,GAChBlU,cAAaA,K,0BCNrB,SAASsV,GAAeld,EAAMmd,GAC1B,IAAKrN,MAAMsN,QAAQD,GACf,OAAO,EACX,MAAME,EAAaF,EAAK7qB,OACxB,GAAI+qB,IAAerd,EAAK1N,OACpB,OAAO,EACX,IAAK,IAAIkE,EAAI,EAAGA,EAAI6mB,EAAY7mB,IAC5B,GAAI2mB,EAAK3mB,KAAOwJ,EAAKxJ,GACjB,OAAO,EAEf,OAAO,CACX,C,gDCHA,MAAM8mB,GAAuB,IAAIC,GAAAA,GAAsBC,UACjDC,GAAoBF,GAAAA,EAAqBjrB,OAI/C,SAASorB,GAAqBxgB,GAC1B,IAAI8T,EAJR,SAAqB9T,GACjB,OAAQygB,GAAerb,QAAQC,IAAIob,EAAWC,KAAI3nB,IAAA,IAAC,UAAEqiB,EAAS,QAAEtlB,GAASiD,EAAA,OAAK4nB,EAAAA,GAAAA,GAAqB3gB,EAAeob,EAAWtlB,EAAQ,IACzI,CAEkB8qB,CAAY5gB,GAC1B,MAAM6gB,EAoSC,CACH/M,QAASgN,IAAgB,GACzBC,YAAaD,KACbE,WAAYF,KACZG,SAAUH,KACVI,UAAWJ,KACXK,WAAYL,KACZM,KAAMN,MA1SV,IAAIO,GAAkB,EAKtB,MAAMC,EAA0BA,CAACC,EAAKC,KAClC,MAAMC,GAAWC,EAAAA,GAAAA,GAAe1hB,EAAewhB,GAC/C,GAAIC,EAAU,CACV,MAAM,WAAE7c,EAAU,cAAE+c,KAAkB/rB,GAAW6rB,EACjDF,EAAM,IAAKA,KAAQ3rB,KAAW+rB,EAClC,CACA,OAAOJ,CAAG,EAmBd,SAASK,EAAe9rB,EAAS+rB,GAC7B,MAAMnc,EAAQ1F,EAAcgB,WACtB2J,EAAU3K,EAAc8hB,mBAAkB,IAAS,CAAC,EAKpDrB,EAAa,GAKbsB,EAAc,IAAIvR,IAMxB,IAAIwR,EAAkB,CAAC,EAKnBC,EAAsBpoB,IAO1B,IAAK,IAAIP,EAAI,EAAGA,EAAIinB,GAAmBjnB,IAAK,CACxC,MAAMhB,EAAO8nB,GAAqB9mB,GAC5B4oB,EAAYrB,EAAMvoB,GAClB6pB,OAAuB9sB,IAAhBqQ,EAAMpN,GAAsBoN,EAAMpN,GAAQqS,EAAQrS,GACzD8pB,GAAgBC,EAAAA,GAAAA,GAAeF,GAK/BG,EAAchqB,IAASupB,EAAoBK,EAAUK,SAAW,MAClD,IAAhBD,IACAL,EAAsB3oB,GAO1B,IAAIkpB,EAAcL,IAASxX,EAAQrS,IAAS6pB,IAASzc,EAAMpN,IAAS8pB,EAepE,GAXII,GACAnB,GACArhB,EAAcyiB,yBACdD,GAAc,GAMlBN,EAAUQ,cAAgB,IAAKV,IAI7BE,EAAUK,UAA4B,OAAhBD,IAElBH,IAASD,EAAUS,WAErBC,EAAAA,GAAAA,GAAoBT,IACJ,mBAATA,EACP,SAOJ,MAAMU,EAAmBC,GAAuBZ,EAAUS,SAAUR,GACpE,IAAIY,EAAoBF,GAEnBvqB,IAASupB,GACNK,EAAUK,WACTC,GACDJ,GAEH9oB,EAAI2oB,GAAuBG,EAKhC,MAAMY,EAAiBpQ,MAAMsN,QAAQiC,GAAQA,EAAO,CAACA,GAKrD,IAAIc,EAAiBD,EAAeE,OAAO5B,EAAyB,CAAC,IACjD,IAAhBgB,IACAW,EAAiB,CAAC,GAUtB,MAAM,mBAAEE,EAAqB,CAAC,GAAMjB,EAC9BkB,EAAU,IACTD,KACAF,GAEDI,EAAiBtkB,IACnBgkB,GAAoB,EACpBhB,EAAY5M,OAAOpW,GACnBmjB,EAAUoB,eAAevkB,IAAO,CAAI,EAExC,IAAK,MAAMA,KAAOqkB,EAAS,CACvB,MAAMtgB,EAAOmgB,EAAelkB,GACtBkhB,EAAOkD,EAAmBpkB,GAE5BijB,EAAgBuB,eAAexkB,KAK/B+D,IAASmd,GAKLuD,EAAAA,GAAAA,GAAkB1gB,KAAS0gB,EAAAA,GAAAA,GAAkBvD,IACxCD,GAAeld,EAAMmd,IAAS4C,EAC/BQ,EAActkB,GAOdmjB,EAAUQ,cAAc3jB,IAAO,OAGrB1J,IAATyN,EAELugB,EAActkB,GAIdgjB,EAAY9Y,IAAIlK,QAGN1J,IAATyN,GAAsBif,EAAYzP,IAAIvT,GAK3CskB,EAActkB,GAOdmjB,EAAUQ,cAAc3jB,IAAO,EAEvC,CAKAmjB,EAAUS,SAAWR,EACrBD,EAAUiB,mBAAqBF,EAI3Bf,EAAUK,WACVP,EAAkB,IAAKA,KAAoBiB,IAE3C5B,GAAmBrhB,EAAcyjB,wBACjCV,GAAoB,GAOpBA,IAAsBP,GACtB/B,EAAW9oB,QAAQqrB,EAAetC,KAAKtF,IAAS,CAC5CA,UAAWA,EACXtlB,QAAS,CAAEwC,UAASxC,OAGhC,CAMA,GAAIisB,EAAY2B,KAAM,CAClB,MAAMC,EAAoB,CAAC,EAC3B5B,EAAYnT,SAAS7P,IACjB,MAAM6kB,EAAiB5jB,EAAc6jB,cAAc9kB,QAC5B1J,IAAnBuuB,IACAD,EAAkB5kB,GAAO6kB,EAC7B,IAEJnD,EAAW9oB,KAAK,CAAEyjB,UAAWuI,GACjC,CACA,IAAIG,EAAgBhN,QAAQ2J,EAAWrrB,QAOvC,OANIisB,IACkB,IAAlB3b,EAAMG,UACL7F,EAAcyiB,yBACfqB,GAAgB,GAEpBzC,GAAkB,EACXyC,EAAgBhQ,EAAQ2M,GAAcrb,QAAQ2e,SACzD,CAkBA,MAAO,CACHnC,iBACA/f,UAhBJ,SAAmBvJ,EAAMiqB,EAAUzsB,GAC/B,IAAIwiB,EAEJ,GAAIuI,EAAMvoB,GAAMiqB,WAAaA,EACzB,OAAOnd,QAAQ2e,UAEsB,QAAxCzL,EAAKtY,EAAcgkB,uBAAoC,IAAP1L,GAAyBA,EAAG1J,SAASc,IAAY,IAAI4I,EAAI,OAAuC,QAA/BA,EAAK5I,EAAM9N,sBAAmC,IAAP0W,OAAgB,EAASA,EAAGzW,UAAUvJ,EAAMiqB,EAAS,IAC9M1B,EAAMvoB,GAAMiqB,SAAWA,EACvB,MAAM9B,EAAamB,EAAe9rB,EAASwC,GAC3C,IAAK,MAAMyG,KAAO8hB,EACdA,EAAM9hB,GAAK2jB,cAAgB,CAAC,EAEhC,OAAOjC,CACX,EAIIwD,mBA5PJ,SAA4BC,GACxBpQ,EAAUoQ,EAAalkB,EAC3B,EA2PImkB,SAAUA,IAAMtD,EAExB,CACA,SAASiC,GAAuB7C,EAAMnd,GAClC,MAAoB,kBAATA,EACAA,IAASmd,IAEXrN,MAAMsN,QAAQpd,KACXkd,GAAeld,EAAMmd,EAGrC,CACA,SAASa,KACL,MAAO,CACHyB,SAFyBptB,UAAAC,OAAA,QAAAC,IAAAF,UAAA,IAAAA,UAAA,GAGzButB,cAAe,CAAC,EAChBY,eAAgB,CAAC,EACjBH,mBAAoB,CAAC,EAE7B,CC/SA,IAAIrY,GAAK,ECCT,MAAM2V,GAAa,CACfrF,UAAW,CACP9mB,QCDR,cAA+BA,EAM3BC,WAAAA,CAAYC,GACRyqB,MAAMzqB,GACNA,EAAKoN,iBAAmBpN,EAAKoN,eAAiB4e,GAAqBhsB,GACvE,CACA4vB,mCAAAA,GACI,MAAM,QAAEtQ,GAAYrf,KAAKD,KAAKwM,WAC9BvM,KAAKygB,WACD0N,EAAAA,GAAAA,GAAoB9O,KACpBrf,KAAKygB,QAAUpB,EAAQgM,UAAUrrB,KAAKD,MAE9C,CAIAwe,KAAAA,GACIve,KAAK2vB,qCACT,CACAzvB,MAAAA,GACI,MAAM,QAAEmf,GAAYrf,KAAKD,KAAKwM,YACtB8S,QAASuQ,GAAgB5vB,KAAKD,KAAKgV,WAAa,CAAC,EACrDsK,IAAYuQ,GACZ5vB,KAAK2vB,qCAEb,CACAlP,OAAAA,GAAY,ID3BZkM,KAAM,CACF9sB,QDLR,cAAmCA,EAC/BC,WAAAA,GACI0qB,SAAS9pB,WACTV,KAAKqW,GAAKA,IACd,CACAnW,MAAAA,GACI,IAAKF,KAAKD,KAAKkM,gBACX,OACJ,MAAM,UAAEC,EAAS,eAAE2I,EAAc,OAAEgb,GAAW7vB,KAAKD,KAAKkM,iBAChDC,UAAW4jB,GAAkB9vB,KAAKD,KAAKgwB,qBAAuB,CAAC,EACvE,IAAK/vB,KAAKD,KAAKoN,gBAAkBjB,IAAc4jB,EAC3C,OAEJ,MAAME,EAAgBhwB,KAAKD,KAAKoN,eAAeC,UAAU,QAASlB,EAAW,CAAE2jB,OAAmB,OAAXA,QAA8B,IAAXA,EAAoBA,EAAS7vB,KAAKD,KAAKwM,WAAWsjB,SACxJhb,IAAmB3I,GACnB8jB,EAAcnf,MAAK,IAAMgE,EAAe7U,KAAKqW,KAErD,CACAkI,KAAAA,GACI,MAAM,SAAE9J,GAAazU,KAAKD,KAAKkM,iBAAmB,CAAC,EAC/CwI,IACAzU,KAAKygB,QAAUhM,EAASzU,KAAKqW,IAErC,CACAoK,OAAAA,GAAY,KGrBhB,SAASwP,GAAclwB,EAAM+tB,GACzB,MAAM1sB,EAAY,WAAa0sB,EAAW,QAAU,SAC9CoC,EAAe,WAAapC,EAAW,QAAU,OAYvD,OAAOrsB,EAAgB1B,EAAK4M,QAASvL,GAXjB+uB,CAAC/vB,EAAOkC,KACxB,GAAmB,UAAflC,EAAMyD,MAAoBkC,IAC1B,OACJ,MAAMkL,EAAQlR,EAAKwM,WACfxM,EAAKoN,gBAAkB8D,EAAMsb,YAC7BxsB,EAAKoN,eAAeC,UAAU,aAAc0gB,GAE5C7c,EAAMif,IACN3sB,EAAAA,GAAMrD,QAAO,IAAM+Q,EAAMif,GAAc9vB,EAAOkC,IAClD,GAEyD,CACzDhB,SAAUvB,EAAKwM,WAAW2jB,IAElC,CChBA,MAAME,GAAgBA,CAAC/oB,EAAQ4T,MACtBA,IAGI5T,IAAW4T,GAITmV,GAAc/oB,EAAQ4T,EAAMoV,gBCL3C,SAASC,GAA0BhrB,EAAMrE,GACrC,IAAKA,EACD,OACJ,MAAMsvB,EAAwB,IAAIC,aAAa,UAAYlrB,GAC3DrE,EAAQsvB,EAAuB/vB,EAAiB+vB,GACpD,CCVA,MAAME,GAAoB,IAAIplB,QAMxBqlB,GAAY,IAAIrlB,QAChBslB,GAAwBC,IAC1B,MAAMroB,EAAWkoB,GAAkB5jB,IAAI+jB,EAAMzvB,QAC7CoH,GAAYA,EAASqoB,EAAM,EAEzBC,GAA4BC,IAC9BA,EAAQ3W,QAAQwW,GAAqB,EAqBzC,SAASI,GAAoB3hB,EAAS/N,EAASkH,GAC3C,MAAMyoB,EApBV,SAAiC1sB,GAAuB,IAAtB,KAAEmL,KAASpO,GAASiD,EAClD,MAAM2sB,EAAaxhB,GAAQqa,SAItB4G,GAAU7S,IAAIoT,IACfP,GAAUniB,IAAI0iB,EAAY,CAAC,GAE/B,MAAMC,EAAgBR,GAAU7jB,IAAIokB,GAC9B3mB,EAAM6mB,KAAKC,UAAU/vB,GAQ3B,OAHK6vB,EAAc5mB,KACf4mB,EAAc5mB,GAAO,IAAI+mB,qBAAqBR,GAA0B,CAAEphB,UAASpO,KAEhF6vB,EAAc5mB,EACzB,CAEsCgnB,CAAyBjwB,GAG3D,OAFAovB,GAAkBliB,IAAIa,EAAS7G,GAC/ByoB,EAA0BO,QAAQniB,GAC3B,KACHqhB,GAAkB/P,OAAOtR,GACzB4hB,EAA0BQ,UAAUpiB,EAAQ,CAEpD,CC3CA,MAAMqiB,GAAiB,CACnBjM,KAAM,EACN5U,IAAK,GCAT,MAAM8gB,GAAoB,CACtBC,OAAQ,CACJ9xB,QDAR,cAA4BA,EACxBC,WAAAA,GACI0qB,SAAS9pB,WACTV,KAAK4xB,gBAAiB,EACtB5xB,KAAK6xB,UAAW,CACpB,CACAC,aAAAA,GACI9xB,KAAKygB,UACL,MAAM,SAAEsR,EAAW,CAAC,GAAM/xB,KAAKD,KAAKwM,YAC9B,KAAEkD,EAAMuiB,OAAQC,EAAU,OAAEC,EAAS,OAAM,KAAEC,GAASJ,EACtD1wB,EAAU,CACZoO,KAAMA,EAAOA,EAAK9C,aAAU/L,EAC5BqxB,aACAG,UAA6B,kBAAXF,EAAsBA,EAAST,GAAeS,IA+BpE,OAAOnB,GAAoB/wB,KAAKD,KAAK4M,QAAStL,GA7BhBuvB,IAC1B,MAAM,eAAEyB,GAAmBzB,EAI3B,GAAI5wB,KAAK6xB,WAAaQ,EAClB,OAMJ,GALAryB,KAAK6xB,SAAWQ,EAKZF,IAASE,GAAkBryB,KAAK4xB,eAChC,OAEKS,IACLryB,KAAK4xB,gBAAiB,GAEtB5xB,KAAKD,KAAKoN,gBACVnN,KAAKD,KAAKoN,eAAeC,UAAU,cAAeilB,GAMtD,MAAM,gBAAEC,EAAe,gBAAEC,GAAoBvyB,KAAKD,KAAKwM,WACjDhE,EAAW8pB,EAAiBC,EAAkBC,EACpDhqB,GAAYA,EAASqoB,EAAM,GAGnC,CACArS,KAAAA,GACIve,KAAK8xB,eACT,CACA5xB,MAAAA,GACI,GAAoC,qBAAzBmxB,qBACP,OACJ,MAAM,MAAEpgB,EAAK,UAAE8D,GAAc/U,KAAKD,KAC5ByyB,EAAoB,CAAC,SAAU,SAAU,QAAQhN,KAO/D,SAAiClhB,GAA0D,IAAzD,SAAEytB,EAAW,CAAC,GAAGztB,GAAIytB,SAAUU,EAAe,CAAC,GAAG/xB,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,CAAC,EACpF,OAAQ4E,GAASysB,EAASzsB,KAAUmtB,EAAantB,EACrD,CAToEotB,CAAyBzhB,EAAO8D,IACxFyd,GACAxyB,KAAK8xB,eAEb,CACArR,OAAAA,GAAY,ICxDZkS,IAAK,CACD9yB,QHMR,cAA2BA,EACvBC,WAAAA,GACI0qB,SAAS9pB,WACTV,KAAK4yB,qBAAuBhb,EAAAA,EAC5B5X,KAAK6yB,mBAAqBjb,EAAAA,EAC1B5X,KAAK8yB,0BAA4Blb,EAAAA,EACjC5X,KAAK+yB,kBAAoB,CAAC7wB,EAAY8wB,KAElC,GADAhzB,KAAK6yB,qBACD7yB,KAAKizB,WACL,OACJ,MAAMhiB,EAAQjR,KAAKD,KAAKwM,WAelB2mB,EAA0BzxB,EAAgByC,OAAQ,aAdhCivB,CAACC,EAAUC,KAC/B,IAAKrzB,KAAKszB,gBACN,OACJ,MAAM,MAAEC,EAAK,YAAEC,GAAgBxzB,KAAKD,KAAKwM,WACzChJ,EAAAA,GAAMrD,QAAO,KAKRkwB,GAAcpwB,KAAKD,KAAK4M,QAASymB,EAASjyB,QAErCoyB,GAASA,EAAMH,EAAUC,GADzBG,GAAeA,EAAYJ,EAAUC,EACJ,GACzC,GAEgF,CAAE/xB,UAAW2P,EAAMsiB,OAAStiB,EAAmB,eAC/HwiB,EAA8BhyB,EAAgByC,OAAQ,iBAAiB,CAACwvB,EAAaC,IAAe3zB,KAAK4zB,YAAYF,EAAaC,IAAa,CAAEryB,UAAW2P,EAAMuiB,aAAeviB,EAAuB,mBAC9MjR,KAAK6yB,oBAAqB5uB,EAAAA,EAAAA,GAAKivB,EAAyBO,GACxDzzB,KAAK6zB,WAAW3xB,EAAY8wB,EAAU,EAE1ChzB,KAAK8zB,qBAAuB,KACxB,MAmBMC,EAAwB7yB,EAAYlB,KAAKD,KAAK4M,QAAS,WAnBtCqnB,IACnB,GAAyB,UAArBA,EAAa1pB,KAAmBtK,KAAKizB,WACrC,OAWJjzB,KAAK6yB,qBACL7yB,KAAK6yB,mBAAqB3xB,EAAYlB,KAAKD,KAAK4M,QAAS,SAXpCsnB,IACM,UAAnBA,EAAW3pB,KAAoBtK,KAAKszB,iBAExChD,GAA0B,MAAM,CAAClwB,EAAOkC,KACpC,MAAM,MAAEixB,GAAUvzB,KAAKD,KAAKwM,WACxBgnB,GACAhwB,EAAAA,GAAMrD,QAAO,IAAMqzB,EAAMnzB,EAAOkC,IACpC,GACF,IAINguB,GAA0B,QAAQ,CAAClwB,EAAOkC,KACtCtC,KAAK6zB,WAAWzzB,EAAOkC,EAAK,GAC9B,IAQA4xB,EAAqBhzB,EAAYlB,KAAKD,KAAK4M,QAAS,QALvCwnB,KACVn0B,KAAKizB,YAEV3C,GAA0B,UAAU,CAACoD,EAAaC,IAAe3zB,KAAK4zB,YAAYF,EAAaC,IAAY,IAG/G3zB,KAAK8yB,2BAA4B7uB,EAAAA,EAAAA,GAAK8vB,EAAuBG,EAAmB,CAExF,CACAL,UAAAA,CAAWzzB,EAAOkC,GACdtC,KAAKizB,YAAa,EAClB,MAAM,WAAEmB,EAAU,SAAE5H,GAAaxsB,KAAKD,KAAKwM,WAIvCigB,GAAYxsB,KAAKD,KAAKoN,gBACtBnN,KAAKD,KAAKoN,eAAeC,UAAU,YAAY,GAE/CgnB,GACA7wB,EAAAA,GAAMrD,QAAO,IAAMk0B,EAAWh0B,EAAOkC,IAE7C,CACAgxB,aAAAA,GACItzB,KAAK6yB,qBACL7yB,KAAKizB,YAAa,EAKlB,OAJcjzB,KAAKD,KAAKwM,WACdigB,UAAYxsB,KAAKD,KAAKoN,gBAC5BnN,KAAKD,KAAKoN,eAAeC,UAAU,YAAY,IAE3CrH,GACZ,CACA6tB,WAAAA,CAAYxzB,EAAOkC,GACf,IAAKtC,KAAKszB,gBACN,OACJ,MAAM,YAAEE,GAAgBxzB,KAAKD,KAAKwM,WAC9BinB,GACAjwB,EAAAA,GAAMrD,QAAO,IAAMszB,EAAYpzB,EAAOkC,IAE9C,CACAic,KAAAA,GACI,MAAMtN,EAAQjR,KAAKD,KAAKwM,WAClB8nB,EAAwB5yB,EAAgBzB,KAAKD,KAAK4M,QAAS,cAAe3M,KAAK+yB,kBAAmB,CAAEzxB,UAAW2P,EAAMmjB,YAAcnjB,EAAsB,kBACzJqjB,EAAsBpzB,EAAYlB,KAAKD,KAAK4M,QAAS,QAAS3M,KAAK8zB,sBACzE9zB,KAAK4yB,sBAAuB3uB,EAAAA,EAAAA,GAAKowB,EAAuBC,EAC5D,CACA7T,OAAAA,GACIzgB,KAAK4yB,uBACL5yB,KAAK6yB,qBACL7yB,KAAK8yB,2BACT,IGxGAyB,MAAO,CACH10B,QCTR,cAA2BA,EACvBC,WAAAA,GACI0qB,SAAS9pB,WACTV,KAAK8tB,UAAW,CACpB,CACA0G,OAAAA,GACI,IAAIC,GAAiB,EAOrB,IACIA,EAAiBz0B,KAAKD,KAAK4M,QAAQ+nB,QAAQ,iBAC/C,CACA,MAAOC,GACHF,GAAiB,CACrB,CACKA,GAAmBz0B,KAAKD,KAAKoN,iBAElCnN,KAAKD,KAAKoN,eAAeC,UAAU,cAAc,GACjDpN,KAAK8tB,UAAW,EACpB,CACA8G,MAAAA,GACS50B,KAAK8tB,UAAa9tB,KAAKD,KAAKoN,iBAEjCnN,KAAKD,KAAKoN,eAAeC,UAAU,cAAc,GACjDpN,KAAK8tB,UAAW,EACpB,CACAvP,KAAAA,GACIve,KAAKygB,SAAUxc,EAAAA,EAAAA,GAAK/C,EAAYlB,KAAKD,KAAK4M,QAAS,SAAS,IAAM3M,KAAKw0B,YAAYtzB,EAAYlB,KAAKD,KAAK4M,QAAS,QAAQ,IAAM3M,KAAK40B,WACzI,CACAnU,OAAAA,GAAY,IDtBZoU,MAAO,CACHh1B,QLQR,cAA2BA,EACvB0e,KAAAA,GACIve,KAAKygB,SAAUxc,EAAAA,EAAAA,GAAKgsB,GAAcjwB,KAAKD,MAAM,GAAOkwB,GAAcjwB,KAAKD,MAAM,GACjF,CACA0gB,OAAAA,GAAY,K,4FOfhB,MAAMqU,GAAwB,uDAQ9B,MAAMC,GAAW,EACjB,SAASC,GAAiBroB,EAASyC,GAAoB,IAAXyL,EAAKna,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,GAChDwO,EAAAA,EAAAA,GAAU2L,GAASka,GAAW,yDAAwDpoB,yDACtF,MAAOsoB,EAAOC,GAVlB,SAA0BvoB,GACtB,MAAMwoB,EAAQL,GAAsBM,KAAKzoB,GACzC,IAAKwoB,EACD,MAAO,CAAC,GACZ,MAAO,CAAEF,EAAOC,GAAYC,EAC5B,MAAO,CAACF,EAAOC,EACnB,CAI8BG,CAAiB1oB,GAE3C,IAAKsoB,EACD,OAEJ,MAAMjI,EAAW9oB,OAAOmmB,iBAAiBjb,GAASkmB,iBAAiBL,GACnE,GAAIjI,EAAU,CACV,MAAMuI,EAAUvI,EAASwI,OACzB,OAAOC,EAAAA,GAAAA,GAAkBF,GAAWroB,WAAWqoB,GAAWA,CAC9D,CACK,OAAIG,EAAAA,GAAAA,IAAmBR,GAEjBF,GAAiBE,EAAU9lB,EAASyL,EAAQ,GAG5Cqa,CAEf,C,qCCjCA,MAAMS,GAAiB,IAAI5Z,IAAI,CAC3B,QACA,SACA,MACA,OACA,QACA,SACA,IACA,IACA,aACA,eAEE6Z,GAAmBtrB,GAAQqrB,GAAe9X,IAAIvT,GAI9CurB,GAAiBC,GAAMA,IAAMC,GAAAA,IAAUD,IAAM5iB,GAAAA,GAC7C8iB,GAAmBA,CAACC,EAAQC,IAAQhpB,WAAW+oB,EAAOE,MAAM,MAAMD,IAClEE,GAAyBA,CAACC,EAAMC,IAAS,CAACC,EAAKjyB,KAAoB,IAAlB,UAAEuG,GAAWvG,EAChE,GAAkB,SAAduG,IAAyBA,EACzB,OAAO,EACX,MAAM2rB,EAAW3rB,EAAUsqB,MAAM,sBACjC,GAAIqB,EACA,OAAOR,GAAiBQ,EAAS,GAAIF,GAEpC,CACD,MAAML,EAASprB,EAAUsqB,MAAM,oBAC/B,OAAIc,EACOD,GAAiBC,EAAO,GAAII,GAG5B,CAEf,GAEEI,GAAgB,IAAI1a,IAAI,CAAC,IAAK,IAAK,MACnC2a,GAAgCC,GAAAA,EAAmBC,QAAQtsB,IAASmsB,GAAc5Y,IAAIvT,KAe5F,MAAMusB,GAAmB,CAErBC,MAAOA,CAAAzsB,EAAA0sB,KAAA,IAAC,EAAEj2B,GAAGuJ,GAAE,YAAE2sB,EAAc,IAAG,aAAEC,EAAe,KAAKF,EAAA,OAAKj2B,EAAEqF,IAAMrF,EAAEsF,IAAM8G,WAAW8pB,GAAe9pB,WAAW+pB,EAAa,EAC/HC,OAAQA,CAAAC,EAAAC,KAAA,IAAC,EAAEr2B,GAAGo2B,GAAE,WAAEE,EAAa,IAAG,cAAEC,EAAgB,KAAKF,EAAA,OAAKr2B,EAAEoF,IAAMpF,EAAEqF,IAAM8G,WAAWmqB,GAAcnqB,WAAWoqB,EAAc,EAChI7uB,IAAKA,CAAC8tB,EAAKgB,KAAA,IAAE,IAAE9uB,GAAK8uB,EAAA,OAAKrqB,WAAWzE,EAAI,EACxCC,KAAMA,CAAC6tB,EAAKiB,KAAA,IAAE,KAAE9uB,GAAM8uB,EAAA,OAAKtqB,WAAWxE,EAAK,EAC3CE,OAAQA,CAAA6uB,EAAAC,KAAA,IAAC,EAAE32B,GAAG02B,GAAE,IAAEhvB,GAAKivB,EAAA,OAAKxqB,WAAWzE,IAAQ1H,EAAEoF,IAAMpF,EAAEqF,IAAI,EAC7DuC,MAAOA,CAAAgvB,EAAAC,KAAA,IAAC,EAAE92B,GAAG62B,GAAE,KAAEjvB,GAAMkvB,EAAA,OAAK1qB,WAAWxE,IAAS5H,EAAEqF,IAAMrF,EAAEsF,IAAI,EAE9DtF,EAAGs1B,GAAuB,EAAG,IAC7Br1B,EAAGq1B,GAAuB,EAAG,KAGjCS,GAAiBgB,WAAahB,GAAiB/1B,EAC/C+1B,GAAiBiB,WAAajB,GAAiB91B,EAC/C,MA6BMg3B,GAAmC,SAACxsB,EAAepK,GAA4C,IAApCuF,EAAMhG,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,CAAC,EAAGwsB,EAAaxsB,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,CAAC,EAC3FS,EAAS,IAAKA,GACd+rB,EAAgB,IAAKA,GACrB,MAAM8K,EAAuBC,OAAOC,KAAK/2B,GAAQy1B,OAAOhB,IAGxD,IAAIuC,EAAyB,GACzBC,GAAsC,EAC1C,MAAMC,EAAuB,GAkF7B,GAjFAL,EAAqB7d,SAAS7P,IAC1B,MAAMhE,EAAQiF,EAAc4F,SAAS7G,GACrC,IAAKiB,EAAc+sB,SAAShuB,GACxB,OACJ,IAAIub,EAAOnf,EAAO4D,GACdiuB,GAAWC,EAAAA,GAAAA,GAAuB3S,GACtC,MAAMC,EAAK3kB,EAAOmJ,GAClB,IAAImuB,EAKJ,IAAI1J,EAAAA,GAAAA,GAAkBjJ,GAAK,CACvB,MAAM4S,EAAe5S,EAAGnlB,OAClBg4B,EAAsB,OAAV7S,EAAG,GAAc,EAAI,EACvCD,EAAOC,EAAG6S,GACVJ,GAAWC,EAAAA,GAAAA,GAAuB3S,GAClC,IAAK,IAAIhhB,EAAI8zB,EAAW9zB,EAAI6zB,GAKV,OAAV5S,EAAGjhB,GAL+BA,IAOjC4zB,GAMDvpB,EAAAA,EAAAA,IAAUspB,EAAAA,GAAAA,GAAuB1S,EAAGjhB,MAAQ4zB,EAAQ,2CALpDA,GAASD,EAAAA,GAAAA,GAAuB1S,EAAGjhB,KACnCqK,EAAAA,EAAAA,GAAUupB,IAAWF,GAChB1C,GAAc0C,IAAa1C,GAAc4C,GAAU,gEAMpE,MAEIA,GAASD,EAAAA,GAAAA,GAAuB1S,GAEpC,GAAIyS,IAAaE,EAGb,GAAI5C,GAAc0C,IAAa1C,GAAc4C,GAAS,CAClD,MAAM9rB,EAAUrG,EAAMuG,MACC,kBAAZF,GACPrG,EAAMiI,IAAIrB,WAAWP,IAEP,kBAAPmZ,EACP3kB,EAAOmJ,GAAO4C,WAAW4Y,GAEpB3H,MAAMsN,QAAQ3F,IAAO2S,IAAWvlB,GAAAA,KACrC/R,EAAOmJ,GAAOwb,EAAGmG,IAAI/e,YAE7B,MACuB,OAAbqrB,QAAkC,IAAbA,OAAsB,EAASA,EAAS1tB,aACvD,OAAX4tB,QAA8B,IAAXA,OAAoB,EAASA,EAAO5tB,aAC9C,IAATgb,GAAqB,IAAPC,GAGF,IAATD,EACAvf,EAAMiI,IAAIkqB,EAAO5tB,UAAUgb,IAG3B1kB,EAAOmJ,GAAOiuB,EAAS1tB,UAAUib,IAMhCsS,IACDD,EAvIpB,SAAyC5sB,GACrC,MAAMqtB,EAAoB,GAW1B,OAVAlC,GAA8Bvc,SAAS7P,IACnC,MAAMhE,EAAQiF,EAAc4F,SAAS7G,QACvB1J,IAAV0F,IACAsyB,EAAkB11B,KAAK,CAACoH,EAAKhE,EAAMuG,QACnCvG,EAAMiI,IAAIjE,EAAIuuB,WAAW,SAAW,EAAI,GAC5C,IAGAD,EAAkBj4B,QAClB4K,EAAcqC,SACXgrB,CACX,CA2HwBE,CAAgCvtB,GACpC6sB,GAAsC,GAE1CC,EAAqBn1B,KAAKoH,GAC1B4iB,EAAc5iB,QACa1J,IAAvBssB,EAAc5iB,GACR4iB,EAAc5iB,GACdnJ,EAAOmJ,GACjBhE,EAAMyyB,KAAKjT,GAEnB,IAEAuS,EAAqB13B,OAAQ,CAC7B,MAAMq4B,EAAUX,EAAqBY,QAAQ,WAAa,EACpD/0B,OAAOg1B,YACP,KACAC,EA3HmBC,EAACj4B,EAAQoK,EAAe8tB,KACrD,MAAMC,EAAa/tB,EAAcT,qBAC3BsE,EAAU7D,EAAcoB,QACxB4sB,EAAuBlP,iBAAiBjb,IACxC,QAAEwV,GAAY2U,EACd7yB,EAAS,CAAC,EAGA,SAAZke,GACArZ,EAAcoc,eAAe,UAAWxmB,EAAOyjB,SAAW,SAK9DyU,EAAYlf,SAAS7P,IACjB5D,EAAO4D,GAAOusB,GAAiBvsB,GAAKgvB,EAAYC,EAAqB,IAGzEhuB,EAAcqC,SACd,MAAM4rB,EAAajuB,EAAcT,qBAQjC,OAPAuuB,EAAYlf,SAAS7P,IAGjB,MAAMhE,EAAQiF,EAAc4F,SAAS7G,GACrChE,GAASA,EAAMyyB,KAAKryB,EAAO4D,IAC3BnJ,EAAOmJ,GAAOusB,GAAiBvsB,GAAKkvB,EAAYD,EAAqB,IAElEp4B,CAAM,EAgGei4B,CAAyBj4B,EAAQoK,EAAe8sB,GAaxE,OAXIF,EAAuBx3B,QACvBw3B,EAAuBhe,SAAQsf,IAAkB,IAAhBnvB,EAAKhE,GAAMmzB,EACxCluB,EAAc4F,SAAS7G,GAAKiE,IAAIjI,EAAM,IAI9CiF,EAAcqC,SAEV8rB,GAAAA,GAAyB,OAAZV,GACb90B,OAAOy1B,SAAS,CAAElxB,IAAKuwB,IAEpB,CAAE73B,OAAQg4B,EAAiBjM,gBACtC,CAEI,MAAO,CAAE/rB,SAAQ+rB,gBAEzB,EAQA,SAAS0M,GAAeruB,EAAepK,EAAQuF,EAAQwmB,GACnD,MA3MsB/rB,IACf82B,OAAOC,KAAK/2B,GAAQqkB,KAAKoQ,IA0MzBiE,CAAiB14B,GAClB42B,GAAiCxsB,EAAepK,EAAQuF,EAAQwmB,GAChE,CAAE/rB,SAAQ+rB,gBACpB,CC5NA,MAAM4M,GAAkBA,CAACvuB,EAAepK,EAAQuF,EAAQwmB,KACpD,MAAMF,EFuCV,SAA6BzhB,EAAajH,EAAiB4oB,GAAe,OAAzB/rB,GAAQmD,EACrD,MAAM8K,EAAU7D,EAAcoB,QAC9B,KAAMyC,aAAmB2qB,SACrB,MAAO,CAAE54B,SAAQ+rB,iBAGjBA,IACAA,EAAgB,IAAKA,IAGzB3hB,EAAcrC,OAAOiR,SAAS7T,IAC1B,MAAMqG,EAAUrG,EAAMuG,MACtB,KAAK6oB,EAAAA,GAAAA,IAAmB/oB,GACpB,OACJ,MAAMqgB,EAAWgI,GAAiBroB,EAASyC,GACvC4d,GACA1mB,EAAMiI,IAAIye,EAAS,IAI3B,IAAK,MAAM1iB,KAAOnJ,EAAQ,CACtB,MAAMwL,EAAUxL,EAAOmJ,GACvB,KAAKorB,EAAAA,GAAAA,IAAmB/oB,GACpB,SACJ,MAAMqgB,EAAWgI,GAAiBroB,EAASyC,GACtC4d,IAGL7rB,EAAOmJ,GAAO0iB,EACTE,IACDA,EAAgB,CAAC,QAIMtsB,IAAvBssB,EAAc5iB,KACd4iB,EAAc5iB,GAAOqC,GAE7B,CACA,MAAO,CAAExL,SAAQ+rB,gBACrB,CE9EqB8M,CAAoBzuB,EAAepK,EAAQ+rB,GAG5D,OAAO0M,GAAeruB,EAFtBpK,EAAS6rB,EAAS7rB,OAE2BuF,EAD7CwmB,EAAgBF,EAASE,cAC0C,ECVjE+M,GAAuB,CAAEttB,QAAS,MAClCutB,GAA2B,CAAEvtB,SAAS,G,oDCF5C,MAAMwtB,GAAqB,IAAI9uB,QCoBzB+uB,GAAenC,OAAOC,KAAKmC,GAAAA,GAC3BC,GAAcF,GAAaz5B,OAC3B45B,GAAoB,CACtB,iBACA,oBACA,SACA,sBACA,gBACA,uBACA,2BAEEC,GAAkBC,GAAAA,EAAa95B,OAKrC,MAAM+5B,GACF56B,WAAAA,CAAWwE,GAAsF,IAArF,OAAE+C,EAAM,MAAE4J,EAAK,gBAAEhF,EAAe,oBAAE0uB,EAAmB,YAAEC,GAAct2B,EAAEjD,EAAOX,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,CAAC,EAK1FV,KAAK2M,QAAU,KAIf3M,KAAK+a,SAAW,IAAIgB,IAIpB/b,KAAK66B,eAAgB,EACrB76B,KAAK86B,uBAAwB,EAQ7B96B,KAAKwgB,mBAAqB,KAM1BxgB,KAAKkJ,OAAS,IAAIwT,IAIlB1c,KAAK+6B,SAAW,CAAC,EAKjB/6B,KAAKg7B,mBAAqB,IAAIte,IAM9B1c,KAAKi7B,iBAAmB,CAAC,EAIzBj7B,KAAKk7B,OAAS,CAAC,EAMfl7B,KAAKm7B,uBAAyB,CAAC,EAC/Bn7B,KAAKo7B,aAAe,IAAMp7B,KAAKqe,OAAO,SAAUre,KAAK4Z,cACrD5Z,KAAK4N,OAAS,KACL5N,KAAK2M,UAEV3M,KAAKq7B,eACLr7B,KAAKs7B,eAAet7B,KAAK2M,QAAS3M,KAAKu7B,YAAav7B,KAAKiR,MAAMa,MAAO9R,KAAKyM,YAAW,EAE1FzM,KAAKgZ,eAAiB,IAAMzV,EAAAA,GAAMqK,OAAO5N,KAAK4N,QAAQ,GAAO,GAC7D,MAAM,aAAEgM,EAAY,YAAE2hB,GAAgBX,EACtC56B,KAAK4Z,aAAeA,EACpB5Z,KAAKw7B,WAAa,IAAK5hB,GACvB5Z,KAAKy7B,cAAgBxqB,EAAMG,QAAU,IAAKwI,GAAiB,CAAC,EAC5D5Z,KAAKu7B,YAAcA,EACnBv7B,KAAKqH,OAASA,EACdrH,KAAKiR,MAAQA,EACbjR,KAAKiM,gBAAkBA,EACvBjM,KAAK6a,MAAQxT,EAASA,EAAOwT,MAAQ,EAAI,EACzC7a,KAAK26B,oBAAsBA,EAC3B36B,KAAKqB,QAAUA,EACfrB,KAAK86B,uBAAwBA,EAAAA,GAAAA,GAAsB7pB,GACnDjR,KAAK66B,eAAgBA,EAAAA,GAAAA,GAAc5pB,GAC/BjR,KAAK66B,gBACL76B,KAAKuvB,gBAAkB,IAAIxT,KAE/B/b,KAAKguB,uBAAyB3L,QAAQhb,GAAUA,EAAOsF,SAWvD,MAAM,WAAE+uB,KAAeC,GAAwB37B,KAAK47B,4BAA4B3qB,EAAO,CAAC,GACxF,IAAK,MAAM3G,KAAOqxB,EAAqB,CACnC,MAAMr1B,EAAQq1B,EAAoBrxB,QACR1J,IAAtBgZ,EAAatP,KAAsBoc,EAAAA,GAAAA,GAAcpgB,KACjDA,EAAMiI,IAAIqL,EAAatP,IAAM,IACzBuxB,EAAAA,GAAAA,GAAwBH,IACxBA,EAAWlnB,IAAIlK,GAG3B,CACJ,CAQAsxB,2BAAAA,CAA4BE,EAAQC,GAChC,MAAO,CAAC,CACZ,CACAxd,KAAAA,CAAMxT,GACF/K,KAAK2M,QAAU5B,EACfovB,GAAmB5rB,IAAIxD,EAAU/K,MAC7BA,KAAKyM,aAAezM,KAAKyM,WAAW1B,UACpC/K,KAAKyM,WAAW8R,MAAMxT,GAEtB/K,KAAKqH,QAAUrH,KAAK66B,gBAAkB76B,KAAK86B,wBAC3C96B,KAAKg8B,sBAAwBh8B,KAAKqH,OAAO40B,gBAAgBj8B,OAE7DA,KAAKkJ,OAAOiR,SAAQ,CAAC7T,EAAOgE,IAAQtK,KAAKk8B,kBAAkB5xB,EAAKhE,KAC3D4zB,GAAyBvtB,SC1JtC,WAEI,GADAutB,GAAyBvtB,SAAU,EAC9B+sB,GAAAA,EAEL,GAAIx1B,OAAOi4B,WAAY,CACnB,MAAMC,EAAmBl4B,OAAOi4B,WAAW,4BACrCE,EAA8BA,IAAOpC,GAAqBttB,QAAUyvB,EAAiB1H,QAC3F0H,EAAiBE,YAAYD,GAC7BA,GACJ,MAEIpC,GAAqBttB,SAAU,CAEvC,CD8IY4vB,GAEJv8B,KAAKwgB,mBAC4B,UAA7BxgB,KAAK26B,sBAE8B,WAA7B36B,KAAK26B,qBAEDV,GAAqBttB,SAI/B3M,KAAKqH,QACLrH,KAAKqH,OAAO0T,SAASvG,IAAIxU,MAC7BA,KAAKE,OAAOF,KAAKiR,MAAOjR,KAAKiM,gBACjC,CACAwU,OAAAA,GACI0Z,GAAmBzZ,OAAO1gB,KAAK2M,SAC/B3M,KAAKyM,YAAczM,KAAKyM,WAAWgU,WACnCrc,EAAAA,EAAAA,IAAYpE,KAAKo7B,eACjBh3B,EAAAA,EAAAA,IAAYpE,KAAK4N,QACjB5N,KAAKg7B,mBAAmB7gB,SAASpE,GAAWA,MAC5C/V,KAAKg8B,uBAAyBh8B,KAAKg8B,wBACnCh8B,KAAKqH,QAAUrH,KAAKqH,OAAO0T,SAAS2F,OAAO1gB,MAC3C,IAAK,MAAMsK,KAAOtK,KAAKk7B,OACnBl7B,KAAKk7B,OAAO5wB,GAAKoe,QAErB,IAAK,MAAMpe,KAAOtK,KAAK+6B,SACnB/6B,KAAK+6B,SAASzwB,GAAKmW,UAEvBzgB,KAAK2M,QAAU,IACnB,CACAuvB,iBAAAA,CAAkB5xB,EAAKhE,GACnB,MAAMk2B,EAAmBC,GAAAA,EAAe5e,IAAIvT,GACtCoyB,EAAiBp2B,EAAMq2B,GAAG,UAAWC,IACvC58B,KAAK4Z,aAAatP,GAAOsyB,EACzB58B,KAAKiR,MAAM4V,UACPtjB,EAAAA,GAAMrD,OAAOF,KAAKo7B,cAAc,GAAO,GACvCoB,GAAoBx8B,KAAKyM,aACzBzM,KAAKyM,WAAW0P,kBAAmB,EACvC,IAEE0gB,EAAwBv2B,EAAMq2B,GAAG,gBAAiB38B,KAAKgZ,gBAC7DhZ,KAAKg7B,mBAAmBzsB,IAAIjE,GAAK,KAC7BoyB,IACAG,GAAuB,GAE/B,CACAC,gBAAAA,CAAiBC,GAIb,OAAK/8B,KAAK2M,SACL3M,KAAKg9B,0BACNh9B,KAAK6D,OAASk5B,EAAMl5B,KAGjB7D,KAAKg9B,yBAAyBh9B,KAAK2M,QAASowB,EAAMpwB,SAF9C,CAGf,CACAswB,YAAAA,CAAY5yB,EAAiC6yB,EAAUC,EAAmBC,GAA0B,IAC5FC,EACApnB,GAFK,SAAE8E,KAAauiB,GAAejzB,EAevC,IAAK,IAAIxF,EAAI,EAAGA,EAAIy1B,GAAaz1B,IAAK,CAClC,MAAMS,EAAO80B,GAAav1B,IACpB,UAAE04B,EAAW19B,QAAS29B,EAAkB,eAAElS,EAAgBrV,cAAewnB,GAA4BpD,GAAAA,EAAmB/0B,GAC1HgmB,IACA+R,EAA4B/R,GAC5BiS,EAAUD,MACLt9B,KAAK+6B,SAASz1B,IAASk4B,IACxBx9B,KAAK+6B,SAASz1B,GAAQ,IAAIk4B,EAAmBx9B,OAE7Cy9B,IACAxnB,EAAgBwnB,GAG5B,CACA,IAAKz9B,KAAKyM,YAAc4wB,EAA2B,CAC/Cr9B,KAAKyM,WAAa,IAAI4wB,EAA0Br9B,KAAK4Z,aAAc5Z,KAAKqH,QAAUrH,KAAKqH,OAAOoF,YAC9F,MAAM,SAAE2H,EAAQ,OAAE7M,EAAM,KAAE3B,EAAI,gBAAE4I,EAAe,aAAE8T,EAAY,WAAEpC,GAAgBod,EAC/Et9B,KAAKyM,WAAWmI,WAAW,CACvBR,WACA7M,SACAya,oBAAqBK,QAAQzc,IACxB4I,IAAmBE,EAAAA,EAAAA,GAAYF,GACpCjD,cAAevL,KACfgZ,eAAgBA,IAAMhZ,KAAKgZ,iBAQ3BiO,cAAiC,kBAAX1f,EAAsBA,EAAS,OACrD8f,uBAAwB+V,EACxB9a,eACApC,cAER,CACA,OAAOjK,CACX,CACAynB,cAAAA,GACI,IAAK,MAAMpzB,KAAOtK,KAAK+6B,SAAU,CAC7B,MAAM4C,EAAU39B,KAAK+6B,SAASzwB,GAC1BqzB,EAAQ19B,UACR09B,EAAQz9B,UAGRy9B,EAAQpf,QACRof,EAAQ19B,WAAY,EAE5B,CACJ,CACAo7B,YAAAA,GACIr7B,KAAK49B,MAAM59B,KAAKu7B,YAAav7B,KAAK4Z,aAAc5Z,KAAKqB,QAASrB,KAAKiR,MACvE,CAMAnG,kBAAAA,GACI,OAAO9K,KAAK2M,QACN3M,KAAK69B,2BAA2B79B,KAAK2M,QAAS3M,KAAKiR,OACnD5I,GACV,CACAy1B,cAAAA,CAAexzB,GACX,OAAOtK,KAAK4Z,aAAatP,EAC7B,CACAqd,cAAAA,CAAerd,EAAKhE,GAChBtG,KAAK4Z,aAAatP,GAAOhE,CAC7B,CAQAy3B,oBAAAA,CAAqB58B,GAA0B,IAAlB68B,IAASt9B,UAAAC,OAAA,QAAAC,IAAAF,UAAA,KAAAA,UAAA,GAClC,OAAOV,KAAKi+B,iCAAiC98B,EAAQnB,KAAKiR,MAAO+sB,EACrE,CAKA99B,MAAAA,CAAO+Q,EAAOhF,IACNgF,EAAMY,mBAAqB7R,KAAKiR,MAAMY,oBACtC7R,KAAKgZ,iBAEThZ,KAAK+U,UAAY/U,KAAKiR,MACtBjR,KAAKiR,MAAQA,EACbjR,KAAK+vB,oBAAsB/vB,KAAKiM,gBAChCjM,KAAKiM,gBAAkBA,EAIvB,IAAK,IAAIpH,EAAI,EAAGA,EAAI01B,GAAkB55B,OAAQkE,IAAK,CAC/C,MAAMyF,EAAMiwB,GAAkB11B,GAC1B7E,KAAKm7B,uBAAuB7wB,KAC5BtK,KAAKm7B,uBAAuB7wB,YACrBtK,KAAKm7B,uBAAuB7wB,IAEvC,MAAM4zB,EAAWjtB,EAAM,KAAO3G,GAC1B4zB,IACAl+B,KAAKm7B,uBAAuB7wB,GAAOtK,KAAK28B,GAAGryB,EAAK4zB,GAExD,CACAl+B,KAAKi7B,iBE5Ub,SAAqC7rB,EAASf,EAAMmd,GAChD,MAAM,WAAEkQ,GAAertB,EACvB,IAAK,MAAM/D,KAAO+D,EAAM,CACpB,MAAM8vB,EAAY9vB,EAAK/D,GACjB8zB,EAAY5S,EAAKlhB,GACvB,IAAIoc,EAAAA,GAAAA,GAAcyX,GAKd/uB,EAAQivB,SAAS/zB,EAAK6zB,IAClBtC,EAAAA,GAAAA,GAAwBH,IACxBA,EAAWlnB,IAAIlK,QAUlB,IAAIoc,EAAAA,GAAAA,GAAc0X,GAKnBhvB,EAAQivB,SAAS/zB,GAAKmI,EAAAA,GAAAA,IAAY0rB,EAAW,CAAEG,MAAOlvB,MAClDysB,EAAAA,GAAAA,GAAwBH,IACxBA,EAAW3lB,OAAOzL,QAGrB,GAAI8zB,IAAcD,EAMnB,GAAI/uB,EAAQkpB,SAAShuB,GAAM,CACvB,MAAMi0B,EAAgBnvB,EAAQ+B,SAAS7G,IAEtCi0B,EAAcC,aAAeD,EAAchwB,IAAI4vB,EACpD,KACK,CACD,MAAMvB,EAAcxtB,EAAQ0uB,eAAexzB,GAC3C8E,EAAQivB,SAAS/zB,GAAKmI,EAAAA,GAAAA,SAA4B7R,IAAhBg8B,EAA4BA,EAAcuB,EAAW,CAAEG,MAAOlvB,IACpG,CAER,CAEA,IAAK,MAAM9E,KAAOkhB,OACI5qB,IAAdyN,EAAK/D,IACL8E,EAAQqvB,YAAYn0B,GAE5B,OAAO+D,CACX,CFqRgCqwB,CAA4B1+B,KAAMA,KAAK47B,4BAA4B3qB,EAAOjR,KAAK+U,WAAY/U,KAAKi7B,kBACpHj7B,KAAK2+B,wBACL3+B,KAAK2+B,wBAEb,CACApyB,QAAAA,GACI,OAAOvM,KAAKiR,KAChB,CAIA2tB,UAAAA,CAAWt5B,GACP,OAAOtF,KAAKiR,MAAM4tB,SAAW7+B,KAAKiR,MAAM4tB,SAASv5B,QAAQ1E,CAC7D,CAIA+e,oBAAAA,GACI,OAAO3f,KAAKiR,MAAMd,UACtB,CACArC,qBAAAA,GACI,OAAO9N,KAAKiR,MAAMhP,kBACtB,CACA68B,qBAAAA,GACI,OAAO9+B,KAAK66B,cACN76B,KACAA,KAAKqH,OACDrH,KAAKqH,OAAOy3B,6BACZl+B,CACd,CACAysB,iBAAAA,GACI,GAD2B3sB,UAAAC,OAAA,QAAAC,IAAAF,UAAA,IAAAA,UAAA,GAEvB,OAAOV,KAAKqH,OAASrH,KAAKqH,OAAOgmB,yBAAsBzsB,EAE3D,IAAKZ,KAAK86B,sBAAuB,CAC7B,MAAM5kB,EAAUlW,KAAKqH,QACfrH,KAAKqH,OAAOgmB,qBACZ,CAAC,EAIP,YAH2BzsB,IAAvBZ,KAAKiR,MAAMG,UACX8E,EAAQ9E,QAAUpR,KAAKiR,MAAMG,SAE1B8E,CACX,CACA,MAAMA,EAAU,CAAC,EACjB,IAAK,IAAIrR,EAAI,EAAGA,EAAI21B,GAAiB31B,IAAK,CACtC,MAAMS,EAAOm1B,GAAAA,EAAa51B,GACpB6oB,EAAO1tB,KAAKiR,MAAM3L,KACpBsoB,EAAAA,GAAAA,GAAeF,KAAkB,IAATA,KACxBxX,EAAQ5Q,GAAQooB,EAExB,CACA,OAAOxX,CACX,CAIA+lB,eAAAA,CAAgBhhB,GACZ,MAAM8jB,EAAqB/+B,KAAK8+B,wBAChC,GAAIC,EAGA,OAFAA,EAAmBxP,iBACfwP,EAAmBxP,gBAAgB/a,IAAIyG,GACpC,IAAM8jB,EAAmBxP,gBAAgB7O,OAAOzF,EAE/D,CAIAojB,QAAAA,CAAS/zB,EAAKhE,GAENA,IAAUtG,KAAKkJ,OAAO2D,IAAIvC,KAC1BtK,KAAKy+B,YAAYn0B,GACjBtK,KAAKk8B,kBAAkB5xB,EAAKhE,IAEhCtG,KAAKkJ,OAAOqF,IAAIjE,EAAKhE,GACrBtG,KAAK4Z,aAAatP,GAAOhE,EAAMuG,KACnC,CAIA4xB,WAAAA,CAAYn0B,GACRtK,KAAKkJ,OAAOwX,OAAOpW,GACnB,MAAM00B,EAAch/B,KAAKg7B,mBAAmBnuB,IAAIvC,GAC5C00B,IACAA,IACAh/B,KAAKg7B,mBAAmBta,OAAOpW,WAE5BtK,KAAK4Z,aAAatP,GACzBtK,KAAKi/B,2BAA2B30B,EAAKtK,KAAKu7B,YAC9C,CAIAjD,QAAAA,CAAShuB,GACL,OAAOtK,KAAKkJ,OAAO2U,IAAIvT,EAC3B,CACA6G,QAAAA,CAAS7G,EAAK40B,GACV,GAAIl/B,KAAKiR,MAAM/H,QAAUlJ,KAAKiR,MAAM/H,OAAOoB,GACvC,OAAOtK,KAAKiR,MAAM/H,OAAOoB,GAE7B,IAAIhE,EAAQtG,KAAKkJ,OAAO2D,IAAIvC,GAK5B,YAJc1J,IAAV0F,QAAwC1F,IAAjBs+B,IACvB54B,GAAQmM,EAAAA,GAAAA,IAAYysB,EAAc,CAAEZ,MAAOt+B,OAC3CA,KAAKq+B,SAAS/zB,EAAKhE,IAEhBA,CACX,CAMA64B,SAAAA,CAAU70B,GACN,IAAIuZ,EACJ,YAAkCjjB,IAA3BZ,KAAK4Z,aAAatP,IAAuBtK,KAAK2M,QAES,QAAvDkX,EAAK7jB,KAAKo/B,uBAAuBp/B,KAAKiR,MAAO3G,UAAyB,IAAPuZ,EAAgBA,EAAK7jB,KAAKq/B,sBAAsBr/B,KAAK2M,QAASrC,EAAKtK,KAAKqB,SADxIrB,KAAK4Z,aAAatP,EAE5B,CAKAg1B,aAAAA,CAAch1B,EAAKhE,GACftG,KAAKw7B,WAAWlxB,GAAOhE,CAC3B,CAKA8oB,aAAAA,CAAc9kB,GACV,IAAIuZ,EACJ,MAAM,QAAEzS,GAAYpR,KAAKiR,MACnBsuB,EAAsC,kBAAZnuB,GAA2C,kBAAZA,EACD,QAAvDyS,GAAK2b,EAAAA,GAAAA,GAAwBx/B,KAAKiR,MAAOG,UAA6B,IAAPyS,OAAgB,EAASA,EAAGvZ,QAC5F1J,EAIN,GAAIwQ,QAAgCxQ,IAArB2+B,EACX,OAAOA,EAMX,MAAMp+B,EAASnB,KAAKo/B,uBAAuBp/B,KAAKiR,MAAO3G,GACvD,YAAe1J,IAAXO,IAAyBulB,EAAAA,GAAAA,GAAcvlB,QAMRP,IAA5BZ,KAAKy7B,cAAcnxB,SACD1J,IAArB2+B,OACE3+B,EACAZ,KAAKw7B,WAAWlxB,GARXnJ,CASf,CACAw7B,EAAAA,CAAGv7B,EAAWmH,GAIV,OAHKvI,KAAKk7B,OAAO95B,KACbpB,KAAKk7B,OAAO95B,GAAa,IAAI0c,GAAAA,GAE1B9d,KAAKk7B,OAAO95B,GAAWoT,IAAIjM,EACtC,CACA8V,MAAAA,CAAOjd,GACH,GAAIpB,KAAKk7B,OAAO95B,GAAY,SAAA6c,EAAAvd,UAAAC,OADXud,EAAI,IAAAC,MAAAF,EAAA,EAAAA,EAAA,KAAAG,EAAA,EAAAA,EAAAH,EAAAG,IAAJF,EAAIE,EAAA,GAAA1d,UAAA0d,GAEjBpe,KAAKk7B,OAAO95B,GAAWid,UAAUH,EACrC,CACJ,EGnfJ,MAAMuhB,WAAyB/E,GAC3BsC,wBAAAA,CAAyBr7B,EAAGC,GAMxB,OAAsC,EAA/BD,EAAE+9B,wBAAwB99B,GAAS,GAAK,CACnD,CACAw9B,sBAAAA,CAAuBnuB,EAAO3G,GAC1B,OAAO2G,EAAMa,MAAQb,EAAMa,MAAMxH,QAAO1J,CAC5C,CACAq+B,0BAAAA,CAA2B30B,EAAGhG,GAAmB,IAAjB,KAAEq7B,EAAI,MAAE7tB,GAAOxN,SACpCq7B,EAAKr1B,UACLwH,EAAMxH,EACjB,CACA2zB,gCAAAA,CAAgC5zB,EAAA0sB,EAAgE92B,GAAW,IAA1E,WAAEkQ,EAAU,cAAE+c,KAAkB/rB,GAAQkJ,GAAE,gBAAEu1B,GAAiB7I,EACtFrwB,GAASm5B,EAAAA,GAAAA,IAAU1+B,EAAQgP,GAAc,CAAC,EAAGnQ,MAYjD,GARI4/B,IACI1S,IACAA,EAAgB0S,EAAgB1S,IAChC/rB,IACAA,EAASy+B,EAAgBz+B,IACzBuF,IACAA,EAASk5B,EAAgBl5B,KAE7BzG,EAAW,EACX6/B,EAAAA,GAAAA,IAAwB9/B,KAAMmB,EAAQuF,GACtC,MAAMq5B,EAASjG,GAAgB95B,KAAMmB,EAAQuF,EAAQwmB,GACrDA,EAAgB6S,EAAO7S,cACvB/rB,EAAS4+B,EAAO5+B,MACpB,CACA,MAAO,CACHgP,aACA+c,mBACG/rB,EAEX,EC/BJ,MAAM6+B,WAA0BP,GAC5BJ,qBAAAA,CAAsBt0B,EAAUT,GAC5B,GAAImyB,GAAAA,EAAe5e,IAAIvT,GAAM,CACzB,MAAM21B,GAAcC,EAAAA,GAAAA,GAAoB51B,GACxC,OAAO21B,GAAcA,EAAYE,SAAe,CACpD,CACK,CACD,MAAMC,GAVQhxB,EAUyBrE,EATxC7G,OAAOmmB,iBAAiBjb,IAUjB9I,IAAS+5B,EAAAA,GAAAA,IAAkB/1B,GAC3B81B,EAAc9K,iBAAiBhrB,GAC/B81B,EAAc91B,KAAS,EAC7B,MAAwB,kBAAVhE,EAAqBA,EAAMkvB,OAASlvB,CACtD,CAfR,IAA0B8I,CAgBtB,CACAyuB,0BAAAA,CAA2B9yB,EAAQzG,GAA0B,IAAxB,mBAAErC,GAAoBqC,EACvD,OAAOwG,GAAmBC,EAAU9I,EACxC,CACA27B,KAAAA,CAAMrC,EAAa3hB,EAAcvY,EAAS4P,IACtCqvB,EAAAA,GAAAA,GAAgB/E,EAAa3hB,EAAcvY,EAAS4P,EAAMY,kBAC9D,CACA+pB,2BAAAA,CAA4B3qB,EAAO8D,GAC/B,OAAO6mB,EAAAA,GAAAA,GAA4B3qB,EAAO8D,EAC9C,CACA4pB,sBAAAA,GACQ3+B,KAAKugC,oBACLvgC,KAAKugC,2BACEvgC,KAAKugC,mBAEhB,MAAM,SAAExlB,GAAa/a,KAAKiR,OACtByV,EAAAA,GAAAA,GAAc3L,KACd/a,KAAKugC,kBAAoBxlB,EAAS4hB,GAAG,UAAWprB,IACxCvR,KAAK2M,UACL3M,KAAK2M,QAAQ6zB,YAAe,GAAEjvB,IAAQ,IAGtD,CACA+pB,cAAAA,CAAevwB,EAAUwwB,EAAa1T,EAAWpb,IAC7Cg0B,EAAAA,GAAAA,GAAW11B,EAAUwwB,EAAa1T,EAAWpb,EACjD,E,mECxCJ,MAAMi0B,WAAyBjB,GAC3B3/B,WAAAA,GACI0qB,SAAS9pB,WACTV,KAAK2gC,UAAW,CACpB,CACAvB,sBAAAA,CAAuBnuB,EAAO3G,GAC1B,OAAO2G,EAAM3G,EACjB,CACA+0B,qBAAAA,CAAsBt0B,EAAUT,GAC5B,GAAImyB,GAAAA,EAAe5e,IAAIvT,GAAM,CACzB,MAAM21B,GAAcC,EAAAA,GAAAA,GAAoB51B,GACxC,OAAO21B,GAAcA,EAAYE,SAAe,CACpD,CAEA,OADA71B,EAAOs2B,GAAAA,EAAoB/iB,IAAIvT,GAA0BA,GAAnBu2B,EAAAA,GAAAA,GAAYv2B,GAC3CS,EAAS+1B,aAAax2B,EACjC,CACAuzB,0BAAAA,GACI,OAAOx1B,GACX,CACAuzB,2BAAAA,CAA4B3qB,EAAO8D,GAC/B,OAAO6mB,EAAAA,GAAAA,GAA4B3qB,EAAO8D,EAC9C,CACA6oB,KAAAA,CAAMrC,EAAa3hB,EAAcvY,EAAS4P,IACtC8vB,EAAAA,GAAAA,GAAcxF,EAAa3hB,EAAcvY,EAASrB,KAAK2gC,SAAU1vB,EAAMY,kBAC3E,CACAypB,cAAAA,CAAevwB,EAAUwwB,EAAa1T,EAAWpb,IAC7Cu0B,EAAAA,GAAAA,GAAUj2B,EAAUwwB,EAAa1T,EAAWpb,EAChD,CACA8R,KAAAA,CAAMxT,GACF/K,KAAK2gC,UAAWA,EAAAA,GAAAA,GAAS51B,EAAS0T,SAClC+L,MAAMjM,MAAMxT,EAChB,E,eCtCJ,MCGMk2B,GAAS,ICAM,CACjBC,SFJ2BC,CAACC,EAAW//B,KAChCggC,EAAAA,GAAAA,GAAeD,GAChB,IAAIV,GAAiBr/B,EAAS,CAAEigC,4BAA4B,IAC5D,IAAItB,GAAkB3+B,EAAS,CAAEigC,4BAA4B,OEEhEtV,MACA0F,ODDA9rB,MACA2B,G","sources":["../node_modules/framer-motion/dist/es/motion/features/Feature.mjs","../node_modules/framer-motion/dist/es/events/utils/is-primary-pointer.mjs","../node_modules/framer-motion/dist/es/events/event-info.mjs","../node_modules/framer-motion/dist/es/events/add-dom-event.mjs","../node_modules/framer-motion/dist/es/events/add-pointer-event.mjs","../node_modules/framer-motion/dist/es/utils/distance.mjs","../node_modules/framer-motion/dist/es/gestures/pan/PanSession.mjs","../node_modules/framer-motion/dist/es/gestures/drag/utils/lock.mjs","../node_modules/framer-motion/dist/es/projection/geometry/delta-calc.mjs","../node_modules/framer-motion/dist/es/gestures/drag/utils/constraints.mjs","../node_modules/framer-motion/dist/es/projection/geometry/models.mjs","../node_modules/framer-motion/dist/es/projection/utils/each-axis.mjs","../node_modules/framer-motion/dist/es/projection/geometry/conversion.mjs","../node_modules/framer-motion/dist/es/projection/utils/has-transform.mjs","../node_modules/framer-motion/dist/es/projection/geometry/delta-apply.mjs","../node_modules/framer-motion/dist/es/projection/utils/measure.mjs","../node_modules/framer-motion/dist/es/gestures/drag/VisualElementDragControls.mjs","../node_modules/framer-motion/dist/es/gestures/pan/index.mjs","../node_modules/framer-motion/dist/es/projection/node/state.mjs","../node_modules/framer-motion/dist/es/projection/styles/scale-border-radius.mjs","../node_modules/framer-motion/dist/es/projection/styles/scale-box-shadow.mjs","../node_modules/framer-motion/dist/es/motion/features/layout/MeasureLayout.mjs","../node_modules/framer-motion/dist/es/components/AnimatePresence/use-presence.mjs","../node_modules/framer-motion/dist/es/projection/animation/mix-values.mjs","../node_modules/framer-motion/dist/es/projection/geometry/copy.mjs","../node_modules/framer-motion/dist/es/projection/geometry/delta-remove.mjs","../node_modules/framer-motion/dist/es/projection/geometry/utils.mjs","../node_modules/framer-motion/dist/es/projection/shared/stack.mjs","../node_modules/framer-motion/dist/es/projection/styles/transform.mjs","../node_modules/framer-motion/dist/es/render/utils/compare-by-depth.mjs","../node_modules/framer-motion/dist/es/render/utils/flat-tree.mjs","../node_modules/framer-motion/dist/es/projection/node/create-projection-node.mjs","../node_modules/framer-motion/dist/es/debug/record.mjs","../node_modules/framer-motion/dist/es/render/dom/utils/is-svg-element.mjs","../node_modules/framer-motion/dist/es/utils/delay.mjs","../node_modules/framer-motion/dist/es/animation/interfaces/single-value.mjs","../node_modules/framer-motion/dist/es/projection/node/DocumentProjectionNode.mjs","../node_modules/framer-motion/dist/es/projection/node/HTMLProjectionNode.mjs","../node_modules/framer-motion/dist/es/motion/features/drag.mjs","../node_modules/framer-motion/dist/es/gestures/drag/index.mjs","../node_modules/framer-motion/dist/es/motion/features/layout.mjs","../node_modules/framer-motion/dist/es/utils/shallow-compare.mjs","../node_modules/framer-motion/dist/es/render/utils/animation-state.mjs","../node_modules/framer-motion/dist/es/motion/features/animation/exit.mjs","../node_modules/framer-motion/dist/es/motion/features/animations.mjs","../node_modules/framer-motion/dist/es/motion/features/animation/index.mjs","../node_modules/framer-motion/dist/es/gestures/hover.mjs","../node_modules/framer-motion/dist/es/gestures/utils/is-node-or-child.mjs","../node_modules/framer-motion/dist/es/gestures/press.mjs","../node_modules/framer-motion/dist/es/motion/features/viewport/observers.mjs","../node_modules/framer-motion/dist/es/motion/features/viewport/index.mjs","../node_modules/framer-motion/dist/es/motion/features/gestures.mjs","../node_modules/framer-motion/dist/es/gestures/focus.mjs","../node_modules/framer-motion/dist/es/render/dom/utils/css-variables-conversion.mjs","../node_modules/framer-motion/dist/es/render/dom/utils/unit-conversion.mjs","../node_modules/framer-motion/dist/es/render/dom/utils/parse-dom-variant.mjs","../node_modules/framer-motion/dist/es/utils/reduced-motion/state.mjs","../node_modules/framer-motion/dist/es/render/store.mjs","../node_modules/framer-motion/dist/es/render/VisualElement.mjs","../node_modules/framer-motion/dist/es/utils/reduced-motion/index.mjs","../node_modules/framer-motion/dist/es/render/utils/motion-values.mjs","../node_modules/framer-motion/dist/es/render/dom/DOMVisualElement.mjs","../node_modules/framer-motion/dist/es/render/html/HTMLVisualElement.mjs","../node_modules/framer-motion/dist/es/render/svg/SVGVisualElement.mjs","../node_modules/framer-motion/dist/es/render/dom/create-visual-element.mjs","../node_modules/framer-motion/dist/es/render/dom/features-max.mjs","../node_modules/framer-motion/dist/es/render/dom/features-animation.mjs"],"sourcesContent":["class Feature {\n    constructor(node) {\n        this.isMounted = false;\n        this.node = node;\n    }\n    update() { }\n}\n\nexport { Feature };\n","const isPrimaryPointer = (event) => {\n    if (event.pointerType === \"mouse\") {\n        return typeof event.button !== \"number\" || event.button <= 0;\n    }\n    else {\n        /**\n         * isPrimary is true for all mice buttons, whereas every touch point\n         * is regarded as its own input. So subsequent concurrent touch points\n         * will be false.\n         *\n         * Specifically match against false here as incomplete versions of\n         * PointerEvents in very old browser might have it set as undefined.\n         */\n        return event.isPrimary !== false;\n    }\n};\n\nexport { isPrimaryPointer };\n","import { isPrimaryPointer } from './utils/is-primary-pointer.mjs';\n\nfunction extractEventInfo(event, pointType = \"page\") {\n    return {\n        point: {\n            x: event[pointType + \"X\"],\n            y: event[pointType + \"Y\"],\n        },\n    };\n}\nconst addPointerInfo = (handler) => {\n    return (event) => isPrimaryPointer(event) && handler(event, extractEventInfo(event));\n};\n\nexport { addPointerInfo, extractEventInfo };\n","function addDomEvent(target, eventName, handler, options = { passive: true }) {\n    target.addEventListener(eventName, handler, options);\n    return () => target.removeEventListener(eventName, handler);\n}\n\nexport { addDomEvent };\n","import { addDomEvent } from './add-dom-event.mjs';\nimport { addPointerInfo } from './event-info.mjs';\n\nfunction addPointerEvent(target, eventName, handler, options) {\n    return addDomEvent(target, eventName, addPointerInfo(handler), options);\n}\n\nexport { addPointerEvent };\n","const distance = (a, b) => Math.abs(a - b);\nfunction distance2D(a, b) {\n    // Multi-dimensional\n    const xDelta = distance(a.x, b.x);\n    const yDelta = distance(a.y, b.y);\n    return Math.sqrt(xDelta ** 2 + yDelta ** 2);\n}\n\nexport { distance, distance2D };\n","import { extractEventInfo } from '../../events/event-info.mjs';\nimport { secondsToMilliseconds, millisecondsToSeconds } from '../../utils/time-conversion.mjs';\nimport { addPointerEvent } from '../../events/add-pointer-event.mjs';\nimport { pipe } from '../../utils/pipe.mjs';\nimport { distance2D } from '../../utils/distance.mjs';\nimport { isPrimaryPointer } from '../../events/utils/is-primary-pointer.mjs';\nimport { frame, cancelFrame, frameData } from '../../frameloop/frame.mjs';\n\n/**\n * @internal\n */\nclass PanSession {\n    constructor(event, handlers, { transformPagePoint } = {}) {\n        /**\n         * @internal\n         */\n        this.startEvent = null;\n        /**\n         * @internal\n         */\n        this.lastMoveEvent = null;\n        /**\n         * @internal\n         */\n        this.lastMoveEventInfo = null;\n        /**\n         * @internal\n         */\n        this.handlers = {};\n        this.updatePoint = () => {\n            if (!(this.lastMoveEvent && this.lastMoveEventInfo))\n                return;\n            const info = getPanInfo(this.lastMoveEventInfo, this.history);\n            const isPanStarted = this.startEvent !== null;\n            // Only start panning if the offset is larger than 3 pixels. If we make it\n            // any larger than this we'll want to reset the pointer history\n            // on the first update to avoid visual snapping to the cursoe.\n            const isDistancePastThreshold = distance2D(info.offset, { x: 0, y: 0 }) >= 3;\n            if (!isPanStarted && !isDistancePastThreshold)\n                return;\n            const { point } = info;\n            const { timestamp } = frameData;\n            this.history.push({ ...point, timestamp });\n            const { onStart, onMove } = this.handlers;\n            if (!isPanStarted) {\n                onStart && onStart(this.lastMoveEvent, info);\n                this.startEvent = this.lastMoveEvent;\n            }\n            onMove && onMove(this.lastMoveEvent, info);\n        };\n        this.handlePointerMove = (event, info) => {\n            this.lastMoveEvent = event;\n            this.lastMoveEventInfo = transformPoint(info, this.transformPagePoint);\n            // Throttle mouse move event to once per frame\n            frame.update(this.updatePoint, true);\n        };\n        this.handlePointerUp = (event, info) => {\n            this.end();\n            if (!(this.lastMoveEvent && this.lastMoveEventInfo))\n                return;\n            const { onEnd, onSessionEnd } = this.handlers;\n            const panInfo = getPanInfo(event.type === \"pointercancel\"\n                ? this.lastMoveEventInfo\n                : transformPoint(info, this.transformPagePoint), this.history);\n            if (this.startEvent && onEnd) {\n                onEnd(event, panInfo);\n            }\n            onSessionEnd && onSessionEnd(event, panInfo);\n        };\n        // If we have more than one touch, don't start detecting this gesture\n        if (!isPrimaryPointer(event))\n            return;\n        this.handlers = handlers;\n        this.transformPagePoint = transformPagePoint;\n        const info = extractEventInfo(event);\n        const initialInfo = transformPoint(info, this.transformPagePoint);\n        const { point } = initialInfo;\n        const { timestamp } = frameData;\n        this.history = [{ ...point, timestamp }];\n        const { onSessionStart } = handlers;\n        onSessionStart &&\n            onSessionStart(event, getPanInfo(initialInfo, this.history));\n        this.removeListeners = pipe(addPointerEvent(window, \"pointermove\", this.handlePointerMove), addPointerEvent(window, \"pointerup\", this.handlePointerUp), addPointerEvent(window, \"pointercancel\", this.handlePointerUp));\n    }\n    updateHandlers(handlers) {\n        this.handlers = handlers;\n    }\n    end() {\n        this.removeListeners && this.removeListeners();\n        cancelFrame(this.updatePoint);\n    }\n}\nfunction transformPoint(info, transformPagePoint) {\n    return transformPagePoint ? { point: transformPagePoint(info.point) } : info;\n}\nfunction subtractPoint(a, b) {\n    return { x: a.x - b.x, y: a.y - b.y };\n}\nfunction getPanInfo({ point }, history) {\n    return {\n        point,\n        delta: subtractPoint(point, lastDevicePoint(history)),\n        offset: subtractPoint(point, startDevicePoint(history)),\n        velocity: getVelocity(history, 0.1),\n    };\n}\nfunction startDevicePoint(history) {\n    return history[0];\n}\nfunction lastDevicePoint(history) {\n    return history[history.length - 1];\n}\nfunction getVelocity(history, timeDelta) {\n    if (history.length < 2) {\n        return { x: 0, y: 0 };\n    }\n    let i = history.length - 1;\n    let timestampedPoint = null;\n    const lastPoint = lastDevicePoint(history);\n    while (i >= 0) {\n        timestampedPoint = history[i];\n        if (lastPoint.timestamp - timestampedPoint.timestamp >\n            secondsToMilliseconds(timeDelta)) {\n            break;\n        }\n        i--;\n    }\n    if (!timestampedPoint) {\n        return { x: 0, y: 0 };\n    }\n    const time = millisecondsToSeconds(lastPoint.timestamp - timestampedPoint.timestamp);\n    if (time === 0) {\n        return { x: 0, y: 0 };\n    }\n    const currentVelocity = {\n        x: (lastPoint.x - timestampedPoint.x) / time,\n        y: (lastPoint.y - timestampedPoint.y) / time,\n    };\n    if (currentVelocity.x === Infinity) {\n        currentVelocity.x = 0;\n    }\n    if (currentVelocity.y === Infinity) {\n        currentVelocity.y = 0;\n    }\n    return currentVelocity;\n}\n\nexport { PanSession };\n","function createLock(name) {\n    let lock = null;\n    return () => {\n        const openLock = () => {\n            lock = null;\n        };\n        if (lock === null) {\n            lock = name;\n            return openLock;\n        }\n        return false;\n    };\n}\nconst globalHorizontalLock = createLock(\"dragHorizontal\");\nconst globalVerticalLock = createLock(\"dragVertical\");\nfunction getGlobalLock(drag) {\n    let lock = false;\n    if (drag === \"y\") {\n        lock = globalVerticalLock();\n    }\n    else if (drag === \"x\") {\n        lock = globalHorizontalLock();\n    }\n    else {\n        const openHorizontal = globalHorizontalLock();\n        const openVertical = globalVerticalLock();\n        if (openHorizontal && openVertical) {\n            lock = () => {\n                openHorizontal();\n                openVertical();\n            };\n        }\n        else {\n            // Release the locks because we don't use them\n            if (openHorizontal)\n                openHorizontal();\n            if (openVertical)\n                openVertical();\n        }\n    }\n    return lock;\n}\nfunction isDragActive() {\n    // Check the gesture lock - if we get it, it means no drag gesture is active\n    // and we can safely fire the tap gesture.\n    const openGestureLock = getGlobalLock(true);\n    if (!openGestureLock)\n        return true;\n    openGestureLock();\n    return false;\n}\n\nexport { createLock, getGlobalLock, isDragActive };\n","import { mix } from '../../utils/mix.mjs';\n\nfunction calcLength(axis) {\n    return axis.max - axis.min;\n}\nfunction isNear(value, target = 0, maxDistance = 0.01) {\n    return Math.abs(value - target) <= maxDistance;\n}\nfunction calcAxisDelta(delta, source, target, origin = 0.5) {\n    delta.origin = origin;\n    delta.originPoint = mix(source.min, source.max, delta.origin);\n    delta.scale = calcLength(target) / calcLength(source);\n    if (isNear(delta.scale, 1, 0.0001) || isNaN(delta.scale))\n        delta.scale = 1;\n    delta.translate =\n        mix(target.min, target.max, delta.origin) - delta.originPoint;\n    if (isNear(delta.translate) || isNaN(delta.translate))\n        delta.translate = 0;\n}\nfunction calcBoxDelta(delta, source, target, origin) {\n    calcAxisDelta(delta.x, source.x, target.x, origin ? origin.originX : undefined);\n    calcAxisDelta(delta.y, source.y, target.y, origin ? origin.originY : undefined);\n}\nfunction calcRelativeAxis(target, relative, parent) {\n    target.min = parent.min + relative.min;\n    target.max = target.min + calcLength(relative);\n}\nfunction calcRelativeBox(target, relative, parent) {\n    calcRelativeAxis(target.x, relative.x, parent.x);\n    calcRelativeAxis(target.y, relative.y, parent.y);\n}\nfunction calcRelativeAxisPosition(target, layout, parent) {\n    target.min = layout.min - parent.min;\n    target.max = target.min + calcLength(layout);\n}\nfunction calcRelativePosition(target, layout, parent) {\n    calcRelativeAxisPosition(target.x, layout.x, parent.x);\n    calcRelativeAxisPosition(target.y, layout.y, parent.y);\n}\n\nexport { calcAxisDelta, calcBoxDelta, calcLength, calcRelativeAxis, calcRelativeAxisPosition, calcRelativeBox, calcRelativePosition, isNear };\n","import { progress } from '../../../utils/progress.mjs';\nimport { calcLength } from '../../../projection/geometry/delta-calc.mjs';\nimport { clamp } from '../../../utils/clamp.mjs';\nimport { mix } from '../../../utils/mix.mjs';\n\n/**\n * Apply constraints to a point. These constraints are both physical along an\n * axis, and an elastic factor that determines how much to constrain the point\n * by if it does lie outside the defined parameters.\n */\nfunction applyConstraints(point, { min, max }, elastic) {\n    if (min !== undefined && point < min) {\n        // If we have a min point defined, and this is outside of that, constrain\n        point = elastic ? mix(min, point, elastic.min) : Math.max(point, min);\n    }\n    else if (max !== undefined && point > max) {\n        // If we have a max point defined, and this is outside of that, constrain\n        point = elastic ? mix(max, point, elastic.max) : Math.min(point, max);\n    }\n    return point;\n}\n/**\n * Calculate constraints in terms of the viewport when defined relatively to the\n * measured axis. This is measured from the nearest edge, so a max constraint of 200\n * on an axis with a max value of 300 would return a constraint of 500 - axis length\n */\nfunction calcRelativeAxisConstraints(axis, min, max) {\n    return {\n        min: min !== undefined ? axis.min + min : undefined,\n        max: max !== undefined\n            ? axis.max + max - (axis.max - axis.min)\n            : undefined,\n    };\n}\n/**\n * Calculate constraints in terms of the viewport when\n * defined relatively to the measured bounding box.\n */\nfunction calcRelativeConstraints(layoutBox, { top, left, bottom, right }) {\n    return {\n        x: calcRelativeAxisConstraints(layoutBox.x, left, right),\n        y: calcRelativeAxisConstraints(layoutBox.y, top, bottom),\n    };\n}\n/**\n * Calculate viewport constraints when defined as another viewport-relative axis\n */\nfunction calcViewportAxisConstraints(layoutAxis, constraintsAxis) {\n    let min = constraintsAxis.min - layoutAxis.min;\n    let max = constraintsAxis.max - layoutAxis.max;\n    // If the constraints axis is actually smaller than the layout axis then we can\n    // flip the constraints\n    if (constraintsAxis.max - constraintsAxis.min <\n        layoutAxis.max - layoutAxis.min) {\n        [min, max] = [max, min];\n    }\n    return { min, max };\n}\n/**\n * Calculate viewport constraints when defined as another viewport-relative box\n */\nfunction calcViewportConstraints(layoutBox, constraintsBox) {\n    return {\n        x: calcViewportAxisConstraints(layoutBox.x, constraintsBox.x),\n        y: calcViewportAxisConstraints(layoutBox.y, constraintsBox.y),\n    };\n}\n/**\n * Calculate a transform origin relative to the source axis, between 0-1, that results\n * in an asthetically pleasing scale/transform needed to project from source to target.\n */\nfunction calcOrigin(source, target) {\n    let origin = 0.5;\n    const sourceLength = calcLength(source);\n    const targetLength = calcLength(target);\n    if (targetLength > sourceLength) {\n        origin = progress(target.min, target.max - sourceLength, source.min);\n    }\n    else if (sourceLength > targetLength) {\n        origin = progress(source.min, source.max - targetLength, target.min);\n    }\n    return clamp(0, 1, origin);\n}\n/**\n * Rebase the calculated viewport constraints relative to the layout.min point.\n */\nfunction rebaseAxisConstraints(layout, constraints) {\n    const relativeConstraints = {};\n    if (constraints.min !== undefined) {\n        relativeConstraints.min = constraints.min - layout.min;\n    }\n    if (constraints.max !== undefined) {\n        relativeConstraints.max = constraints.max - layout.min;\n    }\n    return relativeConstraints;\n}\nconst defaultElastic = 0.35;\n/**\n * Accepts a dragElastic prop and returns resolved elastic values for each axis.\n */\nfunction resolveDragElastic(dragElastic = defaultElastic) {\n    if (dragElastic === false) {\n        dragElastic = 0;\n    }\n    else if (dragElastic === true) {\n        dragElastic = defaultElastic;\n    }\n    return {\n        x: resolveAxisElastic(dragElastic, \"left\", \"right\"),\n        y: resolveAxisElastic(dragElastic, \"top\", \"bottom\"),\n    };\n}\nfunction resolveAxisElastic(dragElastic, minLabel, maxLabel) {\n    return {\n        min: resolvePointElastic(dragElastic, minLabel),\n        max: resolvePointElastic(dragElastic, maxLabel),\n    };\n}\nfunction resolvePointElastic(dragElastic, label) {\n    return typeof dragElastic === \"number\"\n        ? dragElastic\n        : dragElastic[label] || 0;\n}\n\nexport { applyConstraints, calcOrigin, calcRelativeAxisConstraints, calcRelativeConstraints, calcViewportAxisConstraints, calcViewportConstraints, defaultElastic, rebaseAxisConstraints, resolveAxisElastic, resolveDragElastic, resolvePointElastic };\n","const createAxisDelta = () => ({\n    translate: 0,\n    scale: 1,\n    origin: 0,\n    originPoint: 0,\n});\nconst createDelta = () => ({\n    x: createAxisDelta(),\n    y: createAxisDelta(),\n});\nconst createAxis = () => ({ min: 0, max: 0 });\nconst createBox = () => ({\n    x: createAxis(),\n    y: createAxis(),\n});\n\nexport { createAxis, createAxisDelta, createBox, createDelta };\n","function eachAxis(callback) {\n    return [callback(\"x\"), callback(\"y\")];\n}\n\nexport { eachAxis };\n","/**\n * Bounding boxes tend to be defined as top, left, right, bottom. For various operations\n * it's easier to consider each axis individually. This function returns a bounding box\n * as a map of single-axis min/max values.\n */\nfunction convertBoundingBoxToBox({ top, left, right, bottom, }) {\n    return {\n        x: { min: left, max: right },\n        y: { min: top, max: bottom },\n    };\n}\nfunction convertBoxToBoundingBox({ x, y }) {\n    return { top: y.min, right: x.max, bottom: y.max, left: x.min };\n}\n/**\n * Applies a TransformPoint function to a bounding box. TransformPoint is usually a function\n * provided by Framer to allow measured points to be corrected for device scaling. This is used\n * when measuring DOM elements and DOM event points.\n */\nfunction transformBoxPoints(point, transformPoint) {\n    if (!transformPoint)\n        return point;\n    const topLeft = transformPoint({ x: point.left, y: point.top });\n    const bottomRight = transformPoint({ x: point.right, y: point.bottom });\n    return {\n        top: topLeft.y,\n        left: topLeft.x,\n        bottom: bottomRight.y,\n        right: bottomRight.x,\n    };\n}\n\nexport { convertBoundingBoxToBox, convertBoxToBoundingBox, transformBoxPoints };\n","function isIdentityScale(scale) {\n    return scale === undefined || scale === 1;\n}\nfunction hasScale({ scale, scaleX, scaleY }) {\n    return (!isIdentityScale(scale) ||\n        !isIdentityScale(scaleX) ||\n        !isIdentityScale(scaleY));\n}\nfunction hasTransform(values) {\n    return (hasScale(values) ||\n        has2DTranslate(values) ||\n        values.z ||\n        values.rotate ||\n        values.rotateX ||\n        values.rotateY);\n}\nfunction has2DTranslate(values) {\n    return is2DTranslate(values.x) || is2DTranslate(values.y);\n}\nfunction is2DTranslate(value) {\n    return value && value !== \"0%\";\n}\n\nexport { has2DTranslate, hasScale, hasTransform };\n","import { mix } from '../../utils/mix.mjs';\nimport { hasTransform } from '../utils/has-transform.mjs';\n\n/**\n * Scales a point based on a factor and an originPoint\n */\nfunction scalePoint(point, scale, originPoint) {\n    const distanceFromOrigin = point - originPoint;\n    const scaled = scale * distanceFromOrigin;\n    return originPoint + scaled;\n}\n/**\n * Applies a translate/scale delta to a point\n */\nfunction applyPointDelta(point, translate, scale, originPoint, boxScale) {\n    if (boxScale !== undefined) {\n        point = scalePoint(point, boxScale, originPoint);\n    }\n    return scalePoint(point, scale, originPoint) + translate;\n}\n/**\n * Applies a translate/scale delta to an axis\n */\nfunction applyAxisDelta(axis, translate = 0, scale = 1, originPoint, boxScale) {\n    axis.min = applyPointDelta(axis.min, translate, scale, originPoint, boxScale);\n    axis.max = applyPointDelta(axis.max, translate, scale, originPoint, boxScale);\n}\n/**\n * Applies a translate/scale delta to a box\n */\nfunction applyBoxDelta(box, { x, y }) {\n    applyAxisDelta(box.x, x.translate, x.scale, x.originPoint);\n    applyAxisDelta(box.y, y.translate, y.scale, y.originPoint);\n}\n/**\n * Apply a tree of deltas to a box. We do this to calculate the effect of all the transforms\n * in a tree upon our box before then calculating how to project it into our desired viewport-relative box\n *\n * This is the final nested loop within updateLayoutDelta for future refactoring\n */\nfunction applyTreeDeltas(box, treeScale, treePath, isSharedTransition = false) {\n    const treeLength = treePath.length;\n    if (!treeLength)\n        return;\n    // Reset the treeScale\n    treeScale.x = treeScale.y = 1;\n    let node;\n    let delta;\n    for (let i = 0; i < treeLength; i++) {\n        node = treePath[i];\n        delta = node.projectionDelta;\n        /**\n         * TODO: Prefer to remove this, but currently we have motion components with\n         * display: contents in Framer.\n         */\n        const instance = node.instance;\n        if (instance &&\n            instance.style &&\n            instance.style.display === \"contents\") {\n            continue;\n        }\n        if (isSharedTransition &&\n            node.options.layoutScroll &&\n            node.scroll &&\n            node !== node.root) {\n            transformBox(box, {\n                x: -node.scroll.offset.x,\n                y: -node.scroll.offset.y,\n            });\n        }\n        if (delta) {\n            // Incoporate each ancestor's scale into a culmulative treeScale for this component\n            treeScale.x *= delta.x.scale;\n            treeScale.y *= delta.y.scale;\n            // Apply each ancestor's calculated delta into this component's recorded layout box\n            applyBoxDelta(box, delta);\n        }\n        if (isSharedTransition && hasTransform(node.latestValues)) {\n            transformBox(box, node.latestValues);\n        }\n    }\n    /**\n     * Snap tree scale back to 1 if it's within a non-perceivable threshold.\n     * This will help reduce useless scales getting rendered.\n     */\n    treeScale.x = snapToDefault(treeScale.x);\n    treeScale.y = snapToDefault(treeScale.y);\n}\nfunction snapToDefault(scale) {\n    if (Number.isInteger(scale))\n        return scale;\n    return scale > 1.0000000000001 || scale < 0.999999999999 ? scale : 1;\n}\nfunction translateAxis(axis, distance) {\n    axis.min = axis.min + distance;\n    axis.max = axis.max + distance;\n}\n/**\n * Apply a transform to an axis from the latest resolved motion values.\n * This function basically acts as a bridge between a flat motion value map\n * and applyAxisDelta\n */\nfunction transformAxis(axis, transforms, [key, scaleKey, originKey]) {\n    const axisOrigin = transforms[originKey] !== undefined ? transforms[originKey] : 0.5;\n    const originPoint = mix(axis.min, axis.max, axisOrigin);\n    // Apply the axis delta to the final axis\n    applyAxisDelta(axis, transforms[key], transforms[scaleKey], originPoint, transforms.scale);\n}\n/**\n * The names of the motion values we want to apply as translation, scale and origin.\n */\nconst xKeys = [\"x\", \"scaleX\", \"originX\"];\nconst yKeys = [\"y\", \"scaleY\", \"originY\"];\n/**\n * Apply a transform to a box from the latest resolved motion values.\n */\nfunction transformBox(box, transform) {\n    transformAxis(box.x, transform, xKeys);\n    transformAxis(box.y, transform, yKeys);\n}\n\nexport { applyAxisDelta, applyBoxDelta, applyPointDelta, applyTreeDeltas, scalePoint, transformAxis, transformBox, translateAxis };\n","import { convertBoundingBoxToBox, transformBoxPoints } from '../geometry/conversion.mjs';\nimport { translateAxis } from '../geometry/delta-apply.mjs';\n\nfunction measureViewportBox(instance, transformPoint) {\n    return convertBoundingBoxToBox(transformBoxPoints(instance.getBoundingClientRect(), transformPoint));\n}\nfunction measurePageBox(element, rootProjectionNode, transformPagePoint) {\n    const viewportBox = measureViewportBox(element, transformPagePoint);\n    const { scroll } = rootProjectionNode;\n    if (scroll) {\n        translateAxis(viewportBox.x, scroll.offset.x);\n        translateAxis(viewportBox.y, scroll.offset.y);\n    }\n    return viewportBox;\n}\n\nexport { measurePageBox, measureViewportBox };\n","import { invariant } from '../../utils/errors.mjs';\nimport { PanSession } from '../pan/PanSession.mjs';\nimport { getGlobalLock } from './utils/lock.mjs';\nimport { isRefObject } from '../../utils/is-ref-object.mjs';\nimport { addPointerEvent } from '../../events/add-pointer-event.mjs';\nimport { applyConstraints, calcRelativeConstraints, resolveDragElastic, calcViewportConstraints, defaultElastic, rebaseAxisConstraints, calcOrigin } from './utils/constraints.mjs';\nimport { createBox } from '../../projection/geometry/models.mjs';\nimport { eachAxis } from '../../projection/utils/each-axis.mjs';\nimport { measurePageBox } from '../../projection/utils/measure.mjs';\nimport { extractEventInfo } from '../../events/event-info.mjs';\nimport { convertBoxToBoundingBox, convertBoundingBoxToBox } from '../../projection/geometry/conversion.mjs';\nimport { addDomEvent } from '../../events/add-dom-event.mjs';\nimport { calcLength } from '../../projection/geometry/delta-calc.mjs';\nimport { mix } from '../../utils/mix.mjs';\nimport { percent } from '../../value/types/numbers/units.mjs';\nimport { animateMotionValue } from '../../animation/interfaces/motion-value.mjs';\nimport { frame } from '../../frameloop/frame.mjs';\n\nconst elementDragControls = new WeakMap();\n/**\n *\n */\n// let latestPointerEvent: PointerEvent\nclass VisualElementDragControls {\n    constructor(visualElement) {\n        // This is a reference to the global drag gesture lock, ensuring only one component\n        // can \"capture\" the drag of one or both axes.\n        // TODO: Look into moving this into pansession?\n        this.openGlobalLock = null;\n        this.isDragging = false;\n        this.currentDirection = null;\n        this.originPoint = { x: 0, y: 0 };\n        /**\n         * The permitted boundaries of travel, in pixels.\n         */\n        this.constraints = false;\n        this.hasMutatedConstraints = false;\n        /**\n         * The per-axis resolved elastic values.\n         */\n        this.elastic = createBox();\n        this.visualElement = visualElement;\n    }\n    start(originEvent, { snapToCursor = false } = {}) {\n        /**\n         * Don't start dragging if this component is exiting\n         */\n        const { presenceContext } = this.visualElement;\n        if (presenceContext && presenceContext.isPresent === false)\n            return;\n        const onSessionStart = (event) => {\n            // Stop any animations on both axis values immediately. This allows the user to throw and catch\n            // the component.\n            this.stopAnimation();\n            if (snapToCursor) {\n                this.snapToCursor(extractEventInfo(event, \"page\").point);\n            }\n        };\n        const onStart = (event, info) => {\n            // Attempt to grab the global drag gesture lock - maybe make this part of PanSession\n            const { drag, dragPropagation, onDragStart } = this.getProps();\n            if (drag && !dragPropagation) {\n                if (this.openGlobalLock)\n                    this.openGlobalLock();\n                this.openGlobalLock = getGlobalLock(drag);\n                // If we don 't have the lock, don't start dragging\n                if (!this.openGlobalLock)\n                    return;\n            }\n            this.isDragging = true;\n            this.currentDirection = null;\n            this.resolveConstraints();\n            if (this.visualElement.projection) {\n                this.visualElement.projection.isAnimationBlocked = true;\n                this.visualElement.projection.target = undefined;\n            }\n            /**\n             * Record gesture origin\n             */\n            eachAxis((axis) => {\n                let current = this.getAxisMotionValue(axis).get() || 0;\n                /**\n                 * If the MotionValue is a percentage value convert to px\n                 */\n                if (percent.test(current)) {\n                    const { projection } = this.visualElement;\n                    if (projection && projection.layout) {\n                        const measuredAxis = projection.layout.layoutBox[axis];\n                        if (measuredAxis) {\n                            const length = calcLength(measuredAxis);\n                            current = length * (parseFloat(current) / 100);\n                        }\n                    }\n                }\n                this.originPoint[axis] = current;\n            });\n            // Fire onDragStart event\n            if (onDragStart) {\n                frame.update(() => onDragStart(event, info), false, true);\n            }\n            const { animationState } = this.visualElement;\n            animationState && animationState.setActive(\"whileDrag\", true);\n        };\n        const onMove = (event, info) => {\n            // latestPointerEvent = event\n            const { dragPropagation, dragDirectionLock, onDirectionLock, onDrag, } = this.getProps();\n            // If we didn't successfully receive the gesture lock, early return.\n            if (!dragPropagation && !this.openGlobalLock)\n                return;\n            const { offset } = info;\n            // Attempt to detect drag direction if directionLock is true\n            if (dragDirectionLock && this.currentDirection === null) {\n                this.currentDirection = getCurrentDirection(offset);\n                // If we've successfully set a direction, notify listener\n                if (this.currentDirection !== null) {\n                    onDirectionLock && onDirectionLock(this.currentDirection);\n                }\n                return;\n            }\n            // Update each point with the latest position\n            this.updateAxis(\"x\", info.point, offset);\n            this.updateAxis(\"y\", info.point, offset);\n            /**\n             * Ideally we would leave the renderer to fire naturally at the end of\n             * this frame but if the element is about to change layout as the result\n             * of a re-render we want to ensure the browser can read the latest\n             * bounding box to ensure the pointer and element don't fall out of sync.\n             */\n            this.visualElement.render();\n            /**\n             * This must fire after the render call as it might trigger a state\n             * change which itself might trigger a layout update.\n             */\n            onDrag && onDrag(event, info);\n        };\n        const onSessionEnd = (event, info) => this.stop(event, info);\n        this.panSession = new PanSession(originEvent, {\n            onSessionStart,\n            onStart,\n            onMove,\n            onSessionEnd,\n        }, { transformPagePoint: this.visualElement.getTransformPagePoint() });\n    }\n    stop(event, info) {\n        const isDragging = this.isDragging;\n        this.cancel();\n        if (!isDragging)\n            return;\n        const { velocity } = info;\n        this.startAnimation(velocity);\n        const { onDragEnd } = this.getProps();\n        if (onDragEnd) {\n            frame.update(() => onDragEnd(event, info));\n        }\n    }\n    cancel() {\n        this.isDragging = false;\n        const { projection, animationState } = this.visualElement;\n        if (projection) {\n            projection.isAnimationBlocked = false;\n        }\n        this.panSession && this.panSession.end();\n        this.panSession = undefined;\n        const { dragPropagation } = this.getProps();\n        if (!dragPropagation && this.openGlobalLock) {\n            this.openGlobalLock();\n            this.openGlobalLock = null;\n        }\n        animationState && animationState.setActive(\"whileDrag\", false);\n    }\n    updateAxis(axis, _point, offset) {\n        const { drag } = this.getProps();\n        // If we're not dragging this axis, do an early return.\n        if (!offset || !shouldDrag(axis, drag, this.currentDirection))\n            return;\n        const axisValue = this.getAxisMotionValue(axis);\n        let next = this.originPoint[axis] + offset[axis];\n        // Apply constraints\n        if (this.constraints && this.constraints[axis]) {\n            next = applyConstraints(next, this.constraints[axis], this.elastic[axis]);\n        }\n        axisValue.set(next);\n    }\n    resolveConstraints() {\n        const { dragConstraints, dragElastic } = this.getProps();\n        const { layout } = this.visualElement.projection || {};\n        const prevConstraints = this.constraints;\n        if (dragConstraints && isRefObject(dragConstraints)) {\n            if (!this.constraints) {\n                this.constraints = this.resolveRefConstraints();\n            }\n        }\n        else {\n            if (dragConstraints && layout) {\n                this.constraints = calcRelativeConstraints(layout.layoutBox, dragConstraints);\n            }\n            else {\n                this.constraints = false;\n            }\n        }\n        this.elastic = resolveDragElastic(dragElastic);\n        /**\n         * If we're outputting to external MotionValues, we want to rebase the measured constraints\n         * from viewport-relative to component-relative.\n         */\n        if (prevConstraints !== this.constraints &&\n            layout &&\n            this.constraints &&\n            !this.hasMutatedConstraints) {\n            eachAxis((axis) => {\n                if (this.getAxisMotionValue(axis)) {\n                    this.constraints[axis] = rebaseAxisConstraints(layout.layoutBox[axis], this.constraints[axis]);\n                }\n            });\n        }\n    }\n    resolveRefConstraints() {\n        const { dragConstraints: constraints, onMeasureDragConstraints } = this.getProps();\n        if (!constraints || !isRefObject(constraints))\n            return false;\n        const constraintsElement = constraints.current;\n        invariant(constraintsElement !== null, \"If `dragConstraints` is set as a React ref, that ref must be passed to another component's `ref` prop.\");\n        const { projection } = this.visualElement;\n        // TODO\n        if (!projection || !projection.layout)\n            return false;\n        const constraintsBox = measurePageBox(constraintsElement, projection.root, this.visualElement.getTransformPagePoint());\n        let measuredConstraints = calcViewportConstraints(projection.layout.layoutBox, constraintsBox);\n        /**\n         * If there's an onMeasureDragConstraints listener we call it and\n         * if different constraints are returned, set constraints to that\n         */\n        if (onMeasureDragConstraints) {\n            const userConstraints = onMeasureDragConstraints(convertBoxToBoundingBox(measuredConstraints));\n            this.hasMutatedConstraints = !!userConstraints;\n            if (userConstraints) {\n                measuredConstraints = convertBoundingBoxToBox(userConstraints);\n            }\n        }\n        return measuredConstraints;\n    }\n    startAnimation(velocity) {\n        const { drag, dragMomentum, dragElastic, dragTransition, dragSnapToOrigin, onDragTransitionEnd, } = this.getProps();\n        const constraints = this.constraints || {};\n        const momentumAnimations = eachAxis((axis) => {\n            if (!shouldDrag(axis, drag, this.currentDirection)) {\n                return;\n            }\n            let transition = (constraints && constraints[axis]) || {};\n            if (dragSnapToOrigin)\n                transition = { min: 0, max: 0 };\n            /**\n             * Overdamp the boundary spring if `dragElastic` is disabled. There's still a frame\n             * of spring animations so we should look into adding a disable spring option to `inertia`.\n             * We could do something here where we affect the `bounceStiffness` and `bounceDamping`\n             * using the value of `dragElastic`.\n             */\n            const bounceStiffness = dragElastic ? 200 : 1000000;\n            const bounceDamping = dragElastic ? 40 : 10000000;\n            const inertia = {\n                type: \"inertia\",\n                velocity: dragMomentum ? velocity[axis] : 0,\n                bounceStiffness,\n                bounceDamping,\n                timeConstant: 750,\n                restDelta: 1,\n                restSpeed: 10,\n                ...dragTransition,\n                ...transition,\n            };\n            // If we're not animating on an externally-provided `MotionValue` we can use the\n            // component's animation controls which will handle interactions with whileHover (etc),\n            // otherwise we just have to animate the `MotionValue` itself.\n            return this.startAxisValueAnimation(axis, inertia);\n        });\n        // Run all animations and then resolve the new drag constraints.\n        return Promise.all(momentumAnimations).then(onDragTransitionEnd);\n    }\n    startAxisValueAnimation(axis, transition) {\n        const axisValue = this.getAxisMotionValue(axis);\n        return axisValue.start(animateMotionValue(axis, axisValue, 0, transition));\n    }\n    stopAnimation() {\n        eachAxis((axis) => this.getAxisMotionValue(axis).stop());\n    }\n    /**\n     * Drag works differently depending on which props are provided.\n     *\n     * - If _dragX and _dragY are provided, we output the gesture delta directly to those motion values.\n     * - Otherwise, we apply the delta to the x/y motion values.\n     */\n    getAxisMotionValue(axis) {\n        const dragKey = \"_drag\" + axis.toUpperCase();\n        const props = this.visualElement.getProps();\n        const externalMotionValue = props[dragKey];\n        return externalMotionValue\n            ? externalMotionValue\n            : this.visualElement.getValue(axis, (props.initial ? props.initial[axis] : undefined) || 0);\n    }\n    snapToCursor(point) {\n        eachAxis((axis) => {\n            const { drag } = this.getProps();\n            // If we're not dragging this axis, do an early return.\n            if (!shouldDrag(axis, drag, this.currentDirection))\n                return;\n            const { projection } = this.visualElement;\n            const axisValue = this.getAxisMotionValue(axis);\n            if (projection && projection.layout) {\n                const { min, max } = projection.layout.layoutBox[axis];\n                axisValue.set(point[axis] - mix(min, max, 0.5));\n            }\n        });\n    }\n    /**\n     * When the viewport resizes we want to check if the measured constraints\n     * have changed and, if so, reposition the element within those new constraints\n     * relative to where it was before the resize.\n     */\n    scalePositionWithinConstraints() {\n        if (!this.visualElement.current)\n            return;\n        const { drag, dragConstraints } = this.getProps();\n        const { projection } = this.visualElement;\n        if (!isRefObject(dragConstraints) || !projection || !this.constraints)\n            return;\n        /**\n         * Stop current animations as there can be visual glitching if we try to do\n         * this mid-animation\n         */\n        this.stopAnimation();\n        /**\n         * Record the relative position of the dragged element relative to the\n         * constraints box and save as a progress value.\n         */\n        const boxProgress = { x: 0, y: 0 };\n        eachAxis((axis) => {\n            const axisValue = this.getAxisMotionValue(axis);\n            if (axisValue) {\n                const latest = axisValue.get();\n                boxProgress[axis] = calcOrigin({ min: latest, max: latest }, this.constraints[axis]);\n            }\n        });\n        /**\n         * Update the layout of this element and resolve the latest drag constraints\n         */\n        const { transformTemplate } = this.visualElement.getProps();\n        this.visualElement.current.style.transform = transformTemplate\n            ? transformTemplate({}, \"\")\n            : \"none\";\n        projection.root && projection.root.updateScroll();\n        projection.updateLayout();\n        this.resolveConstraints();\n        /**\n         * For each axis, calculate the current progress of the layout axis\n         * within the new constraints.\n         */\n        eachAxis((axis) => {\n            if (!shouldDrag(axis, drag, null))\n                return;\n            /**\n             * Calculate a new transform based on the previous box progress\n             */\n            const axisValue = this.getAxisMotionValue(axis);\n            const { min, max } = this.constraints[axis];\n            axisValue.set(mix(min, max, boxProgress[axis]));\n        });\n    }\n    addListeners() {\n        if (!this.visualElement.current)\n            return;\n        elementDragControls.set(this.visualElement, this);\n        const element = this.visualElement.current;\n        /**\n         * Attach a pointerdown event listener on this DOM element to initiate drag tracking.\n         */\n        const stopPointerListener = addPointerEvent(element, \"pointerdown\", (event) => {\n            const { drag, dragListener = true } = this.getProps();\n            drag && dragListener && this.start(event);\n        });\n        const measureDragConstraints = () => {\n            const { dragConstraints } = this.getProps();\n            if (isRefObject(dragConstraints)) {\n                this.constraints = this.resolveRefConstraints();\n            }\n        };\n        const { projection } = this.visualElement;\n        const stopMeasureLayoutListener = projection.addEventListener(\"measure\", measureDragConstraints);\n        if (projection && !projection.layout) {\n            projection.root && projection.root.updateScroll();\n            projection.updateLayout();\n        }\n        measureDragConstraints();\n        /**\n         * Attach a window resize listener to scale the draggable target within its defined\n         * constraints as the window resizes.\n         */\n        const stopResizeListener = addDomEvent(window, \"resize\", () => this.scalePositionWithinConstraints());\n        /**\n         * If the element's layout changes, calculate the delta and apply that to\n         * the drag gesture's origin point.\n         */\n        const stopLayoutUpdateListener = projection.addEventListener(\"didUpdate\", (({ delta, hasLayoutChanged }) => {\n            if (this.isDragging && hasLayoutChanged) {\n                eachAxis((axis) => {\n                    const motionValue = this.getAxisMotionValue(axis);\n                    if (!motionValue)\n                        return;\n                    this.originPoint[axis] += delta[axis].translate;\n                    motionValue.set(motionValue.get() + delta[axis].translate);\n                });\n                this.visualElement.render();\n            }\n        }));\n        return () => {\n            stopResizeListener();\n            stopPointerListener();\n            stopMeasureLayoutListener();\n            stopLayoutUpdateListener && stopLayoutUpdateListener();\n        };\n    }\n    getProps() {\n        const props = this.visualElement.getProps();\n        const { drag = false, dragDirectionLock = false, dragPropagation = false, dragConstraints = false, dragElastic = defaultElastic, dragMomentum = true, } = props;\n        return {\n            ...props,\n            drag,\n            dragDirectionLock,\n            dragPropagation,\n            dragConstraints,\n            dragElastic,\n            dragMomentum,\n        };\n    }\n}\nfunction shouldDrag(direction, drag, currentDirection) {\n    return ((drag === true || drag === direction) &&\n        (currentDirection === null || currentDirection === direction));\n}\n/**\n * Based on an x/y offset determine the current drag direction. If both axis' offsets are lower\n * than the provided threshold, return `null`.\n *\n * @param offset - The x/y offset from origin.\n * @param lockThreshold - (Optional) - the minimum absolute offset before we can determine a drag direction.\n */\nfunction getCurrentDirection(offset, lockThreshold = 10) {\n    let direction = null;\n    if (Math.abs(offset.y) > lockThreshold) {\n        direction = \"y\";\n    }\n    else if (Math.abs(offset.x) > lockThreshold) {\n        direction = \"x\";\n    }\n    return direction;\n}\n\nexport { VisualElementDragControls, elementDragControls };\n","import { PanSession } from './PanSession.mjs';\nimport { addPointerEvent } from '../../events/add-pointer-event.mjs';\nimport { Feature } from '../../motion/features/Feature.mjs';\nimport { noop } from '../../utils/noop.mjs';\nimport { frame } from '../../frameloop/frame.mjs';\n\nconst asyncHandler = (handler) => (event, info) => {\n    if (handler) {\n        frame.update(() => handler(event, info));\n    }\n};\nclass PanGesture extends Feature {\n    constructor() {\n        super(...arguments);\n        this.removePointerDownListener = noop;\n    }\n    onPointerDown(pointerDownEvent) {\n        this.session = new PanSession(pointerDownEvent, this.createPanHandlers(), { transformPagePoint: this.node.getTransformPagePoint() });\n    }\n    createPanHandlers() {\n        const { onPanSessionStart, onPanStart, onPan, onPanEnd } = this.node.getProps();\n        return {\n            onSessionStart: asyncHandler(onPanSessionStart),\n            onStart: asyncHandler(onPanStart),\n            onMove: onPan,\n            onEnd: (event, info) => {\n                delete this.session;\n                if (onPanEnd) {\n                    frame.update(() => onPanEnd(event, info));\n                }\n            },\n        };\n    }\n    mount() {\n        this.removePointerDownListener = addPointerEvent(this.node.current, \"pointerdown\", (event) => this.onPointerDown(event));\n    }\n    update() {\n        this.session && this.session.updateHandlers(this.createPanHandlers());\n    }\n    unmount() {\n        this.removePointerDownListener();\n        this.session && this.session.end();\n    }\n}\n\nexport { PanGesture };\n","/**\n * This should only ever be modified on the client otherwise it'll\n * persist through server requests. If we need instanced states we\n * could lazy-init via root.\n */\nconst globalProjectionState = {\n    /**\n     * Global flag as to whether the tree has animated since the last time\n     * we resized the window\n     */\n    hasAnimatedSinceResize: true,\n    /**\n     * We set this to true once, on the first update. Any nodes added to the tree beyond that\n     * update will be given a `data-projection-id` attribute.\n     */\n    hasEverUpdated: false,\n};\n\nexport { globalProjectionState };\n","import { px } from '../../value/types/numbers/units.mjs';\n\nfunction pixelsToPercent(pixels, axis) {\n    if (axis.max === axis.min)\n        return 0;\n    return (pixels / (axis.max - axis.min)) * 100;\n}\n/**\n * We always correct borderRadius as a percentage rather than pixels to reduce paints.\n * For example, if you are projecting a box that is 100px wide with a 10px borderRadius\n * into a box that is 200px wide with a 20px borderRadius, that is actually a 10%\n * borderRadius in both states. If we animate between the two in pixels that will trigger\n * a paint each time. If we animate between the two in percentage we'll avoid a paint.\n */\nconst correctBorderRadius = {\n    correct: (latest, node) => {\n        if (!node.target)\n            return latest;\n        /**\n         * If latest is a string, if it's a percentage we can return immediately as it's\n         * going to be stretched appropriately. Otherwise, if it's a pixel, convert it to a number.\n         */\n        if (typeof latest === \"string\") {\n            if (px.test(latest)) {\n                latest = parseFloat(latest);\n            }\n            else {\n                return latest;\n            }\n        }\n        /**\n         * If latest is a number, it's a pixel value. We use the current viewportBox to calculate that\n         * pixel value as a percentage of each axis\n         */\n        const x = pixelsToPercent(latest, node.target.x);\n        const y = pixelsToPercent(latest, node.target.y);\n        return `${x}% ${y}%`;\n    },\n};\n\nexport { correctBorderRadius, pixelsToPercent };\n","import { mix } from '../../utils/mix.mjs';\nimport { complex } from '../../value/types/complex/index.mjs';\n\nconst correctBoxShadow = {\n    correct: (latest, { treeScale, projectionDelta }) => {\n        const original = latest;\n        const shadow = complex.parse(latest);\n        // TODO: Doesn't support multiple shadows\n        if (shadow.length > 5)\n            return original;\n        const template = complex.createTransformer(latest);\n        const offset = typeof shadow[0] !== \"number\" ? 1 : 0;\n        // Calculate the overall context scale\n        const xScale = projectionDelta.x.scale * treeScale.x;\n        const yScale = projectionDelta.y.scale * treeScale.y;\n        shadow[0 + offset] /= xScale;\n        shadow[1 + offset] /= yScale;\n        /**\n         * Ideally we'd correct x and y scales individually, but because blur and\n         * spread apply to both we have to take a scale average and apply that instead.\n         * We could potentially improve the outcome of this by incorporating the ratio between\n         * the two scales.\n         */\n        const averageScale = mix(xScale, yScale, 0.5);\n        // Blur\n        if (typeof shadow[2 + offset] === \"number\")\n            shadow[2 + offset] /= averageScale;\n        // Spread\n        if (typeof shadow[3 + offset] === \"number\")\n            shadow[3 + offset] /= averageScale;\n        return template(shadow);\n    },\n};\n\nexport { correctBoxShadow };\n","import React__default, { useContext } from 'react';\nimport { usePresence } from '../../../components/AnimatePresence/use-presence.mjs';\nimport { LayoutGroupContext } from '../../../context/LayoutGroupContext.mjs';\nimport { SwitchLayoutGroupContext } from '../../../context/SwitchLayoutGroupContext.mjs';\nimport { globalProjectionState } from '../../../projection/node/state.mjs';\nimport { correctBorderRadius } from '../../../projection/styles/scale-border-radius.mjs';\nimport { correctBoxShadow } from '../../../projection/styles/scale-box-shadow.mjs';\nimport { addScaleCorrector } from '../../../projection/styles/scale-correction.mjs';\nimport { frame } from '../../../frameloop/frame.mjs';\n\nclass MeasureLayoutWithContext extends React__default.Component {\n    /**\n     * This only mounts projection nodes for components that\n     * need measuring, we might want to do it for all components\n     * in order to incorporate transforms\n     */\n    componentDidMount() {\n        const { visualElement, layoutGroup, switchLayoutGroup, layoutId } = this.props;\n        const { projection } = visualElement;\n        addScaleCorrector(defaultScaleCorrectors);\n        if (projection) {\n            if (layoutGroup.group)\n                layoutGroup.group.add(projection);\n            if (switchLayoutGroup && switchLayoutGroup.register && layoutId) {\n                switchLayoutGroup.register(projection);\n            }\n            projection.root.didUpdate();\n            projection.addEventListener(\"animationComplete\", () => {\n                this.safeToRemove();\n            });\n            projection.setOptions({\n                ...projection.options,\n                onExitComplete: () => this.safeToRemove(),\n            });\n        }\n        globalProjectionState.hasEverUpdated = true;\n    }\n    getSnapshotBeforeUpdate(prevProps) {\n        const { layoutDependency, visualElement, drag, isPresent } = this.props;\n        const projection = visualElement.projection;\n        if (!projection)\n            return null;\n        /**\n         * TODO: We use this data in relegate to determine whether to\n         * promote a previous element. There's no guarantee its presence data\n         * will have updated by this point - if a bug like this arises it will\n         * have to be that we markForRelegation and then find a new lead some other way,\n         * perhaps in didUpdate\n         */\n        projection.isPresent = isPresent;\n        if (drag ||\n            prevProps.layoutDependency !== layoutDependency ||\n            layoutDependency === undefined) {\n            projection.willUpdate();\n        }\n        else {\n            this.safeToRemove();\n        }\n        if (prevProps.isPresent !== isPresent) {\n            if (isPresent) {\n                projection.promote();\n            }\n            else if (!projection.relegate()) {\n                /**\n                 * If there's another stack member taking over from this one,\n                 * it's in charge of the exit animation and therefore should\n                 * be in charge of the safe to remove. Otherwise we call it here.\n                 */\n                frame.postRender(() => {\n                    const stack = projection.getStack();\n                    if (!stack || !stack.members.length) {\n                        this.safeToRemove();\n                    }\n                });\n            }\n        }\n        return null;\n    }\n    componentDidUpdate() {\n        const { projection } = this.props.visualElement;\n        if (projection) {\n            projection.root.didUpdate();\n            queueMicrotask(() => {\n                if (!projection.currentAnimation && projection.isLead()) {\n                    this.safeToRemove();\n                }\n            });\n        }\n    }\n    componentWillUnmount() {\n        const { visualElement, layoutGroup, switchLayoutGroup: promoteContext, } = this.props;\n        const { projection } = visualElement;\n        if (projection) {\n            projection.scheduleCheckAfterUnmount();\n            if (layoutGroup && layoutGroup.group)\n                layoutGroup.group.remove(projection);\n            if (promoteContext && promoteContext.deregister)\n                promoteContext.deregister(projection);\n        }\n    }\n    safeToRemove() {\n        const { safeToRemove } = this.props;\n        safeToRemove && safeToRemove();\n    }\n    render() {\n        return null;\n    }\n}\nfunction MeasureLayout(props) {\n    const [isPresent, safeToRemove] = usePresence();\n    const layoutGroup = useContext(LayoutGroupContext);\n    return (React__default.createElement(MeasureLayoutWithContext, { ...props, layoutGroup: layoutGroup, switchLayoutGroup: useContext(SwitchLayoutGroupContext), isPresent: isPresent, safeToRemove: safeToRemove }));\n}\nconst defaultScaleCorrectors = {\n    borderRadius: {\n        ...correctBorderRadius,\n        applyTo: [\n            \"borderTopLeftRadius\",\n            \"borderTopRightRadius\",\n            \"borderBottomLeftRadius\",\n            \"borderBottomRightRadius\",\n        ],\n    },\n    borderTopLeftRadius: correctBorderRadius,\n    borderTopRightRadius: correctBorderRadius,\n    borderBottomLeftRadius: correctBorderRadius,\n    borderBottomRightRadius: correctBorderRadius,\n    boxShadow: correctBoxShadow,\n};\n\nexport { MeasureLayout };\n","import { useContext, useId, useEffect } from 'react';\nimport { PresenceContext } from '../../context/PresenceContext.mjs';\n\n/**\n * When a component is the child of `AnimatePresence`, it can use `usePresence`\n * to access information about whether it's still present in the React tree.\n *\n * ```jsx\n * import { usePresence } from \"framer-motion\"\n *\n * export const Component = () => {\n *   const [isPresent, safeToRemove] = usePresence()\n *\n *   useEffect(() => {\n *     !isPresent && setTimeout(safeToRemove, 1000)\n *   }, [isPresent])\n *\n *   return <div />\n * }\n * ```\n *\n * If `isPresent` is `false`, it means that a component has been removed the tree, but\n * `AnimatePresence` won't really remove it until `safeToRemove` has been called.\n *\n * @public\n */\nfunction usePresence() {\n    const context = useContext(PresenceContext);\n    if (context === null)\n        return [true, null];\n    const { isPresent, onExitComplete, register } = context;\n    // It's safe to call the following hooks conditionally (after an early return) because the context will always\n    // either be null or non-null for the lifespan of the component.\n    const id = useId();\n    useEffect(() => register(id), []);\n    const safeToRemove = () => onExitComplete && onExitComplete(id);\n    return !isPresent && onExitComplete ? [false, safeToRemove] : [true];\n}\n/**\n * Similar to `usePresence`, except `useIsPresent` simply returns whether or not the component is present.\n * There is no `safeToRemove` function.\n *\n * ```jsx\n * import { useIsPresent } from \"framer-motion\"\n *\n * export const Component = () => {\n *   const isPresent = useIsPresent()\n *\n *   useEffect(() => {\n *     !isPresent && console.log(\"I've been removed!\")\n *   }, [isPresent])\n *\n *   return <div />\n * }\n * ```\n *\n * @public\n */\nfunction useIsPresent() {\n    return isPresent(useContext(PresenceContext));\n}\nfunction isPresent(context) {\n    return context === null ? true : context.isPresent;\n}\n\nexport { isPresent, useIsPresent, usePresence };\n","import { circOut } from '../../easing/circ.mjs';\nimport { progress } from '../../utils/progress.mjs';\nimport { mix } from '../../utils/mix.mjs';\nimport { noop } from '../../utils/noop.mjs';\nimport { percent, px } from '../../value/types/numbers/units.mjs';\n\nconst borders = [\"TopLeft\", \"TopRight\", \"BottomLeft\", \"BottomRight\"];\nconst numBorders = borders.length;\nconst asNumber = (value) => typeof value === \"string\" ? parseFloat(value) : value;\nconst isPx = (value) => typeof value === \"number\" || px.test(value);\nfunction mixValues(target, follow, lead, progress, shouldCrossfadeOpacity, isOnlyMember) {\n    if (shouldCrossfadeOpacity) {\n        target.opacity = mix(0, \n        // TODO Reinstate this if only child\n        lead.opacity !== undefined ? lead.opacity : 1, easeCrossfadeIn(progress));\n        target.opacityExit = mix(follow.opacity !== undefined ? follow.opacity : 1, 0, easeCrossfadeOut(progress));\n    }\n    else if (isOnlyMember) {\n        target.opacity = mix(follow.opacity !== undefined ? follow.opacity : 1, lead.opacity !== undefined ? lead.opacity : 1, progress);\n    }\n    /**\n     * Mix border radius\n     */\n    for (let i = 0; i < numBorders; i++) {\n        const borderLabel = `border${borders[i]}Radius`;\n        let followRadius = getRadius(follow, borderLabel);\n        let leadRadius = getRadius(lead, borderLabel);\n        if (followRadius === undefined && leadRadius === undefined)\n            continue;\n        followRadius || (followRadius = 0);\n        leadRadius || (leadRadius = 0);\n        const canMix = followRadius === 0 ||\n            leadRadius === 0 ||\n            isPx(followRadius) === isPx(leadRadius);\n        if (canMix) {\n            target[borderLabel] = Math.max(mix(asNumber(followRadius), asNumber(leadRadius), progress), 0);\n            if (percent.test(leadRadius) || percent.test(followRadius)) {\n                target[borderLabel] += \"%\";\n            }\n        }\n        else {\n            target[borderLabel] = leadRadius;\n        }\n    }\n    /**\n     * Mix rotation\n     */\n    if (follow.rotate || lead.rotate) {\n        target.rotate = mix(follow.rotate || 0, lead.rotate || 0, progress);\n    }\n}\nfunction getRadius(values, radiusName) {\n    return values[radiusName] !== undefined\n        ? values[radiusName]\n        : values.borderRadius;\n}\n// /**\n//  * We only want to mix the background color if there's a follow element\n//  * that we're not crossfading opacity between. For instance with switch\n//  * AnimateSharedLayout animations, this helps the illusion of a continuous\n//  * element being animated but also cuts down on the number of paints triggered\n//  * for elements where opacity is doing that work for us.\n//  */\n// if (\n//     !hasFollowElement &&\n//     latestLeadValues.backgroundColor &&\n//     latestFollowValues.backgroundColor\n// ) {\n//     /**\n//      * This isn't ideal performance-wise as mixColor is creating a new function every frame.\n//      * We could probably create a mixer that runs at the start of the animation but\n//      * the idea behind the crossfader is that it runs dynamically between two potentially\n//      * changing targets (ie opacity or borderRadius may be animating independently via variants)\n//      */\n//     leadState.backgroundColor = followState.backgroundColor = mixColor(\n//         latestFollowValues.backgroundColor as string,\n//         latestLeadValues.backgroundColor as string\n//     )(p)\n// }\nconst easeCrossfadeIn = compress(0, 0.5, circOut);\nconst easeCrossfadeOut = compress(0.5, 0.95, noop);\nfunction compress(min, max, easing) {\n    return (p) => {\n        // Could replace ifs with clamp\n        if (p < min)\n            return 0;\n        if (p > max)\n            return 1;\n        return easing(progress(min, max, p));\n    };\n}\n\nexport { mixValues };\n","/**\n * Reset an axis to the provided origin box.\n *\n * This is a mutative operation.\n */\nfunction copyAxisInto(axis, originAxis) {\n    axis.min = originAxis.min;\n    axis.max = originAxis.max;\n}\n/**\n * Reset a box to the provided origin box.\n *\n * This is a mutative operation.\n */\nfunction copyBoxInto(box, originBox) {\n    copyAxisInto(box.x, originBox.x);\n    copyAxisInto(box.y, originBox.y);\n}\n\nexport { copyAxisInto, copyBoxInto };\n","import { mix } from '../../utils/mix.mjs';\nimport { percent } from '../../value/types/numbers/units.mjs';\nimport { scalePoint } from './delta-apply.mjs';\n\n/**\n * Remove a delta from a point. This is essentially the steps of applyPointDelta in reverse\n */\nfunction removePointDelta(point, translate, scale, originPoint, boxScale) {\n    point -= translate;\n    point = scalePoint(point, 1 / scale, originPoint);\n    if (boxScale !== undefined) {\n        point = scalePoint(point, 1 / boxScale, originPoint);\n    }\n    return point;\n}\n/**\n * Remove a delta from an axis. This is essentially the steps of applyAxisDelta in reverse\n */\nfunction removeAxisDelta(axis, translate = 0, scale = 1, origin = 0.5, boxScale, originAxis = axis, sourceAxis = axis) {\n    if (percent.test(translate)) {\n        translate = parseFloat(translate);\n        const relativeProgress = mix(sourceAxis.min, sourceAxis.max, translate / 100);\n        translate = relativeProgress - sourceAxis.min;\n    }\n    if (typeof translate !== \"number\")\n        return;\n    let originPoint = mix(originAxis.min, originAxis.max, origin);\n    if (axis === originAxis)\n        originPoint -= translate;\n    axis.min = removePointDelta(axis.min, translate, scale, originPoint, boxScale);\n    axis.max = removePointDelta(axis.max, translate, scale, originPoint, boxScale);\n}\n/**\n * Remove a transforms from an axis. This is essentially the steps of applyAxisTransforms in reverse\n * and acts as a bridge between motion values and removeAxisDelta\n */\nfunction removeAxisTransforms(axis, transforms, [key, scaleKey, originKey], origin, sourceAxis) {\n    removeAxisDelta(axis, transforms[key], transforms[scaleKey], transforms[originKey], transforms.scale, origin, sourceAxis);\n}\n/**\n * The names of the motion values we want to apply as translation, scale and origin.\n */\nconst xKeys = [\"x\", \"scaleX\", \"originX\"];\nconst yKeys = [\"y\", \"scaleY\", \"originY\"];\n/**\n * Remove a transforms from an box. This is essentially the steps of applyAxisBox in reverse\n * and acts as a bridge between motion values and removeAxisDelta\n */\nfunction removeBoxTransforms(box, transforms, originBox, sourceBox) {\n    removeAxisTransforms(box.x, transforms, xKeys, originBox ? originBox.x : undefined, sourceBox ? sourceBox.x : undefined);\n    removeAxisTransforms(box.y, transforms, yKeys, originBox ? originBox.y : undefined, sourceBox ? sourceBox.y : undefined);\n}\n\nexport { removeAxisDelta, removeAxisTransforms, removeBoxTransforms, removePointDelta };\n","import { calcLength } from './delta-calc.mjs';\n\nfunction isAxisDeltaZero(delta) {\n    return delta.translate === 0 && delta.scale === 1;\n}\nfunction isDeltaZero(delta) {\n    return isAxisDeltaZero(delta.x) && isAxisDeltaZero(delta.y);\n}\nfunction boxEquals(a, b) {\n    return (a.x.min === b.x.min &&\n        a.x.max === b.x.max &&\n        a.y.min === b.y.min &&\n        a.y.max === b.y.max);\n}\nfunction boxEqualsRounded(a, b) {\n    return (Math.round(a.x.min) === Math.round(b.x.min) &&\n        Math.round(a.x.max) === Math.round(b.x.max) &&\n        Math.round(a.y.min) === Math.round(b.y.min) &&\n        Math.round(a.y.max) === Math.round(b.y.max));\n}\nfunction aspectRatio(box) {\n    return calcLength(box.x) / calcLength(box.y);\n}\n\nexport { aspectRatio, boxEquals, boxEqualsRounded, isDeltaZero };\n","import { addUniqueItem, removeItem } from '../../utils/array.mjs';\n\nclass NodeStack {\n    constructor() {\n        this.members = [];\n    }\n    add(node) {\n        addUniqueItem(this.members, node);\n        node.scheduleRender();\n    }\n    remove(node) {\n        removeItem(this.members, node);\n        if (node === this.prevLead) {\n            this.prevLead = undefined;\n        }\n        if (node === this.lead) {\n            const prevLead = this.members[this.members.length - 1];\n            if (prevLead) {\n                this.promote(prevLead);\n            }\n        }\n    }\n    relegate(node) {\n        const indexOfNode = this.members.findIndex((member) => node === member);\n        if (indexOfNode === 0)\n            return false;\n        /**\n         * Find the next projection node that is present\n         */\n        let prevLead;\n        for (let i = indexOfNode; i >= 0; i--) {\n            const member = this.members[i];\n            if (member.isPresent !== false) {\n                prevLead = member;\n                break;\n            }\n        }\n        if (prevLead) {\n            this.promote(prevLead);\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n    promote(node, preserveFollowOpacity) {\n        const prevLead = this.lead;\n        if (node === prevLead)\n            return;\n        this.prevLead = prevLead;\n        this.lead = node;\n        node.show();\n        if (prevLead) {\n            prevLead.instance && prevLead.scheduleRender();\n            node.scheduleRender();\n            node.resumeFrom = prevLead;\n            if (preserveFollowOpacity) {\n                node.resumeFrom.preserveOpacity = true;\n            }\n            if (prevLead.snapshot) {\n                node.snapshot = prevLead.snapshot;\n                node.snapshot.latestValues =\n                    prevLead.animationValues || prevLead.latestValues;\n            }\n            if (node.root && node.root.isUpdating) {\n                node.isLayoutDirty = true;\n            }\n            const { crossfade } = node.options;\n            if (crossfade === false) {\n                prevLead.hide();\n            }\n            /**\n             * TODO:\n             *   - Test border radius when previous node was deleted\n             *   - boxShadow mixing\n             *   - Shared between element A in scrolled container and element B (scroll stays the same or changes)\n             *   - Shared between element A in transformed container and element B (transform stays the same or changes)\n             *   - Shared between element A in scrolled page and element B (scroll stays the same or changes)\n             * ---\n             *   - Crossfade opacity of root nodes\n             *   - layoutId changes after animation\n             *   - layoutId changes mid animation\n             */\n        }\n    }\n    exitAnimationComplete() {\n        this.members.forEach((node) => {\n            const { options, resumingFrom } = node;\n            options.onExitComplete && options.onExitComplete();\n            if (resumingFrom) {\n                resumingFrom.options.onExitComplete &&\n                    resumingFrom.options.onExitComplete();\n            }\n        });\n    }\n    scheduleRender() {\n        this.members.forEach((node) => {\n            node.instance && node.scheduleRender(false);\n        });\n    }\n    /**\n     * Clear any leads that have been removed this render to prevent them from being\n     * used in future animations and to prevent memory leaks\n     */\n    removeLeadSnapshot() {\n        if (this.lead && this.lead.snapshot) {\n            this.lead.snapshot = undefined;\n        }\n    }\n}\n\nexport { NodeStack };\n","function buildProjectionTransform(delta, treeScale, latestTransform) {\n    let transform = \"\";\n    /**\n     * The translations we use to calculate are always relative to the viewport coordinate space.\n     * But when we apply scales, we also scale the coordinate space of an element and its children.\n     * For instance if we have a treeScale (the culmination of all parent scales) of 0.5 and we need\n     * to move an element 100 pixels, we actually need to move it 200 in within that scaled space.\n     */\n    const xTranslate = delta.x.translate / treeScale.x;\n    const yTranslate = delta.y.translate / treeScale.y;\n    if (xTranslate || yTranslate) {\n        transform = `translate3d(${xTranslate}px, ${yTranslate}px, 0) `;\n    }\n    /**\n     * Apply scale correction for the tree transform.\n     * This will apply scale to the screen-orientated axes.\n     */\n    if (treeScale.x !== 1 || treeScale.y !== 1) {\n        transform += `scale(${1 / treeScale.x}, ${1 / treeScale.y}) `;\n    }\n    if (latestTransform) {\n        const { rotate, rotateX, rotateY } = latestTransform;\n        if (rotate)\n            transform += `rotate(${rotate}deg) `;\n        if (rotateX)\n            transform += `rotateX(${rotateX}deg) `;\n        if (rotateY)\n            transform += `rotateY(${rotateY}deg) `;\n    }\n    /**\n     * Apply scale to match the size of the element to the size we want it.\n     * This will apply scale to the element-orientated axes.\n     */\n    const elementScaleX = delta.x.scale * treeScale.x;\n    const elementScaleY = delta.y.scale * treeScale.y;\n    if (elementScaleX !== 1 || elementScaleY !== 1) {\n        transform += `scale(${elementScaleX}, ${elementScaleY})`;\n    }\n    return transform || \"none\";\n}\n\nexport { buildProjectionTransform };\n","const compareByDepth = (a, b) => a.depth - b.depth;\n\nexport { compareByDepth };\n","import { addUniqueItem, removeItem } from '../../utils/array.mjs';\nimport { compareByDepth } from './compare-by-depth.mjs';\n\nclass FlatTree {\n    constructor() {\n        this.children = [];\n        this.isDirty = false;\n    }\n    add(child) {\n        addUniqueItem(this.children, child);\n        this.isDirty = true;\n    }\n    remove(child) {\n        removeItem(this.children, child);\n        this.isDirty = true;\n    }\n    forEach(callback) {\n        this.isDirty && this.children.sort(compareByDepth);\n        this.isDirty = false;\n        this.children.forEach(callback);\n    }\n}\n\nexport { FlatTree };\n","import { SubscriptionManager } from '../../utils/subscription-manager.mjs';\nimport { mixValues } from '../animation/mix-values.mjs';\nimport { copyBoxInto } from '../geometry/copy.mjs';\nimport { translateAxis, transformBox, applyBoxDelta, applyTreeDeltas } from '../geometry/delta-apply.mjs';\nimport { calcRelativePosition, calcRelativeBox, calcBoxDelta, calcLength, isNear } from '../geometry/delta-calc.mjs';\nimport { removeBoxTransforms } from '../geometry/delta-remove.mjs';\nimport { createBox, createDelta } from '../geometry/models.mjs';\nimport { getValueTransition } from '../../animation/utils/transitions.mjs';\nimport { boxEqualsRounded, isDeltaZero, aspectRatio, boxEquals } from '../geometry/utils.mjs';\nimport { NodeStack } from '../shared/stack.mjs';\nimport { scaleCorrectors } from '../styles/scale-correction.mjs';\nimport { buildProjectionTransform } from '../styles/transform.mjs';\nimport { eachAxis } from '../utils/each-axis.mjs';\nimport { hasTransform, hasScale, has2DTranslate } from '../utils/has-transform.mjs';\nimport { FlatTree } from '../../render/utils/flat-tree.mjs';\nimport { resolveMotionValue } from '../../value/utils/resolve-motion-value.mjs';\nimport { globalProjectionState } from './state.mjs';\nimport { delay } from '../../utils/delay.mjs';\nimport { mix } from '../../utils/mix.mjs';\nimport { record } from '../../debug/record.mjs';\nimport { isSVGElement } from '../../render/dom/utils/is-svg-element.mjs';\nimport { animateSingleValue } from '../../animation/interfaces/single-value.mjs';\nimport { clamp } from '../../utils/clamp.mjs';\nimport { cancelFrame, frameData, steps, frame } from '../../frameloop/frame.mjs';\nimport { noop } from '../../utils/noop.mjs';\n\nconst transformAxes = [\"\", \"X\", \"Y\", \"Z\"];\n/**\n * We use 1000 as the animation target as 0-1000 maps better to pixels than 0-1\n * which has a noticeable difference in spring animations\n */\nconst animationTarget = 1000;\nlet id = 0;\n/**\n * Use a mutable data object for debug data so as to not create a new\n * object every frame.\n */\nconst projectionFrameData = {\n    type: \"projectionFrame\",\n    totalNodes: 0,\n    resolvedTargetDeltas: 0,\n    recalculatedProjection: 0,\n};\nfunction createProjectionNode({ attachResizeListener, defaultParent, measureScroll, checkIsScrollRoot, resetTransform, }) {\n    return class ProjectionNode {\n        constructor(latestValues = {}, parent = defaultParent === null || defaultParent === void 0 ? void 0 : defaultParent()) {\n            /**\n             * A unique ID generated for every projection node.\n             */\n            this.id = id++;\n            /**\n             * An id that represents a unique session instigated by startUpdate.\n             */\n            this.animationId = 0;\n            /**\n             * A Set containing all this component's children. This is used to iterate\n             * through the children.\n             *\n             * TODO: This could be faster to iterate as a flat array stored on the root node.\n             */\n            this.children = new Set();\n            /**\n             * Options for the node. We use this to configure what kind of layout animations\n             * we should perform (if any).\n             */\n            this.options = {};\n            /**\n             * We use this to detect when its safe to shut down part of a projection tree.\n             * We have to keep projecting children for scale correction and relative projection\n             * until all their parents stop performing layout animations.\n             */\n            this.isTreeAnimating = false;\n            this.isAnimationBlocked = false;\n            /**\n             * Flag to true if we think this layout has been changed. We can't always know this,\n             * currently we set it to true every time a component renders, or if it has a layoutDependency\n             * if that has changed between renders. Additionally, components can be grouped by LayoutGroup\n             * and if one node is dirtied, they all are.\n             */\n            this.isLayoutDirty = false;\n            /**\n             * Flag to true if we think the projection calculations for this node needs\n             * recalculating as a result of an updated transform or layout animation.\n             */\n            this.isProjectionDirty = false;\n            /**\n             * Flag to true if the layout *or* transform has changed. This then gets propagated\n             * throughout the projection tree, forcing any element below to recalculate on the next frame.\n             */\n            this.isSharedProjectionDirty = false;\n            /**\n             * Flag transform dirty. This gets propagated throughout the whole tree but is only\n             * respected by shared nodes.\n             */\n            this.isTransformDirty = false;\n            /**\n             * Block layout updates for instant layout transitions throughout the tree.\n             */\n            this.updateManuallyBlocked = false;\n            this.updateBlockedByResize = false;\n            /**\n             * Set to true between the start of the first `willUpdate` call and the end of the `didUpdate`\n             * call.\n             */\n            this.isUpdating = false;\n            /**\n             * If this is an SVG element we currently disable projection transforms\n             */\n            this.isSVG = false;\n            /**\n             * Flag to true (during promotion) if a node doing an instant layout transition needs to reset\n             * its projection styles.\n             */\n            this.needsReset = false;\n            /**\n             * Flags whether this node should have its transform reset prior to measuring.\n             */\n            this.shouldResetTransform = false;\n            /**\n             * An object representing the calculated contextual/accumulated/tree scale.\n             * This will be used to scale calculcated projection transforms, as these are\n             * calculated in screen-space but need to be scaled for elements to layoutly\n             * make it to their calculated destinations.\n             *\n             * TODO: Lazy-init\n             */\n            this.treeScale = { x: 1, y: 1 };\n            /**\n             *\n             */\n            this.eventHandlers = new Map();\n            this.hasTreeAnimated = false;\n            // Note: Currently only running on root node\n            this.updateScheduled = false;\n            this.checkUpdateFailed = () => {\n                if (this.isUpdating) {\n                    this.isUpdating = false;\n                    this.clearAllSnapshots();\n                }\n            };\n            /**\n             * This is a multi-step process as shared nodes might be of different depths. Nodes\n             * are sorted by depth order, so we need to resolve the entire tree before moving to\n             * the next step.\n             */\n            this.updateProjection = () => {\n                /**\n                 * Reset debug counts. Manually resetting rather than creating a new\n                 * object each frame.\n                 */\n                projectionFrameData.totalNodes =\n                    projectionFrameData.resolvedTargetDeltas =\n                        projectionFrameData.recalculatedProjection =\n                            0;\n                this.nodes.forEach(propagateDirtyNodes);\n                this.nodes.forEach(resolveTargetDelta);\n                this.nodes.forEach(calcProjection);\n                this.nodes.forEach(cleanDirtyNodes);\n                record(projectionFrameData);\n            };\n            this.hasProjected = false;\n            this.isVisible = true;\n            this.animationProgress = 0;\n            /**\n             * Shared layout\n             */\n            // TODO Only running on root node\n            this.sharedNodes = new Map();\n            this.latestValues = latestValues;\n            this.root = parent ? parent.root || parent : this;\n            this.path = parent ? [...parent.path, parent] : [];\n            this.parent = parent;\n            this.depth = parent ? parent.depth + 1 : 0;\n            for (let i = 0; i < this.path.length; i++) {\n                this.path[i].shouldResetTransform = true;\n            }\n            if (this.root === this)\n                this.nodes = new FlatTree();\n        }\n        addEventListener(name, handler) {\n            if (!this.eventHandlers.has(name)) {\n                this.eventHandlers.set(name, new SubscriptionManager());\n            }\n            return this.eventHandlers.get(name).add(handler);\n        }\n        notifyListeners(name, ...args) {\n            const subscriptionManager = this.eventHandlers.get(name);\n            subscriptionManager && subscriptionManager.notify(...args);\n        }\n        hasListeners(name) {\n            return this.eventHandlers.has(name);\n        }\n        /**\n         * Lifecycles\n         */\n        mount(instance, isLayoutDirty = this.root.hasTreeAnimated) {\n            if (this.instance)\n                return;\n            this.isSVG = isSVGElement(instance);\n            this.instance = instance;\n            const { layoutId, layout, visualElement } = this.options;\n            if (visualElement && !visualElement.current) {\n                visualElement.mount(instance);\n            }\n            this.root.nodes.add(this);\n            this.parent && this.parent.children.add(this);\n            if (isLayoutDirty && (layout || layoutId)) {\n                this.isLayoutDirty = true;\n            }\n            if (attachResizeListener) {\n                let cancelDelay;\n                const resizeUnblockUpdate = () => (this.root.updateBlockedByResize = false);\n                attachResizeListener(instance, () => {\n                    this.root.updateBlockedByResize = true;\n                    cancelDelay && cancelDelay();\n                    cancelDelay = delay(resizeUnblockUpdate, 250);\n                    if (globalProjectionState.hasAnimatedSinceResize) {\n                        globalProjectionState.hasAnimatedSinceResize = false;\n                        this.nodes.forEach(finishAnimation);\n                    }\n                });\n            }\n            if (layoutId) {\n                this.root.registerSharedNode(layoutId, this);\n            }\n            // Only register the handler if it requires layout animation\n            if (this.options.animate !== false &&\n                visualElement &&\n                (layoutId || layout)) {\n                this.addEventListener(\"didUpdate\", ({ delta, hasLayoutChanged, hasRelativeTargetChanged, layout: newLayout, }) => {\n                    if (this.isTreeAnimationBlocked()) {\n                        this.target = undefined;\n                        this.relativeTarget = undefined;\n                        return;\n                    }\n                    // TODO: Check here if an animation exists\n                    const layoutTransition = this.options.transition ||\n                        visualElement.getDefaultTransition() ||\n                        defaultLayoutTransition;\n                    const { onLayoutAnimationStart, onLayoutAnimationComplete, } = visualElement.getProps();\n                    /**\n                     * The target layout of the element might stay the same,\n                     * but its position relative to its parent has changed.\n                     */\n                    const targetChanged = !this.targetLayout ||\n                        !boxEqualsRounded(this.targetLayout, newLayout) ||\n                        hasRelativeTargetChanged;\n                    /**\n                     * If the layout hasn't seemed to have changed, it might be that the\n                     * element is visually in the same place in the document but its position\n                     * relative to its parent has indeed changed. So here we check for that.\n                     */\n                    const hasOnlyRelativeTargetChanged = !hasLayoutChanged && hasRelativeTargetChanged;\n                    if (this.options.layoutRoot ||\n                        (this.resumeFrom && this.resumeFrom.instance) ||\n                        hasOnlyRelativeTargetChanged ||\n                        (hasLayoutChanged &&\n                            (targetChanged || !this.currentAnimation))) {\n                        if (this.resumeFrom) {\n                            this.resumingFrom = this.resumeFrom;\n                            this.resumingFrom.resumingFrom = undefined;\n                        }\n                        this.setAnimationOrigin(delta, hasOnlyRelativeTargetChanged);\n                        const animationOptions = {\n                            ...getValueTransition(layoutTransition, \"layout\"),\n                            onPlay: onLayoutAnimationStart,\n                            onComplete: onLayoutAnimationComplete,\n                        };\n                        if (visualElement.shouldReduceMotion ||\n                            this.options.layoutRoot) {\n                            animationOptions.delay = 0;\n                            animationOptions.type = false;\n                        }\n                        this.startAnimation(animationOptions);\n                    }\n                    else {\n                        /**\n                         * If the layout hasn't changed and we have an animation that hasn't started yet,\n                         * finish it immediately. Otherwise it will be animating from a location\n                         * that was probably never commited to screen and look like a jumpy box.\n                         */\n                        if (!hasLayoutChanged) {\n                            finishAnimation(this);\n                        }\n                        if (this.isLead() && this.options.onExitComplete) {\n                            this.options.onExitComplete();\n                        }\n                    }\n                    this.targetLayout = newLayout;\n                });\n            }\n        }\n        unmount() {\n            this.options.layoutId && this.willUpdate();\n            this.root.nodes.remove(this);\n            const stack = this.getStack();\n            stack && stack.remove(this);\n            this.parent && this.parent.children.delete(this);\n            this.instance = undefined;\n            cancelFrame(this.updateProjection);\n        }\n        // only on the root\n        blockUpdate() {\n            this.updateManuallyBlocked = true;\n        }\n        unblockUpdate() {\n            this.updateManuallyBlocked = false;\n        }\n        isUpdateBlocked() {\n            return this.updateManuallyBlocked || this.updateBlockedByResize;\n        }\n        isTreeAnimationBlocked() {\n            return (this.isAnimationBlocked ||\n                (this.parent && this.parent.isTreeAnimationBlocked()) ||\n                false);\n        }\n        // Note: currently only running on root node\n        startUpdate() {\n            if (this.isUpdateBlocked())\n                return;\n            this.isUpdating = true;\n            this.nodes && this.nodes.forEach(resetRotation);\n            this.animationId++;\n        }\n        getTransformTemplate() {\n            const { visualElement } = this.options;\n            return visualElement && visualElement.getProps().transformTemplate;\n        }\n        willUpdate(shouldNotifyListeners = true) {\n            this.root.hasTreeAnimated = true;\n            if (this.root.isUpdateBlocked()) {\n                this.options.onExitComplete && this.options.onExitComplete();\n                return;\n            }\n            !this.root.isUpdating && this.root.startUpdate();\n            if (this.isLayoutDirty)\n                return;\n            this.isLayoutDirty = true;\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                node.shouldResetTransform = true;\n                node.updateScroll(\"snapshot\");\n                if (node.options.layoutRoot) {\n                    node.willUpdate(false);\n                }\n            }\n            const { layoutId, layout } = this.options;\n            if (layoutId === undefined && !layout)\n                return;\n            const transformTemplate = this.getTransformTemplate();\n            this.prevTransformTemplateValue = transformTemplate\n                ? transformTemplate(this.latestValues, \"\")\n                : undefined;\n            this.updateSnapshot();\n            shouldNotifyListeners && this.notifyListeners(\"willUpdate\");\n        }\n        update() {\n            this.updateScheduled = false;\n            const updateWasBlocked = this.isUpdateBlocked();\n            // When doing an instant transition, we skip the layout update,\n            // but should still clean up the measurements so that the next\n            // snapshot could be taken correctly.\n            if (updateWasBlocked) {\n                this.unblockUpdate();\n                this.clearAllSnapshots();\n                this.nodes.forEach(clearMeasurements);\n                return;\n            }\n            if (!this.isUpdating) {\n                this.nodes.forEach(clearIsLayoutDirty);\n            }\n            this.isUpdating = false;\n            /**\n             * Write\n             */\n            this.nodes.forEach(resetTransformStyle);\n            /**\n             * Read ==================\n             */\n            // Update layout measurements of updated children\n            this.nodes.forEach(updateLayout);\n            /**\n             * Write\n             */\n            // Notify listeners that the layout is updated\n            this.nodes.forEach(notifyLayoutUpdate);\n            this.clearAllSnapshots();\n            /**\n             * Manually flush any pending updates. Ideally\n             * we could leave this to the following requestAnimationFrame but this seems\n             * to leave a flash of incorrectly styled content.\n             */\n            const now = performance.now();\n            frameData.delta = clamp(0, 1000 / 60, now - frameData.timestamp);\n            frameData.timestamp = now;\n            frameData.isProcessing = true;\n            steps.update.process(frameData);\n            steps.preRender.process(frameData);\n            steps.render.process(frameData);\n            frameData.isProcessing = false;\n        }\n        didUpdate() {\n            if (!this.updateScheduled) {\n                this.updateScheduled = true;\n                queueMicrotask(() => this.update());\n            }\n        }\n        clearAllSnapshots() {\n            this.nodes.forEach(clearSnapshot);\n            this.sharedNodes.forEach(removeLeadSnapshots);\n        }\n        scheduleUpdateProjection() {\n            frame.preRender(this.updateProjection, false, true);\n        }\n        scheduleCheckAfterUnmount() {\n            /**\n             * If the unmounting node is in a layoutGroup and did trigger a willUpdate,\n             * we manually call didUpdate to give a chance to the siblings to animate.\n             * Otherwise, cleanup all snapshots to prevents future nodes from reusing them.\n             */\n            frame.postRender(() => {\n                if (this.isLayoutDirty) {\n                    this.root.didUpdate();\n                }\n                else {\n                    this.root.checkUpdateFailed();\n                }\n            });\n        }\n        /**\n         * Update measurements\n         */\n        updateSnapshot() {\n            if (this.snapshot || !this.instance)\n                return;\n            this.snapshot = this.measure();\n        }\n        updateLayout() {\n            if (!this.instance)\n                return;\n            // TODO: Incorporate into a forwarded scroll offset\n            this.updateScroll();\n            if (!(this.options.alwaysMeasureLayout && this.isLead()) &&\n                !this.isLayoutDirty) {\n                return;\n            }\n            /**\n             * When a node is mounted, it simply resumes from the prevLead's\n             * snapshot instead of taking a new one, but the ancestors scroll\n             * might have updated while the prevLead is unmounted. We need to\n             * update the scroll again to make sure the layout we measure is\n             * up to date.\n             */\n            if (this.resumeFrom && !this.resumeFrom.instance) {\n                for (let i = 0; i < this.path.length; i++) {\n                    const node = this.path[i];\n                    node.updateScroll();\n                }\n            }\n            const prevLayout = this.layout;\n            this.layout = this.measure(false);\n            this.layoutCorrected = createBox();\n            this.isLayoutDirty = false;\n            this.projectionDelta = undefined;\n            this.notifyListeners(\"measure\", this.layout.layoutBox);\n            const { visualElement } = this.options;\n            visualElement &&\n                visualElement.notify(\"LayoutMeasure\", this.layout.layoutBox, prevLayout ? prevLayout.layoutBox : undefined);\n        }\n        updateScroll(phase = \"measure\") {\n            let needsMeasurement = Boolean(this.options.layoutScroll && this.instance);\n            if (this.scroll &&\n                this.scroll.animationId === this.root.animationId &&\n                this.scroll.phase === phase) {\n                needsMeasurement = false;\n            }\n            if (needsMeasurement) {\n                this.scroll = {\n                    animationId: this.root.animationId,\n                    phase,\n                    isRoot: checkIsScrollRoot(this.instance),\n                    offset: measureScroll(this.instance),\n                };\n            }\n        }\n        resetTransform() {\n            if (!resetTransform)\n                return;\n            const isResetRequested = this.isLayoutDirty || this.shouldResetTransform;\n            const hasProjection = this.projectionDelta && !isDeltaZero(this.projectionDelta);\n            const transformTemplate = this.getTransformTemplate();\n            const transformTemplateValue = transformTemplate\n                ? transformTemplate(this.latestValues, \"\")\n                : undefined;\n            const transformTemplateHasChanged = transformTemplateValue !== this.prevTransformTemplateValue;\n            if (isResetRequested &&\n                (hasProjection ||\n                    hasTransform(this.latestValues) ||\n                    transformTemplateHasChanged)) {\n                resetTransform(this.instance, transformTemplateValue);\n                this.shouldResetTransform = false;\n                this.scheduleRender();\n            }\n        }\n        measure(removeTransform = true) {\n            const pageBox = this.measurePageBox();\n            let layoutBox = this.removeElementScroll(pageBox);\n            /**\n             * Measurements taken during the pre-render stage\n             * still have transforms applied so we remove them\n             * via calculation.\n             */\n            if (removeTransform) {\n                layoutBox = this.removeTransform(layoutBox);\n            }\n            roundBox(layoutBox);\n            return {\n                animationId: this.root.animationId,\n                measuredBox: pageBox,\n                layoutBox,\n                latestValues: {},\n                source: this.id,\n            };\n        }\n        measurePageBox() {\n            const { visualElement } = this.options;\n            if (!visualElement)\n                return createBox();\n            const box = visualElement.measureViewportBox();\n            // Remove viewport scroll to give page-relative coordinates\n            const { scroll } = this.root;\n            if (scroll) {\n                translateAxis(box.x, scroll.offset.x);\n                translateAxis(box.y, scroll.offset.y);\n            }\n            return box;\n        }\n        removeElementScroll(box) {\n            const boxWithoutScroll = createBox();\n            copyBoxInto(boxWithoutScroll, box);\n            /**\n             * Performance TODO: Keep a cumulative scroll offset down the tree\n             * rather than loop back up the path.\n             */\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                const { scroll, options } = node;\n                if (node !== this.root && scroll && options.layoutScroll) {\n                    /**\n                     * If this is a new scroll root, we want to remove all previous scrolls\n                     * from the viewport box.\n                     */\n                    if (scroll.isRoot) {\n                        copyBoxInto(boxWithoutScroll, box);\n                        const { scroll: rootScroll } = this.root;\n                        /**\n                         * Undo the application of page scroll that was originally added\n                         * to the measured bounding box.\n                         */\n                        if (rootScroll) {\n                            translateAxis(boxWithoutScroll.x, -rootScroll.offset.x);\n                            translateAxis(boxWithoutScroll.y, -rootScroll.offset.y);\n                        }\n                    }\n                    translateAxis(boxWithoutScroll.x, scroll.offset.x);\n                    translateAxis(boxWithoutScroll.y, scroll.offset.y);\n                }\n            }\n            return boxWithoutScroll;\n        }\n        applyTransform(box, transformOnly = false) {\n            const withTransforms = createBox();\n            copyBoxInto(withTransforms, box);\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                if (!transformOnly &&\n                    node.options.layoutScroll &&\n                    node.scroll &&\n                    node !== node.root) {\n                    transformBox(withTransforms, {\n                        x: -node.scroll.offset.x,\n                        y: -node.scroll.offset.y,\n                    });\n                }\n                if (!hasTransform(node.latestValues))\n                    continue;\n                transformBox(withTransforms, node.latestValues);\n            }\n            if (hasTransform(this.latestValues)) {\n                transformBox(withTransforms, this.latestValues);\n            }\n            return withTransforms;\n        }\n        removeTransform(box) {\n            const boxWithoutTransform = createBox();\n            copyBoxInto(boxWithoutTransform, box);\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                if (!node.instance)\n                    continue;\n                if (!hasTransform(node.latestValues))\n                    continue;\n                hasScale(node.latestValues) && node.updateSnapshot();\n                const sourceBox = createBox();\n                const nodeBox = node.measurePageBox();\n                copyBoxInto(sourceBox, nodeBox);\n                removeBoxTransforms(boxWithoutTransform, node.latestValues, node.snapshot ? node.snapshot.layoutBox : undefined, sourceBox);\n            }\n            if (hasTransform(this.latestValues)) {\n                removeBoxTransforms(boxWithoutTransform, this.latestValues);\n            }\n            return boxWithoutTransform;\n        }\n        setTargetDelta(delta) {\n            this.targetDelta = delta;\n            this.root.scheduleUpdateProjection();\n            this.isProjectionDirty = true;\n        }\n        setOptions(options) {\n            this.options = {\n                ...this.options,\n                ...options,\n                crossfade: options.crossfade !== undefined ? options.crossfade : true,\n            };\n        }\n        clearMeasurements() {\n            this.scroll = undefined;\n            this.layout = undefined;\n            this.snapshot = undefined;\n            this.prevTransformTemplateValue = undefined;\n            this.targetDelta = undefined;\n            this.target = undefined;\n            this.isLayoutDirty = false;\n        }\n        forceRelativeParentToResolveTarget() {\n            if (!this.relativeParent)\n                return;\n            /**\n             * If the parent target isn't up-to-date, force it to update.\n             * This is an unfortunate de-optimisation as it means any updating relative\n             * projection will cause all the relative parents to recalculate back\n             * up the tree.\n             */\n            if (this.relativeParent.resolvedRelativeTargetAt !==\n                frameData.timestamp) {\n                this.relativeParent.resolveTargetDelta(true);\n            }\n        }\n        resolveTargetDelta(forceRecalculation = false) {\n            var _a;\n            /**\n             * Once the dirty status of nodes has been spread through the tree, we also\n             * need to check if we have a shared node of a different depth that has itself\n             * been dirtied.\n             */\n            const lead = this.getLead();\n            this.isProjectionDirty || (this.isProjectionDirty = lead.isProjectionDirty);\n            this.isTransformDirty || (this.isTransformDirty = lead.isTransformDirty);\n            this.isSharedProjectionDirty || (this.isSharedProjectionDirty = lead.isSharedProjectionDirty);\n            const isShared = Boolean(this.resumingFrom) || this !== lead;\n            /**\n             * We don't use transform for this step of processing so we don't\n             * need to check whether any nodes have changed transform.\n             */\n            const canSkip = !(forceRecalculation ||\n                (isShared && this.isSharedProjectionDirty) ||\n                this.isProjectionDirty ||\n                ((_a = this.parent) === null || _a === void 0 ? void 0 : _a.isProjectionDirty) ||\n                this.attemptToResolveRelativeTarget);\n            if (canSkip)\n                return;\n            const { layout, layoutId } = this.options;\n            /**\n             * If we have no layout, we can't perform projection, so early return\n             */\n            if (!this.layout || !(layout || layoutId))\n                return;\n            this.resolvedRelativeTargetAt = frameData.timestamp;\n            /**\n             * If we don't have a targetDelta but do have a layout, we can attempt to resolve\n             * a relativeParent. This will allow a component to perform scale correction\n             * even if no animation has started.\n             */\n            // TODO If this is unsuccessful this currently happens every frame\n            if (!this.targetDelta && !this.relativeTarget) {\n                // TODO: This is a semi-repetition of further down this function, make DRY\n                const relativeParent = this.getClosestProjectingParent();\n                if (relativeParent &&\n                    relativeParent.layout &&\n                    this.animationProgress !== 1) {\n                    this.relativeParent = relativeParent;\n                    this.forceRelativeParentToResolveTarget();\n                    this.relativeTarget = createBox();\n                    this.relativeTargetOrigin = createBox();\n                    calcRelativePosition(this.relativeTargetOrigin, this.layout.layoutBox, relativeParent.layout.layoutBox);\n                    copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);\n                }\n                else {\n                    this.relativeParent = this.relativeTarget = undefined;\n                }\n            }\n            /**\n             * If we have no relative target or no target delta our target isn't valid\n             * for this frame.\n             */\n            if (!this.relativeTarget && !this.targetDelta)\n                return;\n            /**\n             * Lazy-init target data structure\n             */\n            if (!this.target) {\n                this.target = createBox();\n                this.targetWithTransforms = createBox();\n            }\n            /**\n             * If we've got a relative box for this component, resolve it into a target relative to the parent.\n             */\n            if (this.relativeTarget &&\n                this.relativeTargetOrigin &&\n                this.relativeParent &&\n                this.relativeParent.target) {\n                this.forceRelativeParentToResolveTarget();\n                calcRelativeBox(this.target, this.relativeTarget, this.relativeParent.target);\n                /**\n                 * If we've only got a targetDelta, resolve it into a target\n                 */\n            }\n            else if (this.targetDelta) {\n                if (Boolean(this.resumingFrom)) {\n                    // TODO: This is creating a new object every frame\n                    this.target = this.applyTransform(this.layout.layoutBox);\n                }\n                else {\n                    copyBoxInto(this.target, this.layout.layoutBox);\n                }\n                applyBoxDelta(this.target, this.targetDelta);\n            }\n            else {\n                /**\n                 * If no target, use own layout as target\n                 */\n                copyBoxInto(this.target, this.layout.layoutBox);\n            }\n            /**\n             * If we've been told to attempt to resolve a relative target, do so.\n             */\n            if (this.attemptToResolveRelativeTarget) {\n                this.attemptToResolveRelativeTarget = false;\n                const relativeParent = this.getClosestProjectingParent();\n                if (relativeParent &&\n                    Boolean(relativeParent.resumingFrom) ===\n                        Boolean(this.resumingFrom) &&\n                    !relativeParent.options.layoutScroll &&\n                    relativeParent.target &&\n                    this.animationProgress !== 1) {\n                    this.relativeParent = relativeParent;\n                    this.forceRelativeParentToResolveTarget();\n                    this.relativeTarget = createBox();\n                    this.relativeTargetOrigin = createBox();\n                    calcRelativePosition(this.relativeTargetOrigin, this.target, relativeParent.target);\n                    copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);\n                }\n                else {\n                    this.relativeParent = this.relativeTarget = undefined;\n                }\n            }\n            /**\n             * Increase debug counter for resolved target deltas\n             */\n            projectionFrameData.resolvedTargetDeltas++;\n        }\n        getClosestProjectingParent() {\n            if (!this.parent ||\n                hasScale(this.parent.latestValues) ||\n                has2DTranslate(this.parent.latestValues)) {\n                return undefined;\n            }\n            if (this.parent.isProjecting()) {\n                return this.parent;\n            }\n            else {\n                return this.parent.getClosestProjectingParent();\n            }\n        }\n        isProjecting() {\n            return Boolean((this.relativeTarget ||\n                this.targetDelta ||\n                this.options.layoutRoot) &&\n                this.layout);\n        }\n        calcProjection() {\n            var _a;\n            const lead = this.getLead();\n            const isShared = Boolean(this.resumingFrom) || this !== lead;\n            let canSkip = true;\n            /**\n             * If this is a normal layout animation and neither this node nor its nearest projecting\n             * is dirty then we can't skip.\n             */\n            if (this.isProjectionDirty || ((_a = this.parent) === null || _a === void 0 ? void 0 : _a.isProjectionDirty)) {\n                canSkip = false;\n            }\n            /**\n             * If this is a shared layout animation and this node's shared projection is dirty then\n             * we can't skip.\n             */\n            if (isShared &&\n                (this.isSharedProjectionDirty || this.isTransformDirty)) {\n                canSkip = false;\n            }\n            /**\n             * If we have resolved the target this frame we must recalculate the\n             * projection to ensure it visually represents the internal calculations.\n             */\n            if (this.resolvedRelativeTargetAt === frameData.timestamp) {\n                canSkip = false;\n            }\n            if (canSkip)\n                return;\n            const { layout, layoutId } = this.options;\n            /**\n             * If this section of the tree isn't animating we can\n             * delete our target sources for the following frame.\n             */\n            this.isTreeAnimating = Boolean((this.parent && this.parent.isTreeAnimating) ||\n                this.currentAnimation ||\n                this.pendingAnimation);\n            if (!this.isTreeAnimating) {\n                this.targetDelta = this.relativeTarget = undefined;\n            }\n            if (!this.layout || !(layout || layoutId))\n                return;\n            /**\n             * Reset the corrected box with the latest values from box, as we're then going\n             * to perform mutative operations on it.\n             */\n            copyBoxInto(this.layoutCorrected, this.layout.layoutBox);\n            /**\n             * Record previous tree scales before updating.\n             */\n            const prevTreeScaleX = this.treeScale.x;\n            const prevTreeScaleY = this.treeScale.y;\n            /**\n             * Apply all the parent deltas to this box to produce the corrected box. This\n             * is the layout box, as it will appear on screen as a result of the transforms of its parents.\n             */\n            applyTreeDeltas(this.layoutCorrected, this.treeScale, this.path, isShared);\n            /**\n             * If this layer needs to perform scale correction but doesn't have a target,\n             * use the layout as the target.\n             */\n            if (lead.layout &&\n                !lead.target &&\n                (this.treeScale.x !== 1 || this.treeScale.y !== 1)) {\n                lead.target = lead.layout.layoutBox;\n            }\n            const { target } = lead;\n            if (!target) {\n                /**\n                 * If we don't have a target to project into, but we were previously\n                 * projecting, we want to remove the stored transform and schedule\n                 * a render to ensure the elements reflect the removed transform.\n                 */\n                if (this.projectionTransform) {\n                    this.projectionDelta = createDelta();\n                    this.projectionTransform = \"none\";\n                    this.scheduleRender();\n                }\n                return;\n            }\n            if (!this.projectionDelta) {\n                this.projectionDelta = createDelta();\n                this.projectionDeltaWithTransform = createDelta();\n            }\n            const prevProjectionTransform = this.projectionTransform;\n            /**\n             * Update the delta between the corrected box and the target box before user-set transforms were applied.\n             * This will allow us to calculate the corrected borderRadius and boxShadow to compensate\n             * for our layout reprojection, but still allow them to be scaled correctly by the user.\n             * It might be that to simplify this we may want to accept that user-set scale is also corrected\n             * and we wouldn't have to keep and calc both deltas, OR we could support a user setting\n             * to allow people to choose whether these styles are corrected based on just the\n             * layout reprojection or the final bounding box.\n             */\n            calcBoxDelta(this.projectionDelta, this.layoutCorrected, target, this.latestValues);\n            this.projectionTransform = buildProjectionTransform(this.projectionDelta, this.treeScale);\n            if (this.projectionTransform !== prevProjectionTransform ||\n                this.treeScale.x !== prevTreeScaleX ||\n                this.treeScale.y !== prevTreeScaleY) {\n                this.hasProjected = true;\n                this.scheduleRender();\n                this.notifyListeners(\"projectionUpdate\", target);\n            }\n            /**\n             * Increase debug counter for recalculated projections\n             */\n            projectionFrameData.recalculatedProjection++;\n        }\n        hide() {\n            this.isVisible = false;\n            // TODO: Schedule render\n        }\n        show() {\n            this.isVisible = true;\n            // TODO: Schedule render\n        }\n        scheduleRender(notifyAll = true) {\n            this.options.scheduleRender && this.options.scheduleRender();\n            if (notifyAll) {\n                const stack = this.getStack();\n                stack && stack.scheduleRender();\n            }\n            if (this.resumingFrom && !this.resumingFrom.instance) {\n                this.resumingFrom = undefined;\n            }\n        }\n        setAnimationOrigin(delta, hasOnlyRelativeTargetChanged = false) {\n            const snapshot = this.snapshot;\n            const snapshotLatestValues = snapshot\n                ? snapshot.latestValues\n                : {};\n            const mixedValues = { ...this.latestValues };\n            const targetDelta = createDelta();\n            if (!this.relativeParent ||\n                !this.relativeParent.options.layoutRoot) {\n                this.relativeTarget = this.relativeTargetOrigin = undefined;\n            }\n            this.attemptToResolveRelativeTarget = !hasOnlyRelativeTargetChanged;\n            const relativeLayout = createBox();\n            const snapshotSource = snapshot ? snapshot.source : undefined;\n            const layoutSource = this.layout ? this.layout.source : undefined;\n            const isSharedLayoutAnimation = snapshotSource !== layoutSource;\n            const stack = this.getStack();\n            const isOnlyMember = !stack || stack.members.length <= 1;\n            const shouldCrossfadeOpacity = Boolean(isSharedLayoutAnimation &&\n                !isOnlyMember &&\n                this.options.crossfade === true &&\n                !this.path.some(hasOpacityCrossfade));\n            this.animationProgress = 0;\n            let prevRelativeTarget;\n            this.mixTargetDelta = (latest) => {\n                const progress = latest / 1000;\n                mixAxisDelta(targetDelta.x, delta.x, progress);\n                mixAxisDelta(targetDelta.y, delta.y, progress);\n                this.setTargetDelta(targetDelta);\n                if (this.relativeTarget &&\n                    this.relativeTargetOrigin &&\n                    this.layout &&\n                    this.relativeParent &&\n                    this.relativeParent.layout) {\n                    calcRelativePosition(relativeLayout, this.layout.layoutBox, this.relativeParent.layout.layoutBox);\n                    mixBox(this.relativeTarget, this.relativeTargetOrigin, relativeLayout, progress);\n                    /**\n                     * If this is an unchanged relative target we can consider the\n                     * projection not dirty.\n                     */\n                    if (prevRelativeTarget &&\n                        boxEquals(this.relativeTarget, prevRelativeTarget)) {\n                        this.isProjectionDirty = false;\n                    }\n                    if (!prevRelativeTarget)\n                        prevRelativeTarget = createBox();\n                    copyBoxInto(prevRelativeTarget, this.relativeTarget);\n                }\n                if (isSharedLayoutAnimation) {\n                    this.animationValues = mixedValues;\n                    mixValues(mixedValues, snapshotLatestValues, this.latestValues, progress, shouldCrossfadeOpacity, isOnlyMember);\n                }\n                this.root.scheduleUpdateProjection();\n                this.scheduleRender();\n                this.animationProgress = progress;\n            };\n            this.mixTargetDelta(this.options.layoutRoot ? 1000 : 0);\n        }\n        startAnimation(options) {\n            this.notifyListeners(\"animationStart\");\n            this.currentAnimation && this.currentAnimation.stop();\n            if (this.resumingFrom && this.resumingFrom.currentAnimation) {\n                this.resumingFrom.currentAnimation.stop();\n            }\n            if (this.pendingAnimation) {\n                cancelFrame(this.pendingAnimation);\n                this.pendingAnimation = undefined;\n            }\n            /**\n             * Start the animation in the next frame to have a frame with progress 0,\n             * where the target is the same as when the animation started, so we can\n             * calculate the relative positions correctly for instant transitions.\n             */\n            this.pendingAnimation = frame.update(() => {\n                globalProjectionState.hasAnimatedSinceResize = true;\n                this.currentAnimation = animateSingleValue(0, animationTarget, {\n                    ...options,\n                    onUpdate: (latest) => {\n                        this.mixTargetDelta(latest);\n                        options.onUpdate && options.onUpdate(latest);\n                    },\n                    onComplete: () => {\n                        options.onComplete && options.onComplete();\n                        this.completeAnimation();\n                    },\n                });\n                if (this.resumingFrom) {\n                    this.resumingFrom.currentAnimation = this.currentAnimation;\n                }\n                this.pendingAnimation = undefined;\n            });\n        }\n        completeAnimation() {\n            if (this.resumingFrom) {\n                this.resumingFrom.currentAnimation = undefined;\n                this.resumingFrom.preserveOpacity = undefined;\n            }\n            const stack = this.getStack();\n            stack && stack.exitAnimationComplete();\n            this.resumingFrom =\n                this.currentAnimation =\n                    this.animationValues =\n                        undefined;\n            this.notifyListeners(\"animationComplete\");\n        }\n        finishAnimation() {\n            if (this.currentAnimation) {\n                this.mixTargetDelta && this.mixTargetDelta(animationTarget);\n                this.currentAnimation.stop();\n            }\n            this.completeAnimation();\n        }\n        applyTransformsToTarget() {\n            const lead = this.getLead();\n            let { targetWithTransforms, target, layout, latestValues } = lead;\n            if (!targetWithTransforms || !target || !layout)\n                return;\n            /**\n             * If we're only animating position, and this element isn't the lead element,\n             * then instead of projecting into the lead box we instead want to calculate\n             * a new target that aligns the two boxes but maintains the layout shape.\n             */\n            if (this !== lead &&\n                this.layout &&\n                layout &&\n                shouldAnimatePositionOnly(this.options.animationType, this.layout.layoutBox, layout.layoutBox)) {\n                target = this.target || createBox();\n                const xLength = calcLength(this.layout.layoutBox.x);\n                target.x.min = lead.target.x.min;\n                target.x.max = target.x.min + xLength;\n                const yLength = calcLength(this.layout.layoutBox.y);\n                target.y.min = lead.target.y.min;\n                target.y.max = target.y.min + yLength;\n            }\n            copyBoxInto(targetWithTransforms, target);\n            /**\n             * Apply the latest user-set transforms to the targetBox to produce the targetBoxFinal.\n             * This is the final box that we will then project into by calculating a transform delta and\n             * applying it to the corrected box.\n             */\n            transformBox(targetWithTransforms, latestValues);\n            /**\n             * Update the delta between the corrected box and the final target box, after\n             * user-set transforms are applied to it. This will be used by the renderer to\n             * create a transform style that will reproject the element from its layout layout\n             * into the desired bounding box.\n             */\n            calcBoxDelta(this.projectionDeltaWithTransform, this.layoutCorrected, targetWithTransforms, latestValues);\n        }\n        registerSharedNode(layoutId, node) {\n            if (!this.sharedNodes.has(layoutId)) {\n                this.sharedNodes.set(layoutId, new NodeStack());\n            }\n            const stack = this.sharedNodes.get(layoutId);\n            stack.add(node);\n            const config = node.options.initialPromotionConfig;\n            node.promote({\n                transition: config ? config.transition : undefined,\n                preserveFollowOpacity: config && config.shouldPreserveFollowOpacity\n                    ? config.shouldPreserveFollowOpacity(node)\n                    : undefined,\n            });\n        }\n        isLead() {\n            const stack = this.getStack();\n            return stack ? stack.lead === this : true;\n        }\n        getLead() {\n            var _a;\n            const { layoutId } = this.options;\n            return layoutId ? ((_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.lead) || this : this;\n        }\n        getPrevLead() {\n            var _a;\n            const { layoutId } = this.options;\n            return layoutId ? (_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.prevLead : undefined;\n        }\n        getStack() {\n            const { layoutId } = this.options;\n            if (layoutId)\n                return this.root.sharedNodes.get(layoutId);\n        }\n        promote({ needsReset, transition, preserveFollowOpacity, } = {}) {\n            const stack = this.getStack();\n            if (stack)\n                stack.promote(this, preserveFollowOpacity);\n            if (needsReset) {\n                this.projectionDelta = undefined;\n                this.needsReset = true;\n            }\n            if (transition)\n                this.setOptions({ transition });\n        }\n        relegate() {\n            const stack = this.getStack();\n            if (stack) {\n                return stack.relegate(this);\n            }\n            else {\n                return false;\n            }\n        }\n        resetRotation() {\n            const { visualElement } = this.options;\n            if (!visualElement)\n                return;\n            // If there's no detected rotation values, we can early return without a forced render.\n            let hasRotate = false;\n            /**\n             * An unrolled check for rotation values. Most elements don't have any rotation and\n             * skipping the nested loop and new object creation is 50% faster.\n             */\n            const { latestValues } = visualElement;\n            if (latestValues.rotate ||\n                latestValues.rotateX ||\n                latestValues.rotateY ||\n                latestValues.rotateZ) {\n                hasRotate = true;\n            }\n            // If there's no rotation values, we don't need to do any more.\n            if (!hasRotate)\n                return;\n            const resetValues = {};\n            // Check the rotate value of all axes and reset to 0\n            for (let i = 0; i < transformAxes.length; i++) {\n                const key = \"rotate\" + transformAxes[i];\n                // Record the rotation and then temporarily set it to 0\n                if (latestValues[key]) {\n                    resetValues[key] = latestValues[key];\n                    visualElement.setStaticValue(key, 0);\n                }\n            }\n            // Force a render of this element to apply the transform with all rotations\n            // set to 0.\n            visualElement.render();\n            // Put back all the values we reset\n            for (const key in resetValues) {\n                visualElement.setStaticValue(key, resetValues[key]);\n            }\n            // Schedule a render for the next frame. This ensures we won't visually\n            // see the element with the reset rotate value applied.\n            visualElement.scheduleRender();\n        }\n        getProjectionStyles(styleProp = {}) {\n            var _a, _b;\n            // TODO: Return lifecycle-persistent object\n            const styles = {};\n            if (!this.instance || this.isSVG)\n                return styles;\n            if (!this.isVisible) {\n                return { visibility: \"hidden\" };\n            }\n            else {\n                styles.visibility = \"\";\n            }\n            const transformTemplate = this.getTransformTemplate();\n            if (this.needsReset) {\n                this.needsReset = false;\n                styles.opacity = \"\";\n                styles.pointerEvents =\n                    resolveMotionValue(styleProp.pointerEvents) || \"\";\n                styles.transform = transformTemplate\n                    ? transformTemplate(this.latestValues, \"\")\n                    : \"none\";\n                return styles;\n            }\n            const lead = this.getLead();\n            if (!this.projectionDelta || !this.layout || !lead.target) {\n                const emptyStyles = {};\n                if (this.options.layoutId) {\n                    emptyStyles.opacity =\n                        this.latestValues.opacity !== undefined\n                            ? this.latestValues.opacity\n                            : 1;\n                    emptyStyles.pointerEvents =\n                        resolveMotionValue(styleProp.pointerEvents) || \"\";\n                }\n                if (this.hasProjected && !hasTransform(this.latestValues)) {\n                    emptyStyles.transform = transformTemplate\n                        ? transformTemplate({}, \"\")\n                        : \"none\";\n                    this.hasProjected = false;\n                }\n                return emptyStyles;\n            }\n            const valuesToRender = lead.animationValues || lead.latestValues;\n            this.applyTransformsToTarget();\n            styles.transform = buildProjectionTransform(this.projectionDeltaWithTransform, this.treeScale, valuesToRender);\n            if (transformTemplate) {\n                styles.transform = transformTemplate(valuesToRender, styles.transform);\n            }\n            const { x, y } = this.projectionDelta;\n            styles.transformOrigin = `${x.origin * 100}% ${y.origin * 100}% 0`;\n            if (lead.animationValues) {\n                /**\n                 * If the lead component is animating, assign this either the entering/leaving\n                 * opacity\n                 */\n                styles.opacity =\n                    lead === this\n                        ? (_b = (_a = valuesToRender.opacity) !== null && _a !== void 0 ? _a : this.latestValues.opacity) !== null && _b !== void 0 ? _b : 1\n                        : this.preserveOpacity\n                            ? this.latestValues.opacity\n                            : valuesToRender.opacityExit;\n            }\n            else {\n                /**\n                 * Or we're not animating at all, set the lead component to its layout\n                 * opacity and other components to hidden.\n                 */\n                styles.opacity =\n                    lead === this\n                        ? valuesToRender.opacity !== undefined\n                            ? valuesToRender.opacity\n                            : \"\"\n                        : valuesToRender.opacityExit !== undefined\n                            ? valuesToRender.opacityExit\n                            : 0;\n            }\n            /**\n             * Apply scale correction\n             */\n            for (const key in scaleCorrectors) {\n                if (valuesToRender[key] === undefined)\n                    continue;\n                const { correct, applyTo } = scaleCorrectors[key];\n                /**\n                 * Only apply scale correction to the value if we have an\n                 * active projection transform. Otherwise these values become\n                 * vulnerable to distortion if the element changes size without\n                 * a corresponding layout animation.\n                 */\n                const corrected = styles.transform === \"none\"\n                    ? valuesToRender[key]\n                    : correct(valuesToRender[key], lead);\n                if (applyTo) {\n                    const num = applyTo.length;\n                    for (let i = 0; i < num; i++) {\n                        styles[applyTo[i]] = corrected;\n                    }\n                }\n                else {\n                    styles[key] = corrected;\n                }\n            }\n            /**\n             * Disable pointer events on follow components. This is to ensure\n             * that if a follow component covers a lead component it doesn't block\n             * pointer events on the lead.\n             */\n            if (this.options.layoutId) {\n                styles.pointerEvents =\n                    lead === this\n                        ? resolveMotionValue(styleProp.pointerEvents) || \"\"\n                        : \"none\";\n            }\n            return styles;\n        }\n        clearSnapshot() {\n            this.resumeFrom = this.snapshot = undefined;\n        }\n        // Only run on root\n        resetTree() {\n            this.root.nodes.forEach((node) => { var _a; return (_a = node.currentAnimation) === null || _a === void 0 ? void 0 : _a.stop(); });\n            this.root.nodes.forEach(clearMeasurements);\n            this.root.sharedNodes.clear();\n        }\n    };\n}\nfunction updateLayout(node) {\n    node.updateLayout();\n}\nfunction notifyLayoutUpdate(node) {\n    var _a;\n    const snapshot = ((_a = node.resumeFrom) === null || _a === void 0 ? void 0 : _a.snapshot) || node.snapshot;\n    if (node.isLead() &&\n        node.layout &&\n        snapshot &&\n        node.hasListeners(\"didUpdate\")) {\n        const { layoutBox: layout, measuredBox: measuredLayout } = node.layout;\n        const { animationType } = node.options;\n        const isShared = snapshot.source !== node.layout.source;\n        // TODO Maybe we want to also resize the layout snapshot so we don't trigger\n        // animations for instance if layout=\"size\" and an element has only changed position\n        if (animationType === \"size\") {\n            eachAxis((axis) => {\n                const axisSnapshot = isShared\n                    ? snapshot.measuredBox[axis]\n                    : snapshot.layoutBox[axis];\n                const length = calcLength(axisSnapshot);\n                axisSnapshot.min = layout[axis].min;\n                axisSnapshot.max = axisSnapshot.min + length;\n            });\n        }\n        else if (shouldAnimatePositionOnly(animationType, snapshot.layoutBox, layout)) {\n            eachAxis((axis) => {\n                const axisSnapshot = isShared\n                    ? snapshot.measuredBox[axis]\n                    : snapshot.layoutBox[axis];\n                const length = calcLength(layout[axis]);\n                axisSnapshot.max = axisSnapshot.min + length;\n                /**\n                 * Ensure relative target gets resized and rerendererd\n                 */\n                if (node.relativeTarget && !node.currentAnimation) {\n                    node.isProjectionDirty = true;\n                    node.relativeTarget[axis].max =\n                        node.relativeTarget[axis].min + length;\n                }\n            });\n        }\n        const layoutDelta = createDelta();\n        calcBoxDelta(layoutDelta, layout, snapshot.layoutBox);\n        const visualDelta = createDelta();\n        if (isShared) {\n            calcBoxDelta(visualDelta, node.applyTransform(measuredLayout, true), snapshot.measuredBox);\n        }\n        else {\n            calcBoxDelta(visualDelta, layout, snapshot.layoutBox);\n        }\n        const hasLayoutChanged = !isDeltaZero(layoutDelta);\n        let hasRelativeTargetChanged = false;\n        if (!node.resumeFrom) {\n            const relativeParent = node.getClosestProjectingParent();\n            /**\n             * If the relativeParent is itself resuming from a different element then\n             * the relative snapshot is not relavent\n             */\n            if (relativeParent && !relativeParent.resumeFrom) {\n                const { snapshot: parentSnapshot, layout: parentLayout } = relativeParent;\n                if (parentSnapshot && parentLayout) {\n                    const relativeSnapshot = createBox();\n                    calcRelativePosition(relativeSnapshot, snapshot.layoutBox, parentSnapshot.layoutBox);\n                    const relativeLayout = createBox();\n                    calcRelativePosition(relativeLayout, layout, parentLayout.layoutBox);\n                    if (!boxEqualsRounded(relativeSnapshot, relativeLayout)) {\n                        hasRelativeTargetChanged = true;\n                    }\n                    if (relativeParent.options.layoutRoot) {\n                        node.relativeTarget = relativeLayout;\n                        node.relativeTargetOrigin = relativeSnapshot;\n                        node.relativeParent = relativeParent;\n                    }\n                }\n            }\n        }\n        node.notifyListeners(\"didUpdate\", {\n            layout,\n            snapshot,\n            delta: visualDelta,\n            layoutDelta,\n            hasLayoutChanged,\n            hasRelativeTargetChanged,\n        });\n    }\n    else if (node.isLead()) {\n        const { onExitComplete } = node.options;\n        onExitComplete && onExitComplete();\n    }\n    /**\n     * Clearing transition\n     * TODO: Investigate why this transition is being passed in as {type: false } from Framer\n     * and why we need it at all\n     */\n    node.options.transition = undefined;\n}\nfunction propagateDirtyNodes(node) {\n    /**\n     * Increase debug counter for nodes encountered this frame\n     */\n    projectionFrameData.totalNodes++;\n    if (!node.parent)\n        return;\n    /**\n     * If this node isn't projecting, propagate isProjectionDirty. It will have\n     * no performance impact but it will allow the next child that *is* projecting\n     * but *isn't* dirty to just check its parent to see if *any* ancestor needs\n     * correcting.\n     */\n    if (!node.isProjecting()) {\n        node.isProjectionDirty = node.parent.isProjectionDirty;\n    }\n    /**\n     * Propagate isSharedProjectionDirty and isTransformDirty\n     * throughout the whole tree. A future revision can take another look at\n     * this but for safety we still recalcualte shared nodes.\n     */\n    node.isSharedProjectionDirty || (node.isSharedProjectionDirty = Boolean(node.isProjectionDirty ||\n        node.parent.isProjectionDirty ||\n        node.parent.isSharedProjectionDirty));\n    node.isTransformDirty || (node.isTransformDirty = node.parent.isTransformDirty);\n}\nfunction cleanDirtyNodes(node) {\n    node.isProjectionDirty =\n        node.isSharedProjectionDirty =\n            node.isTransformDirty =\n                false;\n}\nfunction clearSnapshot(node) {\n    node.clearSnapshot();\n}\nfunction clearMeasurements(node) {\n    node.clearMeasurements();\n}\nfunction clearIsLayoutDirty(node) {\n    node.isLayoutDirty = false;\n}\nfunction resetTransformStyle(node) {\n    const { visualElement } = node.options;\n    if (visualElement && visualElement.getProps().onBeforeLayoutMeasure) {\n        visualElement.notify(\"BeforeLayoutMeasure\");\n    }\n    node.resetTransform();\n}\nfunction finishAnimation(node) {\n    node.finishAnimation();\n    node.targetDelta = node.relativeTarget = node.target = undefined;\n    node.isProjectionDirty = true;\n}\nfunction resolveTargetDelta(node) {\n    node.resolveTargetDelta();\n}\nfunction calcProjection(node) {\n    node.calcProjection();\n}\nfunction resetRotation(node) {\n    node.resetRotation();\n}\nfunction removeLeadSnapshots(stack) {\n    stack.removeLeadSnapshot();\n}\nfunction mixAxisDelta(output, delta, p) {\n    output.translate = mix(delta.translate, 0, p);\n    output.scale = mix(delta.scale, 1, p);\n    output.origin = delta.origin;\n    output.originPoint = delta.originPoint;\n}\nfunction mixAxis(output, from, to, p) {\n    output.min = mix(from.min, to.min, p);\n    output.max = mix(from.max, to.max, p);\n}\nfunction mixBox(output, from, to, p) {\n    mixAxis(output.x, from.x, to.x, p);\n    mixAxis(output.y, from.y, to.y, p);\n}\nfunction hasOpacityCrossfade(node) {\n    return (node.animationValues && node.animationValues.opacityExit !== undefined);\n}\nconst defaultLayoutTransition = {\n    duration: 0.45,\n    ease: [0.4, 0, 0.1, 1],\n};\nconst userAgentContains = (string) => typeof navigator !== \"undefined\" &&\n    navigator.userAgent.toLowerCase().includes(string);\n/**\n * Measured bounding boxes must be rounded in Safari and\n * left untouched in Chrome, otherwise non-integer layouts within scaled-up elements\n * can appear to jump.\n */\nconst roundPoint = userAgentContains(\"applewebkit/\") && !userAgentContains(\"chrome/\")\n    ? Math.round\n    : noop;\nfunction roundAxis(axis) {\n    // Round to the nearest .5 pixels to support subpixel layouts\n    axis.min = roundPoint(axis.min);\n    axis.max = roundPoint(axis.max);\n}\nfunction roundBox(box) {\n    roundAxis(box.x);\n    roundAxis(box.y);\n}\nfunction shouldAnimatePositionOnly(animationType, snapshot, layout) {\n    return (animationType === \"position\" ||\n        (animationType === \"preserve-aspect\" &&\n            !isNear(aspectRatio(snapshot), aspectRatio(layout), 0.2)));\n}\n\nexport { cleanDirtyNodes, createProjectionNode, mixAxis, mixAxisDelta, mixBox, propagateDirtyNodes };\n","function record(data) {\n    if (window.MotionDebug) {\n        window.MotionDebug.record(data);\n    }\n}\n\nexport { record };\n","function isSVGElement(element) {\n    return element instanceof SVGElement && element.tagName !== \"svg\";\n}\n\nexport { isSVGElement };\n","import { frame, cancelFrame } from '../frameloop/frame.mjs';\n\n/**\n * Timeout defined in ms\n */\nfunction delay(callback, timeout) {\n    const start = performance.now();\n    const checkElapsed = ({ timestamp }) => {\n        const elapsed = timestamp - start;\n        if (elapsed >= timeout) {\n            cancelFrame(checkElapsed);\n            callback(elapsed - timeout);\n        }\n    };\n    frame.read(checkElapsed, true);\n    return () => cancelFrame(checkElapsed);\n}\n\nexport { delay };\n","import { animateMotionValue } from './motion-value.mjs';\nimport { motionValue } from '../../value/index.mjs';\nimport { isMotionValue } from '../../value/utils/is-motion-value.mjs';\n\nfunction animateSingleValue(value, keyframes, options) {\n    const motionValue$1 = isMotionValue(value) ? value : motionValue(value);\n    motionValue$1.start(animateMotionValue(\"\", motionValue$1, keyframes, options));\n    return motionValue$1.animation;\n}\n\nexport { animateSingleValue };\n","import { createProjectionNode } from './create-projection-node.mjs';\nimport { addDomEvent } from '../../events/add-dom-event.mjs';\n\nconst DocumentProjectionNode = createProjectionNode({\n    attachResizeListener: (ref, notify) => addDomEvent(ref, \"resize\", notify),\n    measureScroll: () => ({\n        x: document.documentElement.scrollLeft || document.body.scrollLeft,\n        y: document.documentElement.scrollTop || document.body.scrollTop,\n    }),\n    checkIsScrollRoot: () => true,\n});\n\nexport { DocumentProjectionNode };\n","import { createProjectionNode } from './create-projection-node.mjs';\nimport { DocumentProjectionNode } from './DocumentProjectionNode.mjs';\n\nconst rootProjectionNode = {\n    current: undefined,\n};\nconst HTMLProjectionNode = createProjectionNode({\n    measureScroll: (instance) => ({\n        x: instance.scrollLeft,\n        y: instance.scrollTop,\n    }),\n    defaultParent: () => {\n        if (!rootProjectionNode.current) {\n            const documentNode = new DocumentProjectionNode({});\n            documentNode.mount(window);\n            documentNode.setOptions({ layoutScroll: true });\n            rootProjectionNode.current = documentNode;\n        }\n        return rootProjectionNode.current;\n    },\n    resetTransform: (instance, value) => {\n        instance.style.transform = value !== undefined ? value : \"none\";\n    },\n    checkIsScrollRoot: (instance) => Boolean(window.getComputedStyle(instance).position === \"fixed\"),\n});\n\nexport { HTMLProjectionNode, rootProjectionNode };\n","import { DragGesture } from '../../gestures/drag/index.mjs';\nimport { PanGesture } from '../../gestures/pan/index.mjs';\nimport { MeasureLayout } from './layout/MeasureLayout.mjs';\nimport { HTMLProjectionNode } from '../../projection/node/HTMLProjectionNode.mjs';\n\nconst drag = {\n    pan: {\n        Feature: PanGesture,\n    },\n    drag: {\n        Feature: DragGesture,\n        ProjectionNode: HTMLProjectionNode,\n        MeasureLayout,\n    },\n};\n\nexport { drag };\n","import { Feature } from '../../motion/features/Feature.mjs';\nimport { noop } from '../../utils/noop.mjs';\nimport { VisualElementDragControls } from './VisualElementDragControls.mjs';\n\nclass DragGesture extends Feature {\n    constructor(node) {\n        super(node);\n        this.removeGroupControls = noop;\n        this.removeListeners = noop;\n        this.controls = new VisualElementDragControls(node);\n    }\n    mount() {\n        // If we've been provided a DragControls for manual control over the drag gesture,\n        // subscribe this component to it on mount.\n        const { dragControls } = this.node.getProps();\n        if (dragControls) {\n            this.removeGroupControls = dragControls.subscribe(this.controls);\n        }\n        this.removeListeners = this.controls.addListeners() || noop;\n    }\n    unmount() {\n        this.removeGroupControls();\n        this.removeListeners();\n    }\n}\n\nexport { DragGesture };\n","import { HTMLProjectionNode } from '../../projection/node/HTMLProjectionNode.mjs';\nimport { MeasureLayout } from './layout/MeasureLayout.mjs';\n\nconst layout = {\n    layout: {\n        ProjectionNode: HTMLProjectionNode,\n        MeasureLayout,\n    },\n};\n\nexport { layout };\n","function shallowCompare(next, prev) {\n    if (!Array.isArray(prev))\n        return false;\n    const prevLength = prev.length;\n    if (prevLength !== next.length)\n        return false;\n    for (let i = 0; i < prevLength; i++) {\n        if (prev[i] !== next[i])\n            return false;\n    }\n    return true;\n}\n\nexport { shallowCompare };\n","import { isAnimationControls } from '../../animation/utils/is-animation-controls.mjs';\nimport { isKeyframesTarget } from '../../animation/utils/is-keyframes-target.mjs';\nimport { shallowCompare } from '../../utils/shallow-compare.mjs';\nimport { isVariantLabel } from './is-variant-label.mjs';\nimport { resolveVariant } from './resolve-dynamic-variants.mjs';\nimport { variantPriorityOrder } from './variant-props.mjs';\nimport { animateVisualElement } from '../../animation/interfaces/visual-element.mjs';\n\nconst reversePriorityOrder = [...variantPriorityOrder].reverse();\nconst numAnimationTypes = variantPriorityOrder.length;\nfunction animateList(visualElement) {\n    return (animations) => Promise.all(animations.map(({ animation, options }) => animateVisualElement(visualElement, animation, options)));\n}\nfunction createAnimationState(visualElement) {\n    let animate = animateList(visualElement);\n    const state = createState();\n    let isInitialRender = true;\n    /**\n     * This function will be used to reduce the animation definitions for\n     * each active animation type into an object of resolved values for it.\n     */\n    const buildResolvedTypeValues = (acc, definition) => {\n        const resolved = resolveVariant(visualElement, definition);\n        if (resolved) {\n            const { transition, transitionEnd, ...target } = resolved;\n            acc = { ...acc, ...target, ...transitionEnd };\n        }\n        return acc;\n    };\n    /**\n     * This just allows us to inject mocked animation functions\n     * @internal\n     */\n    function setAnimateFunction(makeAnimator) {\n        animate = makeAnimator(visualElement);\n    }\n    /**\n     * When we receive new props, we need to:\n     * 1. Create a list of protected keys for each type. This is a directory of\n     *    value keys that are currently being \"handled\" by types of a higher priority\n     *    so that whenever an animation is played of a given type, these values are\n     *    protected from being animated.\n     * 2. Determine if an animation type needs animating.\n     * 3. Determine if any values have been removed from a type and figure out\n     *    what to animate those to.\n     */\n    function animateChanges(options, changedActiveType) {\n        const props = visualElement.getProps();\n        const context = visualElement.getVariantContext(true) || {};\n        /**\n         * A list of animations that we'll build into as we iterate through the animation\n         * types. This will get executed at the end of the function.\n         */\n        const animations = [];\n        /**\n         * Keep track of which values have been removed. Then, as we hit lower priority\n         * animation types, we can check if they contain removed values and animate to that.\n         */\n        const removedKeys = new Set();\n        /**\n         * A dictionary of all encountered keys. This is an object to let us build into and\n         * copy it without iteration. Each time we hit an animation type we set its protected\n         * keys - the keys its not allowed to animate - to the latest version of this object.\n         */\n        let encounteredKeys = {};\n        /**\n         * If a variant has been removed at a given index, and this component is controlling\n         * variant animations, we want to ensure lower-priority variants are forced to animate.\n         */\n        let removedVariantIndex = Infinity;\n        /**\n         * Iterate through all animation types in reverse priority order. For each, we want to\n         * detect which values it's handling and whether or not they've changed (and therefore\n         * need to be animated). If any values have been removed, we want to detect those in\n         * lower priority props and flag for animation.\n         */\n        for (let i = 0; i < numAnimationTypes; i++) {\n            const type = reversePriorityOrder[i];\n            const typeState = state[type];\n            const prop = props[type] !== undefined ? props[type] : context[type];\n            const propIsVariant = isVariantLabel(prop);\n            /**\n             * If this type has *just* changed isActive status, set activeDelta\n             * to that status. Otherwise set to null.\n             */\n            const activeDelta = type === changedActiveType ? typeState.isActive : null;\n            if (activeDelta === false)\n                removedVariantIndex = i;\n            /**\n             * If this prop is an inherited variant, rather than been set directly on the\n             * component itself, we want to make sure we allow the parent to trigger animations.\n             *\n             * TODO: Can probably change this to a !isControllingVariants check\n             */\n            let isInherited = prop === context[type] && prop !== props[type] && propIsVariant;\n            /**\n             *\n             */\n            if (isInherited &&\n                isInitialRender &&\n                visualElement.manuallyAnimateOnMount) {\n                isInherited = false;\n            }\n            /**\n             * Set all encountered keys so far as the protected keys for this type. This will\n             * be any key that has been animated or otherwise handled by active, higher-priortiy types.\n             */\n            typeState.protectedKeys = { ...encounteredKeys };\n            // Check if we can skip analysing this prop early\n            if (\n            // If it isn't active and hasn't *just* been set as inactive\n            (!typeState.isActive && activeDelta === null) ||\n                // If we didn't and don't have any defined prop for this animation type\n                (!prop && !typeState.prevProp) ||\n                // Or if the prop doesn't define an animation\n                isAnimationControls(prop) ||\n                typeof prop === \"boolean\") {\n                continue;\n            }\n            /**\n             * As we go look through the values defined on this type, if we detect\n             * a changed value or a value that was removed in a higher priority, we set\n             * this to true and add this prop to the animation list.\n             */\n            const variantDidChange = checkVariantsDidChange(typeState.prevProp, prop);\n            let shouldAnimateType = variantDidChange ||\n                // If we're making this variant active, we want to always make it active\n                (type === changedActiveType &&\n                    typeState.isActive &&\n                    !isInherited &&\n                    propIsVariant) ||\n                // If we removed a higher-priority variant (i is in reverse order)\n                (i > removedVariantIndex && propIsVariant);\n            /**\n             * As animations can be set as variant lists, variants or target objects, we\n             * coerce everything to an array if it isn't one already\n             */\n            const definitionList = Array.isArray(prop) ? prop : [prop];\n            /**\n             * Build an object of all the resolved values. We'll use this in the subsequent\n             * animateChanges calls to determine whether a value has changed.\n             */\n            let resolvedValues = definitionList.reduce(buildResolvedTypeValues, {});\n            if (activeDelta === false)\n                resolvedValues = {};\n            /**\n             * Now we need to loop through all the keys in the prev prop and this prop,\n             * and decide:\n             * 1. If the value has changed, and needs animating\n             * 2. If it has been removed, and needs adding to the removedKeys set\n             * 3. If it has been removed in a higher priority type and needs animating\n             * 4. If it hasn't been removed in a higher priority but hasn't changed, and\n             *    needs adding to the type's protectedKeys list.\n             */\n            const { prevResolvedValues = {} } = typeState;\n            const allKeys = {\n                ...prevResolvedValues,\n                ...resolvedValues,\n            };\n            const markToAnimate = (key) => {\n                shouldAnimateType = true;\n                removedKeys.delete(key);\n                typeState.needsAnimating[key] = true;\n            };\n            for (const key in allKeys) {\n                const next = resolvedValues[key];\n                const prev = prevResolvedValues[key];\n                // If we've already handled this we can just skip ahead\n                if (encounteredKeys.hasOwnProperty(key))\n                    continue;\n                /**\n                 * If the value has changed, we probably want to animate it.\n                 */\n                if (next !== prev) {\n                    /**\n                     * If both values are keyframes, we need to shallow compare them to\n                     * detect whether any value has changed. If it has, we animate it.\n                     */\n                    if (isKeyframesTarget(next) && isKeyframesTarget(prev)) {\n                        if (!shallowCompare(next, prev) || variantDidChange) {\n                            markToAnimate(key);\n                        }\n                        else {\n                            /**\n                             * If it hasn't changed, we want to ensure it doesn't animate by\n                             * adding it to the list of protected keys.\n                             */\n                            typeState.protectedKeys[key] = true;\n                        }\n                    }\n                    else if (next !== undefined) {\n                        // If next is defined and doesn't equal prev, it needs animating\n                        markToAnimate(key);\n                    }\n                    else {\n                        // If it's undefined, it's been removed.\n                        removedKeys.add(key);\n                    }\n                }\n                else if (next !== undefined && removedKeys.has(key)) {\n                    /**\n                     * If next hasn't changed and it isn't undefined, we want to check if it's\n                     * been removed by a higher priority\n                     */\n                    markToAnimate(key);\n                }\n                else {\n                    /**\n                     * If it hasn't changed, we add it to the list of protected values\n                     * to ensure it doesn't get animated.\n                     */\n                    typeState.protectedKeys[key] = true;\n                }\n            }\n            /**\n             * Update the typeState so next time animateChanges is called we can compare the\n             * latest prop and resolvedValues to these.\n             */\n            typeState.prevProp = prop;\n            typeState.prevResolvedValues = resolvedValues;\n            /**\n             *\n             */\n            if (typeState.isActive) {\n                encounteredKeys = { ...encounteredKeys, ...resolvedValues };\n            }\n            if (isInitialRender && visualElement.blockInitialAnimation) {\n                shouldAnimateType = false;\n            }\n            /**\n             * If this is an inherited prop we want to hard-block animations\n             * TODO: Test as this should probably still handle animations triggered\n             * by removed values?\n             */\n            if (shouldAnimateType && !isInherited) {\n                animations.push(...definitionList.map((animation) => ({\n                    animation: animation,\n                    options: { type, ...options },\n                })));\n            }\n        }\n        /**\n         * If there are some removed value that haven't been dealt with,\n         * we need to create a new animation that falls back either to the value\n         * defined in the style prop, or the last read value.\n         */\n        if (removedKeys.size) {\n            const fallbackAnimation = {};\n            removedKeys.forEach((key) => {\n                const fallbackTarget = visualElement.getBaseTarget(key);\n                if (fallbackTarget !== undefined) {\n                    fallbackAnimation[key] = fallbackTarget;\n                }\n            });\n            animations.push({ animation: fallbackAnimation });\n        }\n        let shouldAnimate = Boolean(animations.length);\n        if (isInitialRender &&\n            props.initial === false &&\n            !visualElement.manuallyAnimateOnMount) {\n            shouldAnimate = false;\n        }\n        isInitialRender = false;\n        return shouldAnimate ? animate(animations) : Promise.resolve();\n    }\n    /**\n     * Change whether a certain animation type is active.\n     */\n    function setActive(type, isActive, options) {\n        var _a;\n        // If the active state hasn't changed, we can safely do nothing here\n        if (state[type].isActive === isActive)\n            return Promise.resolve();\n        // Propagate active change to children\n        (_a = visualElement.variantChildren) === null || _a === void 0 ? void 0 : _a.forEach((child) => { var _a; return (_a = child.animationState) === null || _a === void 0 ? void 0 : _a.setActive(type, isActive); });\n        state[type].isActive = isActive;\n        const animations = animateChanges(options, type);\n        for (const key in state) {\n            state[key].protectedKeys = {};\n        }\n        return animations;\n    }\n    return {\n        animateChanges,\n        setActive,\n        setAnimateFunction,\n        getState: () => state,\n    };\n}\nfunction checkVariantsDidChange(prev, next) {\n    if (typeof next === \"string\") {\n        return next !== prev;\n    }\n    else if (Array.isArray(next)) {\n        return !shallowCompare(next, prev);\n    }\n    return false;\n}\nfunction createTypeState(isActive = false) {\n    return {\n        isActive,\n        protectedKeys: {},\n        needsAnimating: {},\n        prevResolvedValues: {},\n    };\n}\nfunction createState() {\n    return {\n        animate: createTypeState(true),\n        whileInView: createTypeState(),\n        whileHover: createTypeState(),\n        whileTap: createTypeState(),\n        whileDrag: createTypeState(),\n        whileFocus: createTypeState(),\n        exit: createTypeState(),\n    };\n}\n\nexport { checkVariantsDidChange, createAnimationState };\n","import { Feature } from '../Feature.mjs';\n\nlet id = 0;\nclass ExitAnimationFeature extends Feature {\n    constructor() {\n        super(...arguments);\n        this.id = id++;\n    }\n    update() {\n        if (!this.node.presenceContext)\n            return;\n        const { isPresent, onExitComplete, custom } = this.node.presenceContext;\n        const { isPresent: prevIsPresent } = this.node.prevPresenceContext || {};\n        if (!this.node.animationState || isPresent === prevIsPresent) {\n            return;\n        }\n        const exitAnimation = this.node.animationState.setActive(\"exit\", !isPresent, { custom: custom !== null && custom !== void 0 ? custom : this.node.getProps().custom });\n        if (onExitComplete && !isPresent) {\n            exitAnimation.then(() => onExitComplete(this.id));\n        }\n    }\n    mount() {\n        const { register } = this.node.presenceContext || {};\n        if (register) {\n            this.unmount = register(this.id);\n        }\n    }\n    unmount() { }\n}\n\nexport { ExitAnimationFeature };\n","import { AnimationFeature } from './animation/index.mjs';\nimport { ExitAnimationFeature } from './animation/exit.mjs';\n\nconst animations = {\n    animation: {\n        Feature: AnimationFeature,\n    },\n    exit: {\n        Feature: ExitAnimationFeature,\n    },\n};\n\nexport { animations };\n","import { isAnimationControls } from '../../../animation/utils/is-animation-controls.mjs';\nimport { createAnimationState } from '../../../render/utils/animation-state.mjs';\nimport { Feature } from '../Feature.mjs';\n\nclass AnimationFeature extends Feature {\n    /**\n     * We dynamically generate the AnimationState manager as it contains a reference\n     * to the underlying animation library. We only want to load that if we load this,\n     * so people can optionally code split it out using the `m` component.\n     */\n    constructor(node) {\n        super(node);\n        node.animationState || (node.animationState = createAnimationState(node));\n    }\n    updateAnimationControlsSubscription() {\n        const { animate } = this.node.getProps();\n        this.unmount();\n        if (isAnimationControls(animate)) {\n            this.unmount = animate.subscribe(this.node);\n        }\n    }\n    /**\n     * Subscribe any provided AnimationControls to the component's VisualElement\n     */\n    mount() {\n        this.updateAnimationControlsSubscription();\n    }\n    update() {\n        const { animate } = this.node.getProps();\n        const { animate: prevAnimate } = this.node.prevProps || {};\n        if (animate !== prevAnimate) {\n            this.updateAnimationControlsSubscription();\n        }\n    }\n    unmount() { }\n}\n\nexport { AnimationFeature };\n","import { addPointerEvent } from '../events/add-pointer-event.mjs';\nimport { pipe } from '../utils/pipe.mjs';\nimport { isDragActive } from './drag/utils/lock.mjs';\nimport { Feature } from '../motion/features/Feature.mjs';\nimport { frame } from '../frameloop/frame.mjs';\n\nfunction addHoverEvent(node, isActive) {\n    const eventName = \"pointer\" + (isActive ? \"enter\" : \"leave\");\n    const callbackName = \"onHover\" + (isActive ? \"Start\" : \"End\");\n    const handleEvent = (event, info) => {\n        if (event.type === \"touch\" || isDragActive())\n            return;\n        const props = node.getProps();\n        if (node.animationState && props.whileHover) {\n            node.animationState.setActive(\"whileHover\", isActive);\n        }\n        if (props[callbackName]) {\n            frame.update(() => props[callbackName](event, info));\n        }\n    };\n    return addPointerEvent(node.current, eventName, handleEvent, {\n        passive: !node.getProps()[callbackName],\n    });\n}\nclass HoverGesture extends Feature {\n    mount() {\n        this.unmount = pipe(addHoverEvent(this.node, true), addHoverEvent(this.node, false));\n    }\n    unmount() { }\n}\n\nexport { HoverGesture };\n","/**\n * Recursively traverse up the tree to check whether the provided child node\n * is the parent or a descendant of it.\n *\n * @param parent - Element to find\n * @param child - Element to test against parent\n */\nconst isNodeOrChild = (parent, child) => {\n    if (!child) {\n        return false;\n    }\n    else if (parent === child) {\n        return true;\n    }\n    else {\n        return isNodeOrChild(parent, child.parentElement);\n    }\n};\n\nexport { isNodeOrChild };\n","import { extractEventInfo } from '../events/event-info.mjs';\nimport { addDomEvent } from '../events/add-dom-event.mjs';\nimport { addPointerEvent } from '../events/add-pointer-event.mjs';\nimport { Feature } from '../motion/features/Feature.mjs';\nimport { pipe } from '../utils/pipe.mjs';\nimport { isDragActive } from './drag/utils/lock.mjs';\nimport { isNodeOrChild } from './utils/is-node-or-child.mjs';\nimport { noop } from '../utils/noop.mjs';\nimport { frame } from '../frameloop/frame.mjs';\n\nfunction fireSyntheticPointerEvent(name, handler) {\n    if (!handler)\n        return;\n    const syntheticPointerEvent = new PointerEvent(\"pointer\" + name);\n    handler(syntheticPointerEvent, extractEventInfo(syntheticPointerEvent));\n}\nclass PressGesture extends Feature {\n    constructor() {\n        super(...arguments);\n        this.removeStartListeners = noop;\n        this.removeEndListeners = noop;\n        this.removeAccessibleListeners = noop;\n        this.startPointerPress = (startEvent, startInfo) => {\n            this.removeEndListeners();\n            if (this.isPressing)\n                return;\n            const props = this.node.getProps();\n            const endPointerPress = (endEvent, endInfo) => {\n                if (!this.checkPressEnd())\n                    return;\n                const { onTap, onTapCancel } = this.node.getProps();\n                frame.update(() => {\n                    /**\n                     * We only count this as a tap gesture if the event.target is the same\n                     * as, or a child of, this component's element\n                     */\n                    !isNodeOrChild(this.node.current, endEvent.target)\n                        ? onTapCancel && onTapCancel(endEvent, endInfo)\n                        : onTap && onTap(endEvent, endInfo);\n                });\n            };\n            const removePointerUpListener = addPointerEvent(window, \"pointerup\", endPointerPress, { passive: !(props.onTap || props[\"onPointerUp\"]) });\n            const removePointerCancelListener = addPointerEvent(window, \"pointercancel\", (cancelEvent, cancelInfo) => this.cancelPress(cancelEvent, cancelInfo), { passive: !(props.onTapCancel || props[\"onPointerCancel\"]) });\n            this.removeEndListeners = pipe(removePointerUpListener, removePointerCancelListener);\n            this.startPress(startEvent, startInfo);\n        };\n        this.startAccessiblePress = () => {\n            const handleKeydown = (keydownEvent) => {\n                if (keydownEvent.key !== \"Enter\" || this.isPressing)\n                    return;\n                const handleKeyup = (keyupEvent) => {\n                    if (keyupEvent.key !== \"Enter\" || !this.checkPressEnd())\n                        return;\n                    fireSyntheticPointerEvent(\"up\", (event, info) => {\n                        const { onTap } = this.node.getProps();\n                        if (onTap) {\n                            frame.update(() => onTap(event, info));\n                        }\n                    });\n                };\n                this.removeEndListeners();\n                this.removeEndListeners = addDomEvent(this.node.current, \"keyup\", handleKeyup);\n                fireSyntheticPointerEvent(\"down\", (event, info) => {\n                    this.startPress(event, info);\n                });\n            };\n            const removeKeydownListener = addDomEvent(this.node.current, \"keydown\", handleKeydown);\n            const handleBlur = () => {\n                if (!this.isPressing)\n                    return;\n                fireSyntheticPointerEvent(\"cancel\", (cancelEvent, cancelInfo) => this.cancelPress(cancelEvent, cancelInfo));\n            };\n            const removeBlurListener = addDomEvent(this.node.current, \"blur\", handleBlur);\n            this.removeAccessibleListeners = pipe(removeKeydownListener, removeBlurListener);\n        };\n    }\n    startPress(event, info) {\n        this.isPressing = true;\n        const { onTapStart, whileTap } = this.node.getProps();\n        /**\n         * Ensure we trigger animations before firing event callback\n         */\n        if (whileTap && this.node.animationState) {\n            this.node.animationState.setActive(\"whileTap\", true);\n        }\n        if (onTapStart) {\n            frame.update(() => onTapStart(event, info));\n        }\n    }\n    checkPressEnd() {\n        this.removeEndListeners();\n        this.isPressing = false;\n        const props = this.node.getProps();\n        if (props.whileTap && this.node.animationState) {\n            this.node.animationState.setActive(\"whileTap\", false);\n        }\n        return !isDragActive();\n    }\n    cancelPress(event, info) {\n        if (!this.checkPressEnd())\n            return;\n        const { onTapCancel } = this.node.getProps();\n        if (onTapCancel) {\n            frame.update(() => onTapCancel(event, info));\n        }\n    }\n    mount() {\n        const props = this.node.getProps();\n        const removePointerListener = addPointerEvent(this.node.current, \"pointerdown\", this.startPointerPress, { passive: !(props.onTapStart || props[\"onPointerStart\"]) });\n        const removeFocusListener = addDomEvent(this.node.current, \"focus\", this.startAccessiblePress);\n        this.removeStartListeners = pipe(removePointerListener, removeFocusListener);\n    }\n    unmount() {\n        this.removeStartListeners();\n        this.removeEndListeners();\n        this.removeAccessibleListeners();\n    }\n}\n\nexport { PressGesture };\n","/**\n * Map an IntersectionHandler callback to an element. We only ever make one handler for one\n * element, so even though these handlers might all be triggered by different\n * observers, we can keep them in the same map.\n */\nconst observerCallbacks = new WeakMap();\n/**\n * Multiple observers can be created for multiple element/document roots. Each with\n * different settings. So here we store dictionaries of observers to each root,\n * using serialised settings (threshold/margin) as lookup keys.\n */\nconst observers = new WeakMap();\nconst fireObserverCallback = (entry) => {\n    const callback = observerCallbacks.get(entry.target);\n    callback && callback(entry);\n};\nconst fireAllObserverCallbacks = (entries) => {\n    entries.forEach(fireObserverCallback);\n};\nfunction initIntersectionObserver({ root, ...options }) {\n    const lookupRoot = root || document;\n    /**\n     * If we don't have an observer lookup map for this root, create one.\n     */\n    if (!observers.has(lookupRoot)) {\n        observers.set(lookupRoot, {});\n    }\n    const rootObservers = observers.get(lookupRoot);\n    const key = JSON.stringify(options);\n    /**\n     * If we don't have an observer for this combination of root and settings,\n     * create one.\n     */\n    if (!rootObservers[key]) {\n        rootObservers[key] = new IntersectionObserver(fireAllObserverCallbacks, { root, ...options });\n    }\n    return rootObservers[key];\n}\nfunction observeIntersection(element, options, callback) {\n    const rootInteresectionObserver = initIntersectionObserver(options);\n    observerCallbacks.set(element, callback);\n    rootInteresectionObserver.observe(element);\n    return () => {\n        observerCallbacks.delete(element);\n        rootInteresectionObserver.unobserve(element);\n    };\n}\n\nexport { observeIntersection };\n","import { Feature } from '../Feature.mjs';\nimport { observeIntersection } from './observers.mjs';\n\nconst thresholdNames = {\n    some: 0,\n    all: 1,\n};\nclass InViewFeature extends Feature {\n    constructor() {\n        super(...arguments);\n        this.hasEnteredView = false;\n        this.isInView = false;\n    }\n    startObserver() {\n        this.unmount();\n        const { viewport = {} } = this.node.getProps();\n        const { root, margin: rootMargin, amount = \"some\", once } = viewport;\n        const options = {\n            root: root ? root.current : undefined,\n            rootMargin,\n            threshold: typeof amount === \"number\" ? amount : thresholdNames[amount],\n        };\n        const onIntersectionUpdate = (entry) => {\n            const { isIntersecting } = entry;\n            /**\n             * If there's been no change in the viewport state, early return.\n             */\n            if (this.isInView === isIntersecting)\n                return;\n            this.isInView = isIntersecting;\n            /**\n             * Handle hasEnteredView. If this is only meant to run once, and\n             * element isn't visible, early return. Otherwise set hasEnteredView to true.\n             */\n            if (once && !isIntersecting && this.hasEnteredView) {\n                return;\n            }\n            else if (isIntersecting) {\n                this.hasEnteredView = true;\n            }\n            if (this.node.animationState) {\n                this.node.animationState.setActive(\"whileInView\", isIntersecting);\n            }\n            /**\n             * Use the latest committed props rather than the ones in scope\n             * when this observer is created\n             */\n            const { onViewportEnter, onViewportLeave } = this.node.getProps();\n            const callback = isIntersecting ? onViewportEnter : onViewportLeave;\n            callback && callback(entry);\n        };\n        return observeIntersection(this.node.current, options, onIntersectionUpdate);\n    }\n    mount() {\n        this.startObserver();\n    }\n    update() {\n        if (typeof IntersectionObserver === \"undefined\")\n            return;\n        const { props, prevProps } = this.node;\n        const hasOptionsChanged = [\"amount\", \"margin\", \"root\"].some(hasViewportOptionChanged(props, prevProps));\n        if (hasOptionsChanged) {\n            this.startObserver();\n        }\n    }\n    unmount() { }\n}\nfunction hasViewportOptionChanged({ viewport = {} }, { viewport: prevViewport = {} } = {}) {\n    return (name) => viewport[name] !== prevViewport[name];\n}\n\nexport { InViewFeature };\n","import { HoverGesture } from '../../gestures/hover.mjs';\nimport { FocusGesture } from '../../gestures/focus.mjs';\nimport { PressGesture } from '../../gestures/press.mjs';\nimport { InViewFeature } from './viewport/index.mjs';\n\nconst gestureAnimations = {\n    inView: {\n        Feature: InViewFeature,\n    },\n    tap: {\n        Feature: PressGesture,\n    },\n    focus: {\n        Feature: FocusGesture,\n    },\n    hover: {\n        Feature: HoverGesture,\n    },\n};\n\nexport { gestureAnimations };\n","import { addDomEvent } from '../events/add-dom-event.mjs';\nimport { Feature } from '../motion/features/Feature.mjs';\nimport { pipe } from '../utils/pipe.mjs';\n\nclass FocusGesture extends Feature {\n    constructor() {\n        super(...arguments);\n        this.isActive = false;\n    }\n    onFocus() {\n        let isFocusVisible = false;\n        /**\n         * If this element doesn't match focus-visible then don't\n         * apply whileHover. But, if matches throws that focus-visible\n         * is not a valid selector then in that browser outline styles will be applied\n         * to the element by default and we want to match that behaviour with whileFocus.\n         */\n        try {\n            isFocusVisible = this.node.current.matches(\":focus-visible\");\n        }\n        catch (e) {\n            isFocusVisible = true;\n        }\n        if (!isFocusVisible || !this.node.animationState)\n            return;\n        this.node.animationState.setActive(\"whileFocus\", true);\n        this.isActive = true;\n    }\n    onBlur() {\n        if (!this.isActive || !this.node.animationState)\n            return;\n        this.node.animationState.setActive(\"whileFocus\", false);\n        this.isActive = false;\n    }\n    mount() {\n        this.unmount = pipe(addDomEvent(this.node.current, \"focus\", () => this.onFocus()), addDomEvent(this.node.current, \"blur\", () => this.onBlur()));\n    }\n    unmount() { }\n}\n\nexport { FocusGesture };\n","import { invariant } from '../../../utils/errors.mjs';\nimport { isNumericalString } from '../../../utils/is-numerical-string.mjs';\nimport { isCSSVariableToken } from './is-css-variable.mjs';\n\n/**\n * Parse Framer's special CSS variable format into a CSS token and a fallback.\n *\n * ```\n * `var(--foo, #fff)` => [`--foo`, '#fff']\n * ```\n *\n * @param current\n */\nconst splitCSSVariableRegex = /var\\((--[a-zA-Z0-9-_]+),? ?([a-zA-Z0-9 ()%#.,-]+)?\\)/;\nfunction parseCSSVariable(current) {\n    const match = splitCSSVariableRegex.exec(current);\n    if (!match)\n        return [,];\n    const [, token, fallback] = match;\n    return [token, fallback];\n}\nconst maxDepth = 4;\nfunction getVariableValue(current, element, depth = 1) {\n    invariant(depth <= maxDepth, `Max CSS variable fallback depth detected in property \"${current}\". This may indicate a circular fallback dependency.`);\n    const [token, fallback] = parseCSSVariable(current);\n    // No CSS variable detected\n    if (!token)\n        return;\n    // Attempt to read this CSS variable off the element\n    const resolved = window.getComputedStyle(element).getPropertyValue(token);\n    if (resolved) {\n        const trimmed = resolved.trim();\n        return isNumericalString(trimmed) ? parseFloat(trimmed) : trimmed;\n    }\n    else if (isCSSVariableToken(fallback)) {\n        // The fallback might itself be a CSS variable, in which case we attempt to resolve it too.\n        return getVariableValue(fallback, element, depth + 1);\n    }\n    else {\n        return fallback;\n    }\n}\n/**\n * Resolve CSS variables from\n *\n * @internal\n */\nfunction resolveCSSVariables(visualElement, { ...target }, transitionEnd) {\n    const element = visualElement.current;\n    if (!(element instanceof Element))\n        return { target, transitionEnd };\n    // If `transitionEnd` isn't `undefined`, clone it. We could clone `target` and `transitionEnd`\n    // only if they change but I think this reads clearer and this isn't a performance-critical path.\n    if (transitionEnd) {\n        transitionEnd = { ...transitionEnd };\n    }\n    // Go through existing `MotionValue`s and ensure any existing CSS variables are resolved\n    visualElement.values.forEach((value) => {\n        const current = value.get();\n        if (!isCSSVariableToken(current))\n            return;\n        const resolved = getVariableValue(current, element);\n        if (resolved)\n            value.set(resolved);\n    });\n    // Cycle through every target property and resolve CSS variables. Currently\n    // we only read single-var properties like `var(--foo)`, not `calc(var(--foo) + 20px)`\n    for (const key in target) {\n        const current = target[key];\n        if (!isCSSVariableToken(current))\n            continue;\n        const resolved = getVariableValue(current, element);\n        if (!resolved)\n            continue;\n        // Clone target if it hasn't already been\n        target[key] = resolved;\n        if (!transitionEnd)\n            transitionEnd = {};\n        // If the user hasn't already set this key on `transitionEnd`, set it to the unresolved\n        // CSS variable. This will ensure that after the animation the component will reflect\n        // changes in the value of the CSS variable.\n        if (transitionEnd[key] === undefined) {\n            transitionEnd[key] = current;\n        }\n    }\n    return { target, transitionEnd };\n}\n\nexport { parseCSSVariable, resolveCSSVariables };\n","import { isKeyframesTarget } from '../../../animation/utils/is-keyframes-target.mjs';\nimport { invariant } from '../../../utils/errors.mjs';\nimport { transformPropOrder } from '../../html/utils/transform.mjs';\nimport { findDimensionValueType } from '../value-types/dimensions.mjs';\nimport { isBrowser } from '../../../utils/is-browser.mjs';\nimport { number } from '../../../value/types/numbers/index.mjs';\nimport { px } from '../../../value/types/numbers/units.mjs';\n\nconst positionalKeys = new Set([\n    \"width\",\n    \"height\",\n    \"top\",\n    \"left\",\n    \"right\",\n    \"bottom\",\n    \"x\",\n    \"y\",\n    \"translateX\",\n    \"translateY\",\n]);\nconst isPositionalKey = (key) => positionalKeys.has(key);\nconst hasPositionalKey = (target) => {\n    return Object.keys(target).some(isPositionalKey);\n};\nconst isNumOrPxType = (v) => v === number || v === px;\nconst getPosFromMatrix = (matrix, pos) => parseFloat(matrix.split(\", \")[pos]);\nconst getTranslateFromMatrix = (pos2, pos3) => (_bbox, { transform }) => {\n    if (transform === \"none\" || !transform)\n        return 0;\n    const matrix3d = transform.match(/^matrix3d\\((.+)\\)$/);\n    if (matrix3d) {\n        return getPosFromMatrix(matrix3d[1], pos3);\n    }\n    else {\n        const matrix = transform.match(/^matrix\\((.+)\\)$/);\n        if (matrix) {\n            return getPosFromMatrix(matrix[1], pos2);\n        }\n        else {\n            return 0;\n        }\n    }\n};\nconst transformKeys = new Set([\"x\", \"y\", \"z\"]);\nconst nonTranslationalTransformKeys = transformPropOrder.filter((key) => !transformKeys.has(key));\nfunction removeNonTranslationalTransform(visualElement) {\n    const removedTransforms = [];\n    nonTranslationalTransformKeys.forEach((key) => {\n        const value = visualElement.getValue(key);\n        if (value !== undefined) {\n            removedTransforms.push([key, value.get()]);\n            value.set(key.startsWith(\"scale\") ? 1 : 0);\n        }\n    });\n    // Apply changes to element before measurement\n    if (removedTransforms.length)\n        visualElement.render();\n    return removedTransforms;\n}\nconst positionalValues = {\n    // Dimensions\n    width: ({ x }, { paddingLeft = \"0\", paddingRight = \"0\" }) => x.max - x.min - parseFloat(paddingLeft) - parseFloat(paddingRight),\n    height: ({ y }, { paddingTop = \"0\", paddingBottom = \"0\" }) => y.max - y.min - parseFloat(paddingTop) - parseFloat(paddingBottom),\n    top: (_bbox, { top }) => parseFloat(top),\n    left: (_bbox, { left }) => parseFloat(left),\n    bottom: ({ y }, { top }) => parseFloat(top) + (y.max - y.min),\n    right: ({ x }, { left }) => parseFloat(left) + (x.max - x.min),\n    // Transform\n    x: getTranslateFromMatrix(4, 13),\n    y: getTranslateFromMatrix(5, 14),\n};\n// Alias translate longform names\npositionalValues.translateX = positionalValues.x;\npositionalValues.translateY = positionalValues.y;\nconst convertChangedValueTypes = (target, visualElement, changedKeys) => {\n    const originBbox = visualElement.measureViewportBox();\n    const element = visualElement.current;\n    const elementComputedStyle = getComputedStyle(element);\n    const { display } = elementComputedStyle;\n    const origin = {};\n    // If the element is currently set to display: \"none\", make it visible before\n    // measuring the target bounding box\n    if (display === \"none\") {\n        visualElement.setStaticValue(\"display\", target.display || \"block\");\n    }\n    /**\n     * Record origins before we render and update styles\n     */\n    changedKeys.forEach((key) => {\n        origin[key] = positionalValues[key](originBbox, elementComputedStyle);\n    });\n    // Apply the latest values (as set in checkAndConvertChangedValueTypes)\n    visualElement.render();\n    const targetBbox = visualElement.measureViewportBox();\n    changedKeys.forEach((key) => {\n        // Restore styles to their **calculated computed style**, not their actual\n        // originally set style. This allows us to animate between equivalent pixel units.\n        const value = visualElement.getValue(key);\n        value && value.jump(origin[key]);\n        target[key] = positionalValues[key](targetBbox, elementComputedStyle);\n    });\n    return target;\n};\nconst checkAndConvertChangedValueTypes = (visualElement, target, origin = {}, transitionEnd = {}) => {\n    target = { ...target };\n    transitionEnd = { ...transitionEnd };\n    const targetPositionalKeys = Object.keys(target).filter(isPositionalKey);\n    // We want to remove any transform values that could affect the element's bounding box before\n    // it's measured. We'll reapply these later.\n    let removedTransformValues = [];\n    let hasAttemptedToRemoveTransformValues = false;\n    const changedValueTypeKeys = [];\n    targetPositionalKeys.forEach((key) => {\n        const value = visualElement.getValue(key);\n        if (!visualElement.hasValue(key))\n            return;\n        let from = origin[key];\n        let fromType = findDimensionValueType(from);\n        const to = target[key];\n        let toType;\n        // TODO: The current implementation of this basically throws an error\n        // if you try and do value conversion via keyframes. There's probably\n        // a way of doing this but the performance implications would need greater scrutiny,\n        // as it'd be doing multiple resize-remeasure operations.\n        if (isKeyframesTarget(to)) {\n            const numKeyframes = to.length;\n            const fromIndex = to[0] === null ? 1 : 0;\n            from = to[fromIndex];\n            fromType = findDimensionValueType(from);\n            for (let i = fromIndex; i < numKeyframes; i++) {\n                /**\n                 * Don't allow wildcard keyframes to be used to detect\n                 * a difference in value types.\n                 */\n                if (to[i] === null)\n                    break;\n                if (!toType) {\n                    toType = findDimensionValueType(to[i]);\n                    invariant(toType === fromType ||\n                        (isNumOrPxType(fromType) && isNumOrPxType(toType)), \"Keyframes must be of the same dimension as the current value\");\n                }\n                else {\n                    invariant(findDimensionValueType(to[i]) === toType, \"All keyframes must be of the same type\");\n                }\n            }\n        }\n        else {\n            toType = findDimensionValueType(to);\n        }\n        if (fromType !== toType) {\n            // If they're both just number or px, convert them both to numbers rather than\n            // relying on resize/remeasure to convert (which is wasteful in this situation)\n            if (isNumOrPxType(fromType) && isNumOrPxType(toType)) {\n                const current = value.get();\n                if (typeof current === \"string\") {\n                    value.set(parseFloat(current));\n                }\n                if (typeof to === \"string\") {\n                    target[key] = parseFloat(to);\n                }\n                else if (Array.isArray(to) && toType === px) {\n                    target[key] = to.map(parseFloat);\n                }\n            }\n            else if ((fromType === null || fromType === void 0 ? void 0 : fromType.transform) &&\n                (toType === null || toType === void 0 ? void 0 : toType.transform) &&\n                (from === 0 || to === 0)) {\n                // If one or the other value is 0, it's safe to coerce it to the\n                // type of the other without measurement\n                if (from === 0) {\n                    value.set(toType.transform(from));\n                }\n                else {\n                    target[key] = fromType.transform(to);\n                }\n            }\n            else {\n                // If we're going to do value conversion via DOM measurements, we first\n                // need to remove non-positional transform values that could affect the bbox measurements.\n                if (!hasAttemptedToRemoveTransformValues) {\n                    removedTransformValues =\n                        removeNonTranslationalTransform(visualElement);\n                    hasAttemptedToRemoveTransformValues = true;\n                }\n                changedValueTypeKeys.push(key);\n                transitionEnd[key] =\n                    transitionEnd[key] !== undefined\n                        ? transitionEnd[key]\n                        : target[key];\n                value.jump(to);\n            }\n        }\n    });\n    if (changedValueTypeKeys.length) {\n        const scrollY = changedValueTypeKeys.indexOf(\"height\") >= 0\n            ? window.pageYOffset\n            : null;\n        const convertedTarget = convertChangedValueTypes(target, visualElement, changedValueTypeKeys);\n        // If we removed transform values, reapply them before the next render\n        if (removedTransformValues.length) {\n            removedTransformValues.forEach(([key, value]) => {\n                visualElement.getValue(key).set(value);\n            });\n        }\n        // Reapply original values\n        visualElement.render();\n        // Restore scroll position\n        if (isBrowser && scrollY !== null) {\n            window.scrollTo({ top: scrollY });\n        }\n        return { target: convertedTarget, transitionEnd };\n    }\n    else {\n        return { target, transitionEnd };\n    }\n};\n/**\n * Convert value types for x/y/width/height/top/left/bottom/right\n *\n * Allows animation between `'auto'` -> `'100%'` or `0` -> `'calc(50% - 10vw)'`\n *\n * @internal\n */\nfunction unitConversion(visualElement, target, origin, transitionEnd) {\n    return hasPositionalKey(target)\n        ? checkAndConvertChangedValueTypes(visualElement, target, origin, transitionEnd)\n        : { target, transitionEnd };\n}\n\nexport { positionalValues, unitConversion };\n","import { resolveCSSVariables } from './css-variables-conversion.mjs';\nimport { unitConversion } from './unit-conversion.mjs';\n\n/**\n * Parse a DOM variant to make it animatable. This involves resolving CSS variables\n * and ensuring animations like \"20%\" => \"calc(50vw)\" are performed in pixels.\n */\nconst parseDomVariant = (visualElement, target, origin, transitionEnd) => {\n    const resolved = resolveCSSVariables(visualElement, target, transitionEnd);\n    target = resolved.target;\n    transitionEnd = resolved.transitionEnd;\n    return unitConversion(visualElement, target, origin, transitionEnd);\n};\n\nexport { parseDomVariant };\n","// Does this device prefer reduced motion? Returns `null` server-side.\nconst prefersReducedMotion = { current: null };\nconst hasReducedMotionListener = { current: false };\n\nexport { hasReducedMotionListener, prefersReducedMotion };\n","const visualElementStore = new WeakMap();\n\nexport { visualElementStore };\n","import { warning, invariant } from '../utils/errors.mjs';\nimport { createBox } from '../projection/geometry/models.mjs';\nimport { isRefObject } from '../utils/is-ref-object.mjs';\nimport { initPrefersReducedMotion } from '../utils/reduced-motion/index.mjs';\nimport { hasReducedMotionListener, prefersReducedMotion } from '../utils/reduced-motion/state.mjs';\nimport { SubscriptionManager } from '../utils/subscription-manager.mjs';\nimport { motionValue } from '../value/index.mjs';\nimport { isWillChangeMotionValue } from '../value/use-will-change/is.mjs';\nimport { isMotionValue } from '../value/utils/is-motion-value.mjs';\nimport { transformProps } from './html/utils/transform.mjs';\nimport { isControllingVariants, isVariantNode } from './utils/is-controlling-variants.mjs';\nimport { isVariantLabel } from './utils/is-variant-label.mjs';\nimport { updateMotionValuesFromProps } from './utils/motion-values.mjs';\nimport { resolveVariantFromProps } from './utils/resolve-variants.mjs';\nimport { warnOnce } from '../utils/warn-once.mjs';\nimport { featureDefinitions } from '../motion/features/definitions.mjs';\nimport { variantProps } from './utils/variant-props.mjs';\nimport { visualElementStore } from './store.mjs';\nimport { frame, cancelFrame } from '../frameloop/frame.mjs';\n\nconst featureNames = Object.keys(featureDefinitions);\nconst numFeatures = featureNames.length;\nconst propEventHandlers = [\n    \"AnimationStart\",\n    \"AnimationComplete\",\n    \"Update\",\n    \"BeforeLayoutMeasure\",\n    \"LayoutMeasure\",\n    \"LayoutAnimationStart\",\n    \"LayoutAnimationComplete\",\n];\nconst numVariantProps = variantProps.length;\n/**\n * A VisualElement is an imperative abstraction around UI elements such as\n * HTMLElement, SVGElement, Three.Object3D etc.\n */\nclass VisualElement {\n    constructor({ parent, props, presenceContext, reducedMotionConfig, visualState, }, options = {}) {\n        /**\n         * A reference to the current underlying Instance, e.g. a HTMLElement\n         * or Three.Mesh etc.\n         */\n        this.current = null;\n        /**\n         * A set containing references to this VisualElement's children.\n         */\n        this.children = new Set();\n        /**\n         * Determine what role this visual element should take in the variant tree.\n         */\n        this.isVariantNode = false;\n        this.isControllingVariants = false;\n        /**\n         * Decides whether this VisualElement should animate in reduced motion\n         * mode.\n         *\n         * TODO: This is currently set on every individual VisualElement but feels\n         * like it could be set globally.\n         */\n        this.shouldReduceMotion = null;\n        /**\n         * A map of all motion values attached to this visual element. Motion\n         * values are source of truth for any given animated value. A motion\n         * value might be provided externally by the component via props.\n         */\n        this.values = new Map();\n        /**\n         * Cleanup functions for active features (hover/tap/exit etc)\n         */\n        this.features = {};\n        /**\n         * A map of every subscription that binds the provided or generated\n         * motion values onChange listeners to this visual element.\n         */\n        this.valueSubscriptions = new Map();\n        /**\n         * A reference to the previously-provided motion values as returned\n         * from scrapeMotionValuesFromProps. We use the keys in here to determine\n         * if any motion values need to be removed after props are updated.\n         */\n        this.prevMotionValues = {};\n        /**\n         * An object containing a SubscriptionManager for each active event.\n         */\n        this.events = {};\n        /**\n         * An object containing an unsubscribe function for each prop event subscription.\n         * For example, every \"Update\" event can have multiple subscribers via\n         * VisualElement.on(), but only one of those can be defined via the onUpdate prop.\n         */\n        this.propEventSubscriptions = {};\n        this.notifyUpdate = () => this.notify(\"Update\", this.latestValues);\n        this.render = () => {\n            if (!this.current)\n                return;\n            this.triggerBuild();\n            this.renderInstance(this.current, this.renderState, this.props.style, this.projection);\n        };\n        this.scheduleRender = () => frame.render(this.render, false, true);\n        const { latestValues, renderState } = visualState;\n        this.latestValues = latestValues;\n        this.baseTarget = { ...latestValues };\n        this.initialValues = props.initial ? { ...latestValues } : {};\n        this.renderState = renderState;\n        this.parent = parent;\n        this.props = props;\n        this.presenceContext = presenceContext;\n        this.depth = parent ? parent.depth + 1 : 0;\n        this.reducedMotionConfig = reducedMotionConfig;\n        this.options = options;\n        this.isControllingVariants = isControllingVariants(props);\n        this.isVariantNode = isVariantNode(props);\n        if (this.isVariantNode) {\n            this.variantChildren = new Set();\n        }\n        this.manuallyAnimateOnMount = Boolean(parent && parent.current);\n        /**\n         * Any motion values that are provided to the element when created\n         * aren't yet bound to the element, as this would technically be impure.\n         * However, we iterate through the motion values and set them to the\n         * initial values for this component.\n         *\n         * TODO: This is impure and we should look at changing this to run on mount.\n         * Doing so will break some tests but this isn't neccessarily a breaking change,\n         * more a reflection of the test.\n         */\n        const { willChange, ...initialMotionValues } = this.scrapeMotionValuesFromProps(props, {});\n        for (const key in initialMotionValues) {\n            const value = initialMotionValues[key];\n            if (latestValues[key] !== undefined && isMotionValue(value)) {\n                value.set(latestValues[key], false);\n                if (isWillChangeMotionValue(willChange)) {\n                    willChange.add(key);\n                }\n            }\n        }\n    }\n    /**\n     * This method takes React props and returns found MotionValues. For example, HTML\n     * MotionValues will be found within the style prop, whereas for Three.js within attribute arrays.\n     *\n     * This isn't an abstract method as it needs calling in the constructor, but it is\n     * intended to be one.\n     */\n    scrapeMotionValuesFromProps(_props, _prevProps) {\n        return {};\n    }\n    mount(instance) {\n        this.current = instance;\n        visualElementStore.set(instance, this);\n        if (this.projection && !this.projection.instance) {\n            this.projection.mount(instance);\n        }\n        if (this.parent && this.isVariantNode && !this.isControllingVariants) {\n            this.removeFromVariantTree = this.parent.addVariantChild(this);\n        }\n        this.values.forEach((value, key) => this.bindToMotionValue(key, value));\n        if (!hasReducedMotionListener.current) {\n            initPrefersReducedMotion();\n        }\n        this.shouldReduceMotion =\n            this.reducedMotionConfig === \"never\"\n                ? false\n                : this.reducedMotionConfig === \"always\"\n                    ? true\n                    : prefersReducedMotion.current;\n        if (process.env.NODE_ENV !== \"production\") {\n            warnOnce(this.shouldReduceMotion !== true, \"You have Reduced Motion enabled on your device. Animations may not appear as expected.\");\n        }\n        if (this.parent)\n            this.parent.children.add(this);\n        this.update(this.props, this.presenceContext);\n    }\n    unmount() {\n        visualElementStore.delete(this.current);\n        this.projection && this.projection.unmount();\n        cancelFrame(this.notifyUpdate);\n        cancelFrame(this.render);\n        this.valueSubscriptions.forEach((remove) => remove());\n        this.removeFromVariantTree && this.removeFromVariantTree();\n        this.parent && this.parent.children.delete(this);\n        for (const key in this.events) {\n            this.events[key].clear();\n        }\n        for (const key in this.features) {\n            this.features[key].unmount();\n        }\n        this.current = null;\n    }\n    bindToMotionValue(key, value) {\n        const valueIsTransform = transformProps.has(key);\n        const removeOnChange = value.on(\"change\", (latestValue) => {\n            this.latestValues[key] = latestValue;\n            this.props.onUpdate &&\n                frame.update(this.notifyUpdate, false, true);\n            if (valueIsTransform && this.projection) {\n                this.projection.isTransformDirty = true;\n            }\n        });\n        const removeOnRenderRequest = value.on(\"renderRequest\", this.scheduleRender);\n        this.valueSubscriptions.set(key, () => {\n            removeOnChange();\n            removeOnRenderRequest();\n        });\n    }\n    sortNodePosition(other) {\n        /**\n         * If these nodes aren't even of the same type we can't compare their depth.\n         */\n        if (!this.current ||\n            !this.sortInstanceNodePosition ||\n            this.type !== other.type) {\n            return 0;\n        }\n        return this.sortInstanceNodePosition(this.current, other.current);\n    }\n    loadFeatures({ children, ...renderedProps }, isStrict, preloadedFeatures, initialLayoutGroupConfig) {\n        let ProjectionNodeConstructor;\n        let MeasureLayout;\n        /**\n         * If we're in development mode, check to make sure we're not rendering a motion component\n         * as a child of LazyMotion, as this will break the file-size benefits of using it.\n         */\n        if (process.env.NODE_ENV !== \"production\" &&\n            preloadedFeatures &&\n            isStrict) {\n            const strictMessage = \"You have rendered a `motion` component within a `LazyMotion` component. This will break tree shaking. Import and render a `m` component instead.\";\n            renderedProps.ignoreStrict\n                ? warning(false, strictMessage)\n                : invariant(false, strictMessage);\n        }\n        for (let i = 0; i < numFeatures; i++) {\n            const name = featureNames[i];\n            const { isEnabled, Feature: FeatureConstructor, ProjectionNode, MeasureLayout: MeasureLayoutComponent, } = featureDefinitions[name];\n            if (ProjectionNode)\n                ProjectionNodeConstructor = ProjectionNode;\n            if (isEnabled(renderedProps)) {\n                if (!this.features[name] && FeatureConstructor) {\n                    this.features[name] = new FeatureConstructor(this);\n                }\n                if (MeasureLayoutComponent) {\n                    MeasureLayout = MeasureLayoutComponent;\n                }\n            }\n        }\n        if (!this.projection && ProjectionNodeConstructor) {\n            this.projection = new ProjectionNodeConstructor(this.latestValues, this.parent && this.parent.projection);\n            const { layoutId, layout, drag, dragConstraints, layoutScroll, layoutRoot, } = renderedProps;\n            this.projection.setOptions({\n                layoutId,\n                layout,\n                alwaysMeasureLayout: Boolean(drag) ||\n                    (dragConstraints && isRefObject(dragConstraints)),\n                visualElement: this,\n                scheduleRender: () => this.scheduleRender(),\n                /**\n                 * TODO: Update options in an effect. This could be tricky as it'll be too late\n                 * to update by the time layout animations run.\n                 * We also need to fix this safeToRemove by linking it up to the one returned by usePresence,\n                 * ensuring it gets called if there's no potential layout animations.\n                 *\n                 */\n                animationType: typeof layout === \"string\" ? layout : \"both\",\n                initialPromotionConfig: initialLayoutGroupConfig,\n                layoutScroll,\n                layoutRoot,\n            });\n        }\n        return MeasureLayout;\n    }\n    updateFeatures() {\n        for (const key in this.features) {\n            const feature = this.features[key];\n            if (feature.isMounted) {\n                feature.update();\n            }\n            else {\n                feature.mount();\n                feature.isMounted = true;\n            }\n        }\n    }\n    triggerBuild() {\n        this.build(this.renderState, this.latestValues, this.options, this.props);\n    }\n    /**\n     * Measure the current viewport box with or without transforms.\n     * Only measures axis-aligned boxes, rotate and skew must be manually\n     * removed with a re-render to work.\n     */\n    measureViewportBox() {\n        return this.current\n            ? this.measureInstanceViewportBox(this.current, this.props)\n            : createBox();\n    }\n    getStaticValue(key) {\n        return this.latestValues[key];\n    }\n    setStaticValue(key, value) {\n        this.latestValues[key] = value;\n    }\n    /**\n     * Make a target animatable by Popmotion. For instance, if we're\n     * trying to animate width from 100px to 100vw we need to measure 100vw\n     * in pixels to determine what we really need to animate to. This is also\n     * pluggable to support Framer's custom value types like Color,\n     * and CSS variables.\n     */\n    makeTargetAnimatable(target, canMutate = true) {\n        return this.makeTargetAnimatableFromInstance(target, this.props, canMutate);\n    }\n    /**\n     * Update the provided props. Ensure any newly-added motion values are\n     * added to our map, old ones removed, and listeners updated.\n     */\n    update(props, presenceContext) {\n        if (props.transformTemplate || this.props.transformTemplate) {\n            this.scheduleRender();\n        }\n        this.prevProps = this.props;\n        this.props = props;\n        this.prevPresenceContext = this.presenceContext;\n        this.presenceContext = presenceContext;\n        /**\n         * Update prop event handlers ie onAnimationStart, onAnimationComplete\n         */\n        for (let i = 0; i < propEventHandlers.length; i++) {\n            const key = propEventHandlers[i];\n            if (this.propEventSubscriptions[key]) {\n                this.propEventSubscriptions[key]();\n                delete this.propEventSubscriptions[key];\n            }\n            const listener = props[\"on\" + key];\n            if (listener) {\n                this.propEventSubscriptions[key] = this.on(key, listener);\n            }\n        }\n        this.prevMotionValues = updateMotionValuesFromProps(this, this.scrapeMotionValuesFromProps(props, this.prevProps), this.prevMotionValues);\n        if (this.handleChildMotionValue) {\n            this.handleChildMotionValue();\n        }\n    }\n    getProps() {\n        return this.props;\n    }\n    /**\n     * Returns the variant definition with a given name.\n     */\n    getVariant(name) {\n        return this.props.variants ? this.props.variants[name] : undefined;\n    }\n    /**\n     * Returns the defined default transition on this component.\n     */\n    getDefaultTransition() {\n        return this.props.transition;\n    }\n    getTransformPagePoint() {\n        return this.props.transformPagePoint;\n    }\n    getClosestVariantNode() {\n        return this.isVariantNode\n            ? this\n            : this.parent\n                ? this.parent.getClosestVariantNode()\n                : undefined;\n    }\n    getVariantContext(startAtParent = false) {\n        if (startAtParent) {\n            return this.parent ? this.parent.getVariantContext() : undefined;\n        }\n        if (!this.isControllingVariants) {\n            const context = this.parent\n                ? this.parent.getVariantContext() || {}\n                : {};\n            if (this.props.initial !== undefined) {\n                context.initial = this.props.initial;\n            }\n            return context;\n        }\n        const context = {};\n        for (let i = 0; i < numVariantProps; i++) {\n            const name = variantProps[i];\n            const prop = this.props[name];\n            if (isVariantLabel(prop) || prop === false) {\n                context[name] = prop;\n            }\n        }\n        return context;\n    }\n    /**\n     * Add a child visual element to our set of children.\n     */\n    addVariantChild(child) {\n        const closestVariantNode = this.getClosestVariantNode();\n        if (closestVariantNode) {\n            closestVariantNode.variantChildren &&\n                closestVariantNode.variantChildren.add(child);\n            return () => closestVariantNode.variantChildren.delete(child);\n        }\n    }\n    /**\n     * Add a motion value and bind it to this visual element.\n     */\n    addValue(key, value) {\n        // Remove existing value if it exists\n        if (value !== this.values.get(key)) {\n            this.removeValue(key);\n            this.bindToMotionValue(key, value);\n        }\n        this.values.set(key, value);\n        this.latestValues[key] = value.get();\n    }\n    /**\n     * Remove a motion value and unbind any active subscriptions.\n     */\n    removeValue(key) {\n        this.values.delete(key);\n        const unsubscribe = this.valueSubscriptions.get(key);\n        if (unsubscribe) {\n            unsubscribe();\n            this.valueSubscriptions.delete(key);\n        }\n        delete this.latestValues[key];\n        this.removeValueFromRenderState(key, this.renderState);\n    }\n    /**\n     * Check whether we have a motion value for this key\n     */\n    hasValue(key) {\n        return this.values.has(key);\n    }\n    getValue(key, defaultValue) {\n        if (this.props.values && this.props.values[key]) {\n            return this.props.values[key];\n        }\n        let value = this.values.get(key);\n        if (value === undefined && defaultValue !== undefined) {\n            value = motionValue(defaultValue, { owner: this });\n            this.addValue(key, value);\n        }\n        return value;\n    }\n    /**\n     * If we're trying to animate to a previously unencountered value,\n     * we need to check for it in our state and as a last resort read it\n     * directly from the instance (which might have performance implications).\n     */\n    readValue(key) {\n        var _a;\n        return this.latestValues[key] !== undefined || !this.current\n            ? this.latestValues[key]\n            : (_a = this.getBaseTargetFromProps(this.props, key)) !== null && _a !== void 0 ? _a : this.readValueFromInstance(this.current, key, this.options);\n    }\n    /**\n     * Set the base target to later animate back to. This is currently\n     * only hydrated on creation and when we first read a value.\n     */\n    setBaseTarget(key, value) {\n        this.baseTarget[key] = value;\n    }\n    /**\n     * Find the base target for a value thats been removed from all animation\n     * props.\n     */\n    getBaseTarget(key) {\n        var _a;\n        const { initial } = this.props;\n        const valueFromInitial = typeof initial === \"string\" || typeof initial === \"object\"\n            ? (_a = resolveVariantFromProps(this.props, initial)) === null || _a === void 0 ? void 0 : _a[key]\n            : undefined;\n        /**\n         * If this value still exists in the current initial variant, read that.\n         */\n        if (initial && valueFromInitial !== undefined) {\n            return valueFromInitial;\n        }\n        /**\n         * Alternatively, if this VisualElement config has defined a getBaseTarget\n         * so we can read the value from an alternative source, try that.\n         */\n        const target = this.getBaseTargetFromProps(this.props, key);\n        if (target !== undefined && !isMotionValue(target))\n            return target;\n        /**\n         * If the value was initially defined on initial, but it doesn't any more,\n         * return undefined. Otherwise return the value as initially read from the DOM.\n         */\n        return this.initialValues[key] !== undefined &&\n            valueFromInitial === undefined\n            ? undefined\n            : this.baseTarget[key];\n    }\n    on(eventName, callback) {\n        if (!this.events[eventName]) {\n            this.events[eventName] = new SubscriptionManager();\n        }\n        return this.events[eventName].add(callback);\n    }\n    notify(eventName, ...args) {\n        if (this.events[eventName]) {\n            this.events[eventName].notify(...args);\n        }\n    }\n}\n\nexport { VisualElement };\n","import { isBrowser } from '../is-browser.mjs';\nimport { hasReducedMotionListener, prefersReducedMotion } from './state.mjs';\n\nfunction initPrefersReducedMotion() {\n    hasReducedMotionListener.current = true;\n    if (!isBrowser)\n        return;\n    if (window.matchMedia) {\n        const motionMediaQuery = window.matchMedia(\"(prefers-reduced-motion)\");\n        const setReducedMotionPreferences = () => (prefersReducedMotion.current = motionMediaQuery.matches);\n        motionMediaQuery.addListener(setReducedMotionPreferences);\n        setReducedMotionPreferences();\n    }\n    else {\n        prefersReducedMotion.current = false;\n    }\n}\n\nexport { initPrefersReducedMotion };\n","import { isWillChangeMotionValue } from '../../value/use-will-change/is.mjs';\nimport { warnOnce } from '../../utils/warn-once.mjs';\nimport { motionValue } from '../../value/index.mjs';\nimport { isMotionValue } from '../../value/utils/is-motion-value.mjs';\n\nfunction updateMotionValuesFromProps(element, next, prev) {\n    const { willChange } = next;\n    for (const key in next) {\n        const nextValue = next[key];\n        const prevValue = prev[key];\n        if (isMotionValue(nextValue)) {\n            /**\n             * If this is a motion value found in props or style, we want to add it\n             * to our visual element's motion value map.\n             */\n            element.addValue(key, nextValue);\n            if (isWillChangeMotionValue(willChange)) {\n                willChange.add(key);\n            }\n            /**\n             * Check the version of the incoming motion value with this version\n             * and warn against mismatches.\n             */\n            if (process.env.NODE_ENV === \"development\") {\n                warnOnce(nextValue.version === \"10.16.4\", `Attempting to mix Framer Motion versions ${nextValue.version} with 10.16.4 may not work as expected.`);\n            }\n        }\n        else if (isMotionValue(prevValue)) {\n            /**\n             * If we're swapping from a motion value to a static value,\n             * create a new motion value from that\n             */\n            element.addValue(key, motionValue(nextValue, { owner: element }));\n            if (isWillChangeMotionValue(willChange)) {\n                willChange.remove(key);\n            }\n        }\n        else if (prevValue !== nextValue) {\n            /**\n             * If this is a flat value that has changed, update the motion value\n             * or create one if it doesn't exist. We only want to do this if we're\n             * not handling the value with our animation state.\n             */\n            if (element.hasValue(key)) {\n                const existingValue = element.getValue(key);\n                // TODO: Only update values that aren't being animated or even looked at\n                !existingValue.hasAnimated && existingValue.set(nextValue);\n            }\n            else {\n                const latestValue = element.getStaticValue(key);\n                element.addValue(key, motionValue(latestValue !== undefined ? latestValue : nextValue, { owner: element }));\n            }\n        }\n    }\n    // Handle removed values\n    for (const key in prev) {\n        if (next[key] === undefined)\n            element.removeValue(key);\n    }\n    return next;\n}\n\nexport { updateMotionValuesFromProps };\n","import { getOrigin, checkTargetForNewValues } from '../utils/setters.mjs';\nimport { parseDomVariant } from './utils/parse-dom-variant.mjs';\nimport { VisualElement } from '../VisualElement.mjs';\n\nclass DOMVisualElement extends VisualElement {\n    sortInstanceNodePosition(a, b) {\n        /**\n         * compareDocumentPosition returns a bitmask, by using the bitwise &\n         * we're returning true if 2 in that bitmask is set to true. 2 is set\n         * to true if b preceeds a.\n         */\n        return a.compareDocumentPosition(b) & 2 ? 1 : -1;\n    }\n    getBaseTargetFromProps(props, key) {\n        return props.style ? props.style[key] : undefined;\n    }\n    removeValueFromRenderState(key, { vars, style }) {\n        delete vars[key];\n        delete style[key];\n    }\n    makeTargetAnimatableFromInstance({ transition, transitionEnd, ...target }, { transformValues }, isMounted) {\n        let origin = getOrigin(target, transition || {}, this);\n        /**\n         * If Framer has provided a function to convert `Color` etc value types, convert them\n         */\n        if (transformValues) {\n            if (transitionEnd)\n                transitionEnd = transformValues(transitionEnd);\n            if (target)\n                target = transformValues(target);\n            if (origin)\n                origin = transformValues(origin);\n        }\n        if (isMounted) {\n            checkTargetForNewValues(this, target, origin);\n            const parsed = parseDomVariant(this, target, origin, transitionEnd);\n            transitionEnd = parsed.transitionEnd;\n            target = parsed.target;\n        }\n        return {\n            transition,\n            transitionEnd,\n            ...target,\n        };\n    }\n}\n\nexport { DOMVisualElement };\n","import { buildHTMLStyles } from './utils/build-styles.mjs';\nimport { isCSSVariableName } from '../dom/utils/is-css-variable.mjs';\nimport { transformProps } from './utils/transform.mjs';\nimport { scrapeMotionValuesFromProps } from './utils/scrape-motion-values.mjs';\nimport { renderHTML } from './utils/render.mjs';\nimport { getDefaultValueType } from '../dom/value-types/defaults.mjs';\nimport { measureViewportBox } from '../../projection/utils/measure.mjs';\nimport { DOMVisualElement } from '../dom/DOMVisualElement.mjs';\nimport { isMotionValue } from '../../value/utils/is-motion-value.mjs';\n\nfunction getComputedStyle(element) {\n    return window.getComputedStyle(element);\n}\nclass HTMLVisualElement extends DOMVisualElement {\n    readValueFromInstance(instance, key) {\n        if (transformProps.has(key)) {\n            const defaultType = getDefaultValueType(key);\n            return defaultType ? defaultType.default || 0 : 0;\n        }\n        else {\n            const computedStyle = getComputedStyle(instance);\n            const value = (isCSSVariableName(key)\n                ? computedStyle.getPropertyValue(key)\n                : computedStyle[key]) || 0;\n            return typeof value === \"string\" ? value.trim() : value;\n        }\n    }\n    measureInstanceViewportBox(instance, { transformPagePoint }) {\n        return measureViewportBox(instance, transformPagePoint);\n    }\n    build(renderState, latestValues, options, props) {\n        buildHTMLStyles(renderState, latestValues, options, props.transformTemplate);\n    }\n    scrapeMotionValuesFromProps(props, prevProps) {\n        return scrapeMotionValuesFromProps(props, prevProps);\n    }\n    handleChildMotionValue() {\n        if (this.childSubscription) {\n            this.childSubscription();\n            delete this.childSubscription;\n        }\n        const { children } = this.props;\n        if (isMotionValue(children)) {\n            this.childSubscription = children.on(\"change\", (latest) => {\n                if (this.current)\n                    this.current.textContent = `${latest}`;\n            });\n        }\n    }\n    renderInstance(instance, renderState, styleProp, projection) {\n        renderHTML(instance, renderState, styleProp, projection);\n    }\n}\n\nexport { HTMLVisualElement, getComputedStyle };\n","import { scrapeMotionValuesFromProps } from './utils/scrape-motion-values.mjs';\nimport { DOMVisualElement } from '../dom/DOMVisualElement.mjs';\nimport { buildSVGAttrs } from './utils/build-attrs.mjs';\nimport { camelToDash } from '../dom/utils/camel-to-dash.mjs';\nimport { camelCaseAttributes } from './utils/camel-case-attrs.mjs';\nimport { transformProps } from '../html/utils/transform.mjs';\nimport { renderSVG } from './utils/render.mjs';\nimport { getDefaultValueType } from '../dom/value-types/defaults.mjs';\nimport { createBox } from '../../projection/geometry/models.mjs';\nimport { isSVGTag } from './utils/is-svg-tag.mjs';\n\nclass SVGVisualElement extends DOMVisualElement {\n    constructor() {\n        super(...arguments);\n        this.isSVGTag = false;\n    }\n    getBaseTargetFromProps(props, key) {\n        return props[key];\n    }\n    readValueFromInstance(instance, key) {\n        if (transformProps.has(key)) {\n            const defaultType = getDefaultValueType(key);\n            return defaultType ? defaultType.default || 0 : 0;\n        }\n        key = !camelCaseAttributes.has(key) ? camelToDash(key) : key;\n        return instance.getAttribute(key);\n    }\n    measureInstanceViewportBox() {\n        return createBox();\n    }\n    scrapeMotionValuesFromProps(props, prevProps) {\n        return scrapeMotionValuesFromProps(props, prevProps);\n    }\n    build(renderState, latestValues, options, props) {\n        buildSVGAttrs(renderState, latestValues, options, this.isSVGTag, props.transformTemplate);\n    }\n    renderInstance(instance, renderState, styleProp, projection) {\n        renderSVG(instance, renderState, styleProp, projection);\n    }\n    mount(instance) {\n        this.isSVGTag = isSVGTag(instance.tagName);\n        super.mount(instance);\n    }\n}\n\nexport { SVGVisualElement };\n","import { HTMLVisualElement } from '../html/HTMLVisualElement.mjs';\nimport { SVGVisualElement } from '../svg/SVGVisualElement.mjs';\nimport { isSVGComponent } from './utils/is-svg-component.mjs';\n\nconst createDomVisualElement = (Component, options) => {\n    return isSVGComponent(Component)\n        ? new SVGVisualElement(options, { enableHardwareAcceleration: false })\n        : new HTMLVisualElement(options, { enableHardwareAcceleration: true });\n};\n\nexport { createDomVisualElement };\n","import { drag } from '../../motion/features/drag.mjs';\nimport { layout } from '../../motion/features/layout.mjs';\nimport { domAnimation } from './features-animation.mjs';\n\n/**\n * @public\n */\nconst domMax = {\n    ...domAnimation,\n    ...drag,\n    ...layout,\n};\n\nexport { domMax };\n","import { animations } from '../../motion/features/animations.mjs';\nimport { gestureAnimations } from '../../motion/features/gestures.mjs';\nimport { createDomVisualElement } from './create-visual-element.mjs';\n\n/**\n * @public\n */\nconst domAnimation = {\n    renderer: createDomVisualElement,\n    ...animations,\n    ...gestureAnimations,\n};\n\nexport { domAnimation };\n"],"names":["Feature","constructor","node","this","isMounted","update","isPrimaryPointer","event","pointerType","button","isPrimary","extractEventInfo","pointType","arguments","length","undefined","point","x","y","addPointerInfo","handler","addDomEvent","target","eventName","options","passive","addEventListener","removeEventListener","addPointerEvent","distance","a","b","Math","abs","PanSession","handlers","transformPagePoint","startEvent","lastMoveEvent","lastMoveEventInfo","updatePoint","info","getPanInfo","history","isPanStarted","isDistancePastThreshold","xDelta","yDelta","sqrt","distance2D","offset","timestamp","frameData","push","onStart","onMove","handlePointerMove","transformPoint","frame","handlePointerUp","end","onEnd","onSessionEnd","panInfo","type","initialInfo","onSessionStart","removeListeners","pipe","window","updateHandlers","cancelFrame","subtractPoint","_ref","delta","lastDevicePoint","startDevicePoint","velocity","getVelocity","timeDelta","i","timestampedPoint","lastPoint","secondsToMilliseconds","time","millisecondsToSeconds","currentVelocity","Infinity","createLock","name","lock","openLock","globalHorizontalLock","globalVerticalLock","getGlobalLock","drag","openHorizontal","openVertical","isDragActive","openGestureLock","calcLength","axis","max","min","isNear","value","maxDistance","calcAxisDelta","source","origin","originPoint","mix","scale","isNaN","translate","calcBoxDelta","originX","originY","calcRelativeAxis","relative","parent","calcRelativeAxisPosition","layout","calcRelativePosition","calcRelativeAxisConstraints","calcViewportAxisConstraints","layoutAxis","constraintsAxis","defaultElastic","resolveAxisElastic","dragElastic","minLabel","maxLabel","resolvePointElastic","label","createDelta","createBox","eachAxis","callback","convertBoundingBoxToBox","top","left","right","bottom","isIdentityScale","hasScale","scaleX","scaleY","hasTransform","values","has2DTranslate","z","rotate","rotateX","rotateY","is2DTranslate","scalePoint","applyPointDelta","boxScale","applyAxisDelta","applyBoxDelta","box","snapToDefault","Number","isInteger","translateAxis","transformAxis","transforms","_ref2","key","scaleKey","originKey","axisOrigin","xKeys","yKeys","transformBox","transform","measureViewportBox","instance","topLeft","bottomRight","transformBoxPoints","getBoundingClientRect","elementDragControls","WeakMap","VisualElementDragControls","visualElement","openGlobalLock","isDragging","currentDirection","constraints","hasMutatedConstraints","elastic","start","originEvent","snapToCursor","presenceContext","isPresent","panSession","stopAnimation","dragPropagation","onDragStart","getProps","resolveConstraints","projection","isAnimationBlocked","current","getAxisMotionValue","get","percent","test","measuredAxis","layoutBox","parseFloat","animationState","setActive","dragDirectionLock","onDirectionLock","onDrag","lockThreshold","direction","getCurrentDirection","updateAxis","render","stop","getTransformPagePoint","cancel","startAnimation","onDragEnd","_point","shouldDrag","axisValue","next","applyConstraints","set","dragConstraints","prevConstraints","isRefObject","resolveRefConstraints","calcRelativeConstraints","resolveDragElastic","relativeConstraints","rebaseAxisConstraints","onMeasureDragConstraints","constraintsElement","invariant","constraintsBox","element","rootProjectionNode","viewportBox","scroll","measurePageBox","root","measuredConstraints","calcViewportConstraints","userConstraints","convertBoxToBoundingBox","dragMomentum","dragTransition","dragSnapToOrigin","onDragTransitionEnd","momentumAnimations","transition","bounceStiffness","bounceDamping","inertia","timeConstant","restDelta","restSpeed","startAxisValueAnimation","Promise","all","then","animateMotionValue","dragKey","toUpperCase","props","externalMotionValue","getValue","initial","scalePositionWithinConstraints","boxProgress","latest","sourceLength","targetLength","progress","clamp","calcOrigin","transformTemplate","style","updateScroll","updateLayout","addListeners","stopPointerListener","dragListener","measureDragConstraints","stopMeasureLayoutListener","stopResizeListener","stopLayoutUpdateListener","hasLayoutChanged","motionValue","asyncHandler","globalProjectionState","hasAnimatedSinceResize","hasEverUpdated","pixelsToPercent","pixels","correctBorderRadius","correct","px","correctBoxShadow","treeScale","projectionDelta","original","shadow","complex","parse","template","createTransformer","xScale","yScale","averageScale","MeasureLayoutWithContext","React__default","componentDidMount","layoutGroup","switchLayoutGroup","layoutId","addScaleCorrector","defaultScaleCorrectors","group","add","register","didUpdate","safeToRemove","setOptions","onExitComplete","getSnapshotBeforeUpdate","prevProps","layoutDependency","willUpdate","promote","relegate","postRender","stack","getStack","members","componentDidUpdate","queueMicrotask","currentAnimation","isLead","componentWillUnmount","promoteContext","scheduleCheckAfterUnmount","remove","deregister","MeasureLayout","context","useContext","PresenceContext","id","useId","useEffect","usePresence","LayoutGroupContext","SwitchLayoutGroupContext","borderRadius","applyTo","borderTopLeftRadius","borderTopRightRadius","borderBottomLeftRadius","borderBottomRightRadius","boxShadow","borders","numBorders","asNumber","isPx","getRadius","radiusName","easeCrossfadeIn","compress","circOut","easeCrossfadeOut","noop","easing","p","copyAxisInto","originAxis","copyBoxInto","originBox","removePointDelta","removeAxisTransforms","sourceAxis","removeAxisDelta","removeBoxTransforms","sourceBox","isAxisDeltaZero","isDeltaZero","boxEqualsRounded","round","aspectRatio","NodeStack","addUniqueItem","scheduleRender","removeItem","prevLead","lead","indexOfNode","findIndex","member","preserveFollowOpacity","show","resumeFrom","preserveOpacity","snapshot","latestValues","animationValues","isUpdating","isLayoutDirty","crossfade","hide","exitAnimationComplete","forEach","resumingFrom","removeLeadSnapshot","buildProjectionTransform","latestTransform","xTranslate","yTranslate","elementScaleX","elementScaleY","compareByDepth","depth","FlatTree","children","isDirty","child","sort","transformAxes","projectionFrameData","totalNodes","resolvedTargetDeltas","recalculatedProjection","createProjectionNode","attachResizeListener","defaultParent","measureScroll","checkIsScrollRoot","resetTransform","animationId","Set","isTreeAnimating","isProjectionDirty","isSharedProjectionDirty","isTransformDirty","updateManuallyBlocked","updateBlockedByResize","isSVG","needsReset","shouldResetTransform","eventHandlers","Map","hasTreeAnimated","updateScheduled","checkUpdateFailed","clearAllSnapshots","updateProjection","data","nodes","propagateDirtyNodes","resolveTargetDelta","calcProjection","cleanDirtyNodes","MotionDebug","record","hasProjected","isVisible","animationProgress","sharedNodes","path","has","SubscriptionManager","notifyListeners","subscriptionManager","_len","args","Array","_key","notify","hasListeners","mount","SVGElement","tagName","cancelDelay","resizeUnblockUpdate","timeout","performance","now","checkElapsed","elapsed","read","delay","finishAnimation","registerSharedNode","animate","hasRelativeTargetChanged","newLayout","isTreeAnimationBlocked","relativeTarget","layoutTransition","getDefaultTransition","defaultLayoutTransition","onLayoutAnimationStart","onLayoutAnimationComplete","targetChanged","targetLayout","hasOnlyRelativeTargetChanged","layoutRoot","setAnimationOrigin","animationOptions","getValueTransition","onPlay","onComplete","shouldReduceMotion","unmount","delete","blockUpdate","unblockUpdate","isUpdateBlocked","startUpdate","resetRotation","getTransformTemplate","shouldNotifyListeners","prevTransformTemplateValue","updateSnapshot","clearMeasurements","clearIsLayoutDirty","resetTransformStyle","notifyLayoutUpdate","isProcessing","steps","process","preRender","clearSnapshot","removeLeadSnapshots","scheduleUpdateProjection","measure","alwaysMeasureLayout","prevLayout","layoutCorrected","phase","needsMeasurement","Boolean","layoutScroll","isRoot","isResetRequested","hasProjection","transformTemplateValue","transformTemplateHasChanged","removeTransform","pageBox","removeElementScroll","roundAxis","measuredBox","boxWithoutScroll","rootScroll","applyTransform","transformOnly","withTransforms","boxWithoutTransform","setTargetDelta","targetDelta","forceRelativeParentToResolveTarget","relativeParent","resolvedRelativeTargetAt","forceRecalculation","_a","getLead","isShared","attemptToResolveRelativeTarget","getClosestProjectingParent","relativeTargetOrigin","targetWithTransforms","isProjecting","canSkip","pendingAnimation","prevTreeScaleX","prevTreeScaleY","treePath","isSharedTransition","treeLength","display","applyTreeDeltas","projectionTransform","projectionDeltaWithTransform","prevProjectionTransform","notifyAll","snapshotLatestValues","mixedValues","relativeLayout","isSharedLayoutAnimation","isOnlyMember","shouldCrossfadeOpacity","some","hasOpacityCrossfade","prevRelativeTarget","mixTargetDelta","output","from","to","mixAxisDelta","mixAxis","follow","opacity","opacityExit","borderLabel","followRadius","leadRadius","mixValues","keyframes","motionValue$1","isMotionValue","animation","animateSingleValue","onUpdate","completeAnimation","applyTransformsToTarget","shouldAnimatePositionOnly","animationType","xLength","yLength","config","initialPromotionConfig","shouldPreserveFollowOpacity","getPrevLead","hasRotate","rotateZ","resetValues","setStaticValue","getProjectionStyles","styleProp","_b","styles","visibility","pointerEvents","resolveMotionValue","emptyStyles","valuesToRender","transformOrigin","scaleCorrectors","corrected","num","resetTree","clear","measuredLayout","axisSnapshot","layoutDelta","visualDelta","parentSnapshot","parentLayout","relativeSnapshot","onBeforeLayoutMeasure","duration","ease","userAgentContains","string","navigator","userAgent","toLowerCase","includes","roundPoint","DocumentProjectionNode","ref","document","documentElement","scrollLeft","body","scrollTop","HTMLProjectionNode","documentNode","getComputedStyle","position","pan","super","removePointerDownListener","onPointerDown","pointerDownEvent","session","createPanHandlers","onPanSessionStart","onPanStart","onPan","onPanEnd","removeGroupControls","controls","dragControls","subscribe","ProjectionNode","shallowCompare","prev","isArray","prevLength","reversePriorityOrder","variantPriorityOrder","reverse","numAnimationTypes","createAnimationState","animations","map","animateVisualElement","animateList","state","createTypeState","whileInView","whileHover","whileTap","whileDrag","whileFocus","exit","isInitialRender","buildResolvedTypeValues","acc","definition","resolved","resolveVariant","transitionEnd","animateChanges","changedActiveType","getVariantContext","removedKeys","encounteredKeys","removedVariantIndex","typeState","prop","propIsVariant","isVariantLabel","activeDelta","isActive","isInherited","manuallyAnimateOnMount","protectedKeys","prevProp","isAnimationControls","variantDidChange","checkVariantsDidChange","shouldAnimateType","definitionList","resolvedValues","reduce","prevResolvedValues","allKeys","markToAnimate","needsAnimating","hasOwnProperty","isKeyframesTarget","blockInitialAnimation","size","fallbackAnimation","fallbackTarget","getBaseTarget","shouldAnimate","resolve","variantChildren","setAnimateFunction","makeAnimator","getState","updateAnimationControlsSubscription","prevAnimate","custom","prevIsPresent","prevPresenceContext","exitAnimation","addHoverEvent","callbackName","handleEvent","isNodeOrChild","parentElement","fireSyntheticPointerEvent","syntheticPointerEvent","PointerEvent","observerCallbacks","observers","fireObserverCallback","entry","fireAllObserverCallbacks","entries","observeIntersection","rootInteresectionObserver","lookupRoot","rootObservers","JSON","stringify","IntersectionObserver","initIntersectionObserver","observe","unobserve","thresholdNames","gestureAnimations","inView","hasEnteredView","isInView","startObserver","viewport","margin","rootMargin","amount","once","threshold","isIntersecting","onViewportEnter","onViewportLeave","hasOptionsChanged","prevViewport","hasViewportOptionChanged","tap","removeStartListeners","removeEndListeners","removeAccessibleListeners","startPointerPress","startInfo","isPressing","removePointerUpListener","endPointerPress","endEvent","endInfo","checkPressEnd","onTap","onTapCancel","removePointerCancelListener","cancelEvent","cancelInfo","cancelPress","startPress","startAccessiblePress","removeKeydownListener","keydownEvent","keyupEvent","removeBlurListener","handleBlur","onTapStart","removePointerListener","removeFocusListener","focus","onFocus","isFocusVisible","matches","e","onBlur","hover","splitCSSVariableRegex","maxDepth","getVariableValue","token","fallback","match","exec","parseCSSVariable","getPropertyValue","trimmed","trim","isNumericalString","isCSSVariableToken","positionalKeys","isPositionalKey","isNumOrPxType","v","number","getPosFromMatrix","matrix","pos","split","getTranslateFromMatrix","pos2","pos3","_bbox","matrix3d","transformKeys","nonTranslationalTransformKeys","transformPropOrder","filter","positionalValues","width","_ref3","paddingLeft","paddingRight","height","_ref4","_ref5","paddingTop","paddingBottom","_ref6","_ref7","_ref8","_ref9","_ref10","_ref11","translateX","translateY","checkAndConvertChangedValueTypes","targetPositionalKeys","Object","keys","removedTransformValues","hasAttemptedToRemoveTransformValues","changedValueTypeKeys","hasValue","fromType","findDimensionValueType","toType","numKeyframes","fromIndex","removedTransforms","startsWith","removeNonTranslationalTransform","jump","scrollY","indexOf","pageYOffset","convertedTarget","convertChangedValueTypes","changedKeys","originBbox","elementComputedStyle","targetBbox","_ref12","isBrowser","scrollTo","unitConversion","hasPositionalKey","parseDomVariant","Element","resolveCSSVariables","prefersReducedMotion","hasReducedMotionListener","visualElementStore","featureNames","featureDefinitions","numFeatures","propEventHandlers","numVariantProps","variantProps","VisualElement","reducedMotionConfig","visualState","isVariantNode","isControllingVariants","features","valueSubscriptions","prevMotionValues","events","propEventSubscriptions","notifyUpdate","triggerBuild","renderInstance","renderState","baseTarget","initialValues","willChange","initialMotionValues","scrapeMotionValuesFromProps","isWillChangeMotionValue","_props","_prevProps","removeFromVariantTree","addVariantChild","bindToMotionValue","matchMedia","motionMediaQuery","setReducedMotionPreferences","addListener","initPrefersReducedMotion","valueIsTransform","transformProps","removeOnChange","on","latestValue","removeOnRenderRequest","sortNodePosition","other","sortInstanceNodePosition","loadFeatures","isStrict","preloadedFeatures","initialLayoutGroupConfig","ProjectionNodeConstructor","renderedProps","isEnabled","FeatureConstructor","MeasureLayoutComponent","updateFeatures","feature","build","measureInstanceViewportBox","getStaticValue","makeTargetAnimatable","canMutate","makeTargetAnimatableFromInstance","listener","nextValue","prevValue","addValue","owner","existingValue","hasAnimated","removeValue","updateMotionValuesFromProps","handleChildMotionValue","getVariant","variants","getClosestVariantNode","closestVariantNode","unsubscribe","removeValueFromRenderState","defaultValue","readValue","getBaseTargetFromProps","readValueFromInstance","setBaseTarget","valueFromInitial","resolveVariantFromProps","DOMVisualElement","compareDocumentPosition","vars","transformValues","getOrigin","checkTargetForNewValues","parsed","HTMLVisualElement","defaultType","getDefaultValueType","default","computedStyle","isCSSVariableName","buildHTMLStyles","childSubscription","textContent","renderHTML","SVGVisualElement","isSVGTag","camelCaseAttributes","camelToDash","getAttribute","buildSVGAttrs","renderSVG","domMax","renderer","createDomVisualElement","Component","isSVGComponent","enableHardwareAcceleration"],"sourceRoot":""}